
01_stop_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e0  080061e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  20000074  0800625c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  0800625c  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e92e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bfd  00000000  00000000  0003e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000435d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00044c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027880  00000000  00000000  00045fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e94b  00000000  00000000  0006d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e35  00000000  00000000  0008c18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005920  00000000  00000000  00174010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006100 	.word	0x08006100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006100 	.word	0x08006100

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f899 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	20000b34 	.word	0x20000b34
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1f      	ldr	r4, [pc, #124]	; (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c18      	ldr	r4, [pc, #96]	; (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b949      	cbnz	r1, 800030e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80002fa:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80002fc:	f005 f8e6 	bl	80054cc <tx_low_power_enter>
    POP     {r0-r3}
 8000300:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000302:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000304:	f005 f912 	bl	800552c <tx_low_power_exit>
    POP     {r0-r3}
 8000308:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f1      	b.n	80002f2 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7d4      	b.n	80002c8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	20000bd0 	.word	0x20000bd0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	20000b38 	.word	0x20000b38
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	20000b3c 	.word	0x20000b3c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	2000113c 	.word	0x2000113c

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	; (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	; (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f004 fcb7 	bl	8004d3c <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f004 fc24 	bl	8004c20 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	20000bdc 	.word	0x20000bdc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	2000113c 	.word	0x2000113c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	20000be0 	.word	0x20000be0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	20000c6c 	.word	0x20000c6c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	20000c70 	.word	0x20000c70
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	20000c68 	.word	0x20000c68
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	20000c64 	.word	0x20000c64
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	20000bd0 	.word	0x20000bd0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	20000b38 	.word	0x20000b38
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	20000b3c 	.word	0x20000b3c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <strlen>:
 8000428:	4603      	mov	r3, r0
 800042a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800042e:	2a00      	cmp	r2, #0
 8000430:	d1fb      	bne.n	800042a <strlen+0x2>
 8000432:	1a18      	subs	r0, r3, r0
 8000434:	3801      	subs	r0, #1
 8000436:	4770      	bx	lr
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295
 80004f4:	f000 b974 	b.w	80007e0 <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	4604      	mov	r4, r0
 8000518:	468e      	mov	lr, r1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d14d      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051e:	428a      	cmp	r2, r1
 8000520:	4694      	mov	ip, r2
 8000522:	d969      	bls.n	80005f8 <__udivmoddi4+0xe8>
 8000524:	fab2 f282 	clz	r2, r2
 8000528:	b152      	cbz	r2, 8000540 <__udivmoddi4+0x30>
 800052a:	fa01 f302 	lsl.w	r3, r1, r2
 800052e:	f1c2 0120 	rsb	r1, r2, #32
 8000532:	fa20 f101 	lsr.w	r1, r0, r1
 8000536:	fa0c fc02 	lsl.w	ip, ip, r2
 800053a:	ea41 0e03 	orr.w	lr, r1, r3
 800053e:	4094      	lsls	r4, r2
 8000540:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000544:	0c21      	lsrs	r1, r4, #16
 8000546:	fbbe f6f8 	udiv	r6, lr, r8
 800054a:	fa1f f78c 	uxth.w	r7, ip
 800054e:	fb08 e316 	mls	r3, r8, r6, lr
 8000552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000556:	fb06 f107 	mul.w	r1, r6, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f106 30ff 	add.w	r0, r6, #4294967295
 8000566:	f080 811f 	bcs.w	80007a8 <__udivmoddi4+0x298>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 811c 	bls.w	80007a8 <__udivmoddi4+0x298>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb3 f0f8 	udiv	r0, r3, r8
 800057c:	fb08 3310 	mls	r3, r8, r0, r3
 8000580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000584:	fb00 f707 	mul.w	r7, r0, r7
 8000588:	42a7      	cmp	r7, r4
 800058a:	d90a      	bls.n	80005a2 <__udivmoddi4+0x92>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 33ff 	add.w	r3, r0, #4294967295
 8000594:	f080 810a 	bcs.w	80007ac <__udivmoddi4+0x29c>
 8000598:	42a7      	cmp	r7, r4
 800059a:	f240 8107 	bls.w	80007ac <__udivmoddi4+0x29c>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005a6:	1be4      	subs	r4, r4, r7
 80005a8:	2600      	movs	r6, #0
 80005aa:	b11d      	cbz	r5, 80005b4 <__udivmoddi4+0xa4>
 80005ac:	40d4      	lsrs	r4, r2
 80005ae:	2300      	movs	r3, #0
 80005b0:	e9c5 4300 	strd	r4, r3, [r5]
 80005b4:	4631      	mov	r1, r6
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d909      	bls.n	80005d2 <__udivmoddi4+0xc2>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	f000 80ef 	beq.w	80007a2 <__udivmoddi4+0x292>
 80005c4:	2600      	movs	r6, #0
 80005c6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ca:	4630      	mov	r0, r6
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	fab3 f683 	clz	r6, r3
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d14a      	bne.n	8000670 <__udivmoddi4+0x160>
 80005da:	428b      	cmp	r3, r1
 80005dc:	d302      	bcc.n	80005e4 <__udivmoddi4+0xd4>
 80005de:	4282      	cmp	r2, r0
 80005e0:	f200 80f9 	bhi.w	80007d6 <__udivmoddi4+0x2c6>
 80005e4:	1a84      	subs	r4, r0, r2
 80005e6:	eb61 0303 	sbc.w	r3, r1, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	469e      	mov	lr, r3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0e0      	beq.n	80005b4 <__udivmoddi4+0xa4>
 80005f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005f6:	e7dd      	b.n	80005b4 <__udivmoddi4+0xa4>
 80005f8:	b902      	cbnz	r2, 80005fc <__udivmoddi4+0xec>
 80005fa:	deff      	udf	#255	; 0xff
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 8092 	bne.w	800072a <__udivmoddi4+0x21a>
 8000606:	eba1 010c 	sub.w	r1, r1, ip
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fa1f fe8c 	uxth.w	lr, ip
 8000612:	2601      	movs	r6, #1
 8000614:	0c20      	lsrs	r0, r4, #16
 8000616:	fbb1 f3f7 	udiv	r3, r1, r7
 800061a:	fb07 1113 	mls	r1, r7, r3, r1
 800061e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000622:	fb0e f003 	mul.w	r0, lr, r3
 8000626:	4288      	cmp	r0, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x12c>
 800062a:	eb1c 0101 	adds.w	r1, ip, r1
 800062e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000632:	d202      	bcs.n	800063a <__udivmoddi4+0x12a>
 8000634:	4288      	cmp	r0, r1
 8000636:	f200 80cb 	bhi.w	80007d0 <__udivmoddi4+0x2c0>
 800063a:	4643      	mov	r3, r8
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f7 	udiv	r0, r1, r7
 8000644:	fb07 1110 	mls	r1, r7, r0, r1
 8000648:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800064c:	fb0e fe00 	mul.w	lr, lr, r0
 8000650:	45a6      	cmp	lr, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x156>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f100 31ff 	add.w	r1, r0, #4294967295
 800065c:	d202      	bcs.n	8000664 <__udivmoddi4+0x154>
 800065e:	45a6      	cmp	lr, r4
 8000660:	f200 80bb 	bhi.w	80007da <__udivmoddi4+0x2ca>
 8000664:	4608      	mov	r0, r1
 8000666:	eba4 040e 	sub.w	r4, r4, lr
 800066a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800066e:	e79c      	b.n	80005aa <__udivmoddi4+0x9a>
 8000670:	f1c6 0720 	rsb	r7, r6, #32
 8000674:	40b3      	lsls	r3, r6
 8000676:	fa22 fc07 	lsr.w	ip, r2, r7
 800067a:	ea4c 0c03 	orr.w	ip, ip, r3
 800067e:	fa20 f407 	lsr.w	r4, r0, r7
 8000682:	fa01 f306 	lsl.w	r3, r1, r6
 8000686:	431c      	orrs	r4, r3
 8000688:	40f9      	lsrs	r1, r7
 800068a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800068e:	fa00 f306 	lsl.w	r3, r0, r6
 8000692:	fbb1 f8f9 	udiv	r8, r1, r9
 8000696:	0c20      	lsrs	r0, r4, #16
 8000698:	fa1f fe8c 	uxth.w	lr, ip
 800069c:	fb09 1118 	mls	r1, r9, r8, r1
 80006a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a4:	fb08 f00e 	mul.w	r0, r8, lr
 80006a8:	4288      	cmp	r0, r1
 80006aa:	fa02 f206 	lsl.w	r2, r2, r6
 80006ae:	d90b      	bls.n	80006c8 <__udivmoddi4+0x1b8>
 80006b0:	eb1c 0101 	adds.w	r1, ip, r1
 80006b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006b8:	f080 8088 	bcs.w	80007cc <__udivmoddi4+0x2bc>
 80006bc:	4288      	cmp	r0, r1
 80006be:	f240 8085 	bls.w	80007cc <__udivmoddi4+0x2bc>
 80006c2:	f1a8 0802 	sub.w	r8, r8, #2
 80006c6:	4461      	add	r1, ip
 80006c8:	1a09      	subs	r1, r1, r0
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006d0:	fb09 1110 	mls	r1, r9, r0, r1
 80006d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	458e      	cmp	lr, r1
 80006de:	d908      	bls.n	80006f2 <__udivmoddi4+0x1e2>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006e8:	d26c      	bcs.n	80007c4 <__udivmoddi4+0x2b4>
 80006ea:	458e      	cmp	lr, r1
 80006ec:	d96a      	bls.n	80007c4 <__udivmoddi4+0x2b4>
 80006ee:	3802      	subs	r0, #2
 80006f0:	4461      	add	r1, ip
 80006f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006f6:	fba0 9402 	umull	r9, r4, r0, r2
 80006fa:	eba1 010e 	sub.w	r1, r1, lr
 80006fe:	42a1      	cmp	r1, r4
 8000700:	46c8      	mov	r8, r9
 8000702:	46a6      	mov	lr, r4
 8000704:	d356      	bcc.n	80007b4 <__udivmoddi4+0x2a4>
 8000706:	d053      	beq.n	80007b0 <__udivmoddi4+0x2a0>
 8000708:	b15d      	cbz	r5, 8000722 <__udivmoddi4+0x212>
 800070a:	ebb3 0208 	subs.w	r2, r3, r8
 800070e:	eb61 010e 	sbc.w	r1, r1, lr
 8000712:	fa01 f707 	lsl.w	r7, r1, r7
 8000716:	fa22 f306 	lsr.w	r3, r2, r6
 800071a:	40f1      	lsrs	r1, r6
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	2600      	movs	r6, #0
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	40d8      	lsrs	r0, r3
 8000730:	fa0c fc02 	lsl.w	ip, ip, r2
 8000734:	fa21 f303 	lsr.w	r3, r1, r3
 8000738:	4091      	lsls	r1, r2
 800073a:	4301      	orrs	r1, r0
 800073c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000740:	fa1f fe8c 	uxth.w	lr, ip
 8000744:	fbb3 f0f7 	udiv	r0, r3, r7
 8000748:	fb07 3610 	mls	r6, r7, r0, r3
 800074c:	0c0b      	lsrs	r3, r1, #16
 800074e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000752:	fb00 f60e 	mul.w	r6, r0, lr
 8000756:	429e      	cmp	r6, r3
 8000758:	fa04 f402 	lsl.w	r4, r4, r2
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x260>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 38ff 	add.w	r8, r0, #4294967295
 8000766:	d22f      	bcs.n	80007c8 <__udivmoddi4+0x2b8>
 8000768:	429e      	cmp	r6, r3
 800076a:	d92d      	bls.n	80007c8 <__udivmoddi4+0x2b8>
 800076c:	3802      	subs	r0, #2
 800076e:	4463      	add	r3, ip
 8000770:	1b9b      	subs	r3, r3, r6
 8000772:	b289      	uxth	r1, r1
 8000774:	fbb3 f6f7 	udiv	r6, r3, r7
 8000778:	fb07 3316 	mls	r3, r7, r6, r3
 800077c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000780:	fb06 f30e 	mul.w	r3, r6, lr
 8000784:	428b      	cmp	r3, r1
 8000786:	d908      	bls.n	800079a <__udivmoddi4+0x28a>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000790:	d216      	bcs.n	80007c0 <__udivmoddi4+0x2b0>
 8000792:	428b      	cmp	r3, r1
 8000794:	d914      	bls.n	80007c0 <__udivmoddi4+0x2b0>
 8000796:	3e02      	subs	r6, #2
 8000798:	4461      	add	r1, ip
 800079a:	1ac9      	subs	r1, r1, r3
 800079c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a0:	e738      	b.n	8000614 <__udivmoddi4+0x104>
 80007a2:	462e      	mov	r6, r5
 80007a4:	4628      	mov	r0, r5
 80007a6:	e705      	b.n	80005b4 <__udivmoddi4+0xa4>
 80007a8:	4606      	mov	r6, r0
 80007aa:	e6e3      	b.n	8000574 <__udivmoddi4+0x64>
 80007ac:	4618      	mov	r0, r3
 80007ae:	e6f8      	b.n	80005a2 <__udivmoddi4+0x92>
 80007b0:	454b      	cmp	r3, r9
 80007b2:	d2a9      	bcs.n	8000708 <__udivmoddi4+0x1f8>
 80007b4:	ebb9 0802 	subs.w	r8, r9, r2
 80007b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007bc:	3801      	subs	r0, #1
 80007be:	e7a3      	b.n	8000708 <__udivmoddi4+0x1f8>
 80007c0:	4646      	mov	r6, r8
 80007c2:	e7ea      	b.n	800079a <__udivmoddi4+0x28a>
 80007c4:	4620      	mov	r0, r4
 80007c6:	e794      	b.n	80006f2 <__udivmoddi4+0x1e2>
 80007c8:	4640      	mov	r0, r8
 80007ca:	e7d1      	b.n	8000770 <__udivmoddi4+0x260>
 80007cc:	46d0      	mov	r8, sl
 80007ce:	e77b      	b.n	80006c8 <__udivmoddi4+0x1b8>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	e732      	b.n	800063c <__udivmoddi4+0x12c>
 80007d6:	4630      	mov	r0, r6
 80007d8:	e709      	b.n	80005ee <__udivmoddi4+0xde>
 80007da:	4464      	add	r4, ip
 80007dc:	3802      	subs	r0, #2
 80007de:	e742      	b.n	8000666 <__udivmoddi4+0x156>

080007e0 <__aeabi_idiv0>:
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <tx_application_define+0x34>)
 80007f6:	4909      	ldr	r1, [pc, #36]	; (800081c <tx_application_define+0x38>)
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <tx_application_define+0x3c>)
 80007fa:	f004 fcd5 	bl	80051a8 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <tx_application_define+0x3c>)
 8000806:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f80b 	bl	8000824 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000090 	.word	0x20000090
 800081c:	08006118 	.word	0x08006118
 8000820:	20000490 	.word	0x20000490

08000824 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af08      	add	r7, sp, #32
 800082a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tx_thread_create(&thread_ptr, "refresh_thread", refresh_thread_entry, 0x1234, thread_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000834:	23b0      	movs	r3, #176	; 0xb0
 8000836:	9306      	str	r3, [sp, #24]
 8000838:	2301      	movs	r3, #1
 800083a:	9305      	str	r3, [sp, #20]
 800083c:	2301      	movs	r3, #1
 800083e:	9304      	str	r3, [sp, #16]
 8000840:	230f      	movs	r3, #15
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	230f      	movs	r3, #15
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <App_ThreadX_Init+0x48>)
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	f241 2334 	movw	r3, #4660	; 0x1234
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <App_ThreadX_Init+0x4c>)
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <App_ThreadX_Init+0x50>)
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <App_ThreadX_Init+0x54>)
 800085c:	f004 fd44 	bl	80052e8 <_txe_thread_create>

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000860:	68fb      	ldr	r3, [r7, #12]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004c4 	.word	0x200004c4
 8000870:	0800095d 	.word	0x0800095d
 8000874:	0800612c 	.word	0x0800612c
 8000878:	200008c4 	.word	0x200008c4

0800087c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000880:	f003 fd54 	bl	800432c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
	uint32_t ticks_to_sleep;
	//LPTIM1->CNT = 0; //
#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
	fm_debug_uint32_uart(count);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f87b 	bl	800098c <fm_debug_uint32_uart>
#endif
	g_lptim1_start = LPTIM1->CNT;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <App_ThreadX_LowPower_Timer_Setup+0x3c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <App_ThreadX_LowPower_Timer_Setup+0x40>)
 800089e:	801a      	strh	r2, [r3, #0]
	ticks_to_sleep = (32768 / 16) * count; // clock_freq /  RTC_WAKEUPCLOCK_RTCCLK_DIV16
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	02db      	lsls	r3, r3, #11
 80008a4:	60fb      	str	r3, [r7, #12]
	ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <App_ThreadX_LowPower_Timer_Setup+0x44>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	60fb      	str	r3, [r7, #12]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80008b2:	2200      	movs	r2, #0
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 80008b8:	f002 fb9c 	bl	8002ff4 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40007c00 	.word	0x40007c00
 80008c8:	20000974 	.word	0x20000974
 80008cc:	51eb851f 	.word	0x51eb851f
 80008d0:	20000a04 	.word	0x20000a04

080008d4 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
	// CPU goes to stop mode,

	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 80008d8:	2001      	movs	r0, #1
 80008da:	f001 f875 	bl	80019c8 <HAL_PWREx_EnterSTOP1Mode>

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

	/*
	 * If CPU wakes up other reason but timer flag we must wait until
	 * expected time was elapsed. Debugger issues makes wake up CPU earlier
	 */
	HAL_ResumeTick();
 80008e6:	f000 fb77 	bl	8000fd8 <HAL_ResumeTick>
	SystemClock_Config();
 80008ea:	f000 f897 	bl	8000a1c <SystemClock_Config>
  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
	static uint16_t cnt_drift = 0;
	ULONG cnt_ret;
	g_lptim1_end = LPTIM1->CNT;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 8000902:	801a      	strh	r2, [r3, #0]
	cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	607b      	str	r3, [r7, #4]
	cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2264      	movs	r2, #100	; 0x64
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	607b      	str	r3, [r7, #4]
	cnt_ret += cnt_drift;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	607b      	str	r3, [r7, #4]
	cnt_drift = cnt_ret % 2048;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29b      	uxth	r3, r3
 800092c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 8000934:	801a      	strh	r2, [r3, #0]
	cnt_ret /= 2048;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0adb      	lsrs	r3, r3, #11
 800093a:	607b      	str	r3, [r7, #4]
	return cnt_ret;
 800093c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40007c00 	.word	0x40007c00
 8000950:	20000976 	.word	0x20000976
 8000954:	20000974 	.word	0x20000974
 8000958:	20000978 	.word	0x20000978

0800095c <refresh_thread_entry>:

/* USER CODE BEGIN 1 */
VOID refresh_thread_entry(ULONG initial_input)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2120      	movs	r1, #32
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fe8a 	bl	8001684 <HAL_GPIO_WritePin>
		tx_thread_sleep(20);
 8000970:	2014      	movs	r0, #20
 8000972:	f003 fe83 	bl	800467c <_tx_thread_sleep>

		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 fe81 	bl	8001684 <HAL_GPIO_WritePin>
		tx_thread_sleep(200);
 8000982:	20c8      	movs	r0, #200	; 0xc8
 8000984:	f003 fe7a 	bl	800467c <_tx_thread_sleep>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000988:	e7ec      	b.n	8000964 <refresh_thread_entry+0x8>
	...

0800098c <fm_debug_uint32_uart>:
/*
 * @brief
 * @param
 */
void fm_debug_uint32_uart(uint32_t num)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	snprintf(g_str, STR_BUFFER, "%lu\n", num);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <fm_debug_uint32_uart+0x30>)
 8000998:	2150      	movs	r1, #80	; 0x50
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <fm_debug_uint32_uart+0x34>)
 800099c:	f004 ff2e 	bl	80057fc <sniprintf>
	fm_debug_msg_uart((uint8_t*) g_str, strlen(g_str));
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <fm_debug_uint32_uart+0x34>)
 80009a2:	f7ff fd41 	bl	8000428 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <fm_debug_uint32_uart+0x34>)
 80009ae:	f000 f809 	bl	80009c4 <fm_debug_msg_uart>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08006140 	.word	0x08006140
 80009c0:	2000097c 	.word	0x2000097c

080009c4 <fm_debug_msg_uart>:
 * agregar condicionales de pre-compilacion para contemplar el caso donde no
 * se use el uart2.
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	 * ejecutada en otro hilo. La siguiente implementacion no es buena porque
	 * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
	 * por un corto tiempo, aun mejor seria implementar algo con RTOS.
	 *
	 */
	 HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	230a      	movs	r3, #10
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <fm_debug_msg_uart+0x24>)
 80009da:	f002 ff03 	bl	80037e4 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000a28 	.word	0x20000a28

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fbac 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f812 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f000 f8fa 	bl	8000bf0 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80009fc:	f000 f866 	bl	8000acc <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000a00:	f000 f892 	bl	8000b28 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 f8c4 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Start(&hlptim1, 0xffff);
 8000a08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <main+0x2c>)
 8000a0e:	f000 fef3 	bl	80017f8 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a12:	f7ff ff33 	bl	800087c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <main+0x2a>
 8000a18:	200009cc 	.word	0x200009cc

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b096      	sub	sp, #88	; 0x58
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2244      	movs	r2, #68	; 0x44
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 fede 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000a3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a42:	f000 ff6b 	bl	800191c <HAL_PWREx_ControlVoltageScaling>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a4c:	f000 f954 	bl	8000cf8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a50:	f000 ff46 	bl	80018e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <SystemClock_Config+0xac>)
 8000a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <SystemClock_Config+0xac>)
 8000a5c:	f023 0318 	bic.w	r3, r3, #24
 8000a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000a64:	231c      	movs	r3, #28
 8000a66:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000a78:	2390      	movs	r3, #144	; 0x90
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 ffcb 	bl	8001a20 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a90:	f000 f932 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	230f      	movs	r3, #15
 8000a96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fbcb 	bl	8002248 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ab8:	f000 f91e 	bl	8000cf8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000abc:	f002 f886 	bl	8002bcc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ac0:	bf00      	nop
 8000ac2:	3758      	adds	r7, #88	; 0x58
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <MX_LPTIM1_Init+0x58>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aea:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_LPTIM1_Init+0x54>)
 8000b0c:	f000 fdd2 	bl	80016b4 <HAL_LPTIM_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000b16:	f000 f8ef 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200009cc 	.word	0x200009cc
 8000b24:	40007c00 	.word	0x40007c00

08000b28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_RTC_Init+0x64>)
 8000b30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b3a:	227f      	movs	r2, #127	; 0x7f
 8000b3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b40:	22ff      	movs	r2, #255	; 0xff
 8000b42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b5e:	f002 f937 	bl	8002dd0 <HAL_RTC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b68:	f000 f8c6 	bl	8000cf8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xffff, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_RTC_Init+0x60>)
 8000b74:	f002 fa3e 	bl	8002ff4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000b7e:	f000 f8bb 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000a04 	.word	0x20000a04
 8000b8c:	40002800 	.word	0x40002800

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_USART2_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bd4:	f002 fdb8 	bl	8003748 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 f88b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000a28 	.word	0x20000a28
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fd09 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c8a:	f000 fb81 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fb72 	bl	8001390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48000800 	.word	0x48000800

08000cbc <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f002 fa29 	bl	800311c <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fa51 	bl	800118c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f06f 0003 	mvn.w	r0, #3
 8000d42:	f000 fafb 	bl	800133c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09e      	sub	sp, #120	; 0x78
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2268      	movs	r2, #104	; 0x68
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fd41 	bl	80057ec <memset>
  if(hlptim->Instance==LPTIM1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_LPTIM_MspInit+0x60>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d11b      	bne.n	8000dac <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000d7a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d7e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fcb5 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8000d90:	f7ff ffb2 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_LPTIM_MspInit+0x64>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_LPTIM_MspInit+0x64>)
 8000d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_LPTIM_MspInit+0x64>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3778      	adds	r7, #120	; 0x78
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40007c00 	.word	0x40007c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b09c      	sub	sp, #112	; 0x70
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	2268      	movs	r2, #104	; 0x68
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fd0d 	bl	80057ec <memset>
  if(hrtc->Instance==RTC)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <HAL_RTC_MspInit+0x68>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d11f      	bne.n	8000e1c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fc81 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000df8:	f7ff ff7e 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_RTC_MspInit+0x6c>)
 8000dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_RTC_MspInit+0x6c>)
 8000e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 fa93 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 faac 	bl	8001374 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3770      	adds	r7, #112	; 0x70
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40002800 	.word	0x40002800
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0a4      	sub	sp, #144	; 0x90
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2268      	movs	r2, #104	; 0x68
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fccd 	bl	80057ec <memset>
  if(huart->Instance==USART2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <HAL_UART_MspInit+0xb0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13a      	bne.n	8000ed2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fc43 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e74:	f7ff ff40 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e82:	6593      	str	r3, [r2, #88]	; 0x58
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 fa5f 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3790      	adds	r7, #144	; 0x90
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_InitTick+0xe0>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <HAL_InitTick+0xe0>)
 8000ef8:	f043 0310 	orr.w	r3, r3, #16
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_InitTick+0xe0>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0a:	f107 0210 	add.w	r2, r7, #16
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fb5b 	bl	80025d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f24:	f001 fb28 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8000f28:	6378      	str	r0, [r7, #52]	; 0x34
 8000f2a:	e004      	b.n	8000f36 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f2c:	f001 fb24 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8000f30:	4603      	mov	r3, r0
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f38:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_InitTick+0xe4>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9b      	lsrs	r3, r3, #18
 8000f40:	3b01      	subs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <HAL_InitTick+0xec>)
 8000f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f6c:	f002 f95a 	bl	8003224 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11b      	bne.n	8000fb6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <HAL_InitTick+0xe8>)
 8000f80:	f002 f9b2 	bl	80032e8 <HAL_TIM_Base_Start_IT>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d111      	bne.n	8000fb6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f92:	2036      	movs	r0, #54	; 0x36
 8000f94:	f000 f9ee 	bl	8001374 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	d808      	bhi.n	8000fb0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	2036      	movs	r0, #54	; 0x36
 8000fa4:	f000 f9ca 	bl	800133c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_InitTick+0xf0>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e002      	b.n	8000fb6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3738      	adds	r7, #56	; 0x38
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	20000aac 	.word	0x20000aac
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_ResumeTick+0x20>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_ResumeTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	60da      	str	r2, [r3, #12]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000aac 	.word	0x20000aac

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	for(int i = 0; i <10; i++);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	e002      	b.n	800102c <DebugMon_Handler+0x12>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3301      	adds	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b09      	cmp	r3, #9
 8001030:	ddf9      	ble.n	8001026 <DebugMon_Handler+0xc>

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <RTC_WKUP_IRQHandler+0x10>)
 8001046:	f002 f8c7 	bl	80031d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000a04 	.word	0x20000a04

08001054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM6_DAC_IRQHandler+0x10>)
 800105a:	f002 f9a1 	bl	80033a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000aac 	.word	0x20000aac

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f004 fb7e 	bl	8005798 <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20028000 	.word	0x20028000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	20000af8 	.word	0x20000af8
 80010d0:	20001158 	.word	0x20001158

080010d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010fc:	f7ff ffea 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f004 fb3d 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112a:	f7ff fc5f 	bl	80009ec <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800113c:	080061e8 	.word	0x080061e8
  ldr r2, =_sbss
 8001140:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001144:	20001154 	.word	0x20001154

08001148 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_IRQHandler>
	...

0800114c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_Init+0x3c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_Init+0x3c>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001162:	2003      	movs	r0, #3
 8001164:	f000 f8df 	bl	8001326 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001168:	200f      	movs	r0, #15
 800116a:	f7ff febb 	bl	8000ee4 <HAL_InitTick>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	e001      	b.n	800117e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117a:	f7ff fdc3 	bl	8000d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117e:	79fb      	ldrb	r3, [r7, #7]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000afc 	.word	0x20000afc

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000afc 	.word	0x20000afc

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff4c 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134e:	f7ff ff61 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001352:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff ffb1 	bl	80012c0 <NVIC_EncodePriority>
 800135e:	4602      	mov	r2, r0
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff80 	bl	800126c <__NVIC_SetPriority>
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff54 	bl	8001230 <__NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e154      	b.n	800164a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8146 	beq.w	8001644 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a0 	beq.w	8001644 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_GPIO_Init+0x2d8>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_GPIO_Init+0x2d8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6613      	str	r3, [r2, #96]	; 0x60
 8001510:	4b55      	ldr	r3, [pc, #340]	; (8001668 <HAL_GPIO_Init+0x2d8>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800151c:	4a53      	ldr	r2, [pc, #332]	; (800166c <HAL_GPIO_Init+0x2dc>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001546:	d019      	beq.n	800157c <HAL_GPIO_Init+0x1ec>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_GPIO_Init+0x2e0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1e8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_GPIO_Init+0x2e4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1e4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a47      	ldr	r2, [pc, #284]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a46      	ldr	r2, [pc, #280]	; (800167c <HAL_GPIO_Init+0x2ec>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1dc>
 8001568:	2304      	movs	r3, #4
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 800156c:	2307      	movs	r3, #7
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001570:	2303      	movs	r3, #3
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_GPIO_Init+0x2dc>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aea3 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	48001000 	.word	0x48001000
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e08f      	b.n	80017e6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d106      	bne.n	80016e6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fb37 	bl	8000d54 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d004      	beq.n	8001708 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001706:	d103      	bne.n	8001710 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 031e 	bic.w	r3, r3, #30
 800170e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001718:	4293      	cmp	r3, r2
 800171a:	d005      	beq.n	8001728 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001726:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_LPTIM_Init+0x13c>)
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001738:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800173e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001744:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800174a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001762:	4313      	orrs	r3, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d004      	beq.n	800177c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800177a:	d107      	bne.n	800178c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001784:	4313      	orrs	r3, r2
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001794:	4293      	cmp	r3, r2
 8001796:	d00a      	beq.n	80017ae <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80017a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_LPTIM_Init+0x140>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d108      	bne.n	80017d2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	621a      	str	r2, [r3, #32]
 80017d0:	e004      	b.n	80017dc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017da:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	ff19f1fe 	.word	0xff19f1fe
 80017f4:	40007c00 	.word	0x40007c00

080017f8 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d00c      	beq.n	800182c <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800181a:	d107      	bne.n	800182c <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800182a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800184c:	2110      	movs	r1, #16
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f816 	bl	8001880 <LPTIM_WaitForFlag>
 8001854:	4603      	mov	r3, r0
 8001856:	2b03      	cmp	r3, #3
 8001858:	d101      	bne.n	800185e <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e00c      	b.n	8001878 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0204 	orr.w	r2, r2, #4
 800186c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <LPTIM_WaitForFlag+0x58>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <LPTIM_WaitForFlag+0x5c>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	0b9b      	lsrs	r3, r3, #14
 800189a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d002      	beq.n	80018ca <LPTIM_WaitForFlag+0x4a>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ec      	bne.n	80018a4 <LPTIM_WaitForFlag+0x24>

  return result;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20000000 	.word	0x20000000
 80018dc:	d1b71759 	.word	0xd1b71759

080018e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_PWREx_GetVoltageRange+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007000 	.word	0x40007000

0800191c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192a:	d130      	bne.n	800198e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d038      	beq.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2232      	movs	r2, #50	; 0x32
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001960:	e002      	b.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3b01      	subs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001974:	d102      	bne.n	800197c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f2      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d110      	bne.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e00f      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199a:	d007      	beq.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0307 	bic.w	r3, r3, #7
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80019f4:	bf30      	wfi
 80019f6:	e002      	b.n	80019fe <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80019f8:	bf40      	sev
    __WFE();
 80019fa:	bf20      	wfe
    __WFE();
 80019fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6113      	str	r3, [r2, #16]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc02 	b.w	8002238 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	4b96      	ldr	r3, [pc, #600]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3e:	4b94      	ldr	r3, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80e4 	beq.w	8001c1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4c>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	f040 808b 	bne.w	8001b7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f040 8087 	bne.w	8001b7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x64>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e3d9      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_RCC_OscConfig+0x7e>
 8001a94:	4b7e      	ldr	r3, [pc, #504]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9c:	e005      	b.n	8001aaa <HAL_RCC_OscConfig+0x8a>
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d223      	bcs.n	8001af6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fdbe 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e3ba      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	496d      	ldr	r1, [pc, #436]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4968      	ldr	r1, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e025      	b.n	8001b42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4960      	ldr	r1, [pc, #384]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b14:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	495b      	ldr	r1, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fd7e 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e37a      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b42:	f000 fc81 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	4950      	ldr	r1, [pc, #320]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x278>)
 8001b60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b62:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f9bc 	bl	8000ee4 <HAL_InitTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d052      	beq.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	e35e      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d032      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb11 	bl	80011b4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b96:	f7ff fb0d 	bl	80011b4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e347      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a35      	ldr	r2, [pc, #212]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4930      	ldr	r1, [pc, #192]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	492b      	ldr	r1, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
 8001be6:	e01a      	b.n	8001c1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fade 	bl	80011b4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fada 	bl	80011b4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e314      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1dc>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d073      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x21c>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d10e      	bne.n	8001c54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d063      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d15f      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2f1      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x24c>
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e025      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d114      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x280>
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a02      	ldr	r2, [pc, #8]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e013      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	0800615c 	.word	0x0800615c
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	4ba0      	ldr	r3, [pc, #640]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a9f      	ldr	r2, [pc, #636]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a9c      	ldr	r2, [pc, #624]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa78 	bl	80011b4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fa74 	bl	80011b4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e2ae      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2a8>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa64 	bl	80011b4 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fa60 	bl	80011b4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e29a      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2d0>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d060      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x310>
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x328>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e277      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4973      	ldr	r1, [pc, #460]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	e040      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d023      	beq.n	8001dae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa1f 	bl	80011b4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fa1b 	bl	80011b4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e255      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	495f      	ldr	r1, [pc, #380]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e018      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff f9fb 	bl	80011b4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f9f7 	bl	80011b4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e231      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f9d6 	bl	80011b4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f9d2 	bl	80011b4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e20c      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001e2c:	e01b      	b.n	8001e66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e34:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f9b9 	bl	80011b4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff f9b5 	bl	80011b4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1ef      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ef      	bne.n	8001e46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80a6 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d118      	bne.n	8001ede <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f97c 	bl	80011b4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7ff f978 	bl	80011b4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1b2      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4d8>
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef6:	e029      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d115      	bne.n	8001f2c <HAL_RCC_OscConfig+0x50c>
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	4b9a      	ldr	r3, [pc, #616]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a99      	ldr	r2, [pc, #612]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	4b96      	ldr	r3, [pc, #600]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	4a95      	ldr	r2, [pc, #596]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff f92e 	bl	80011b4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f92a 	bl	80011b4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e162      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ed      	beq.n	8001f5c <HAL_RCC_OscConfig+0x53c>
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f917 	bl	80011b4 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f913 	bl	80011b4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e14b      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03c      	beq.n	8002046 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fda:	4a6f      	ldr	r2, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f8e6 	bl	80011b4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fec:	f7ff f8e2 	bl	80011b4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e11c      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCC_OscConfig+0x5cc>
 800200c:	e01b      	b.n	8002046 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200e:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002014:	4a60      	ldr	r2, [pc, #384]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f8c9 	bl	80011b4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002026:	f7ff f8c5 	bl	80011b4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0ff      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 800203a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ef      	bne.n	8002026 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80f3 	beq.w	8002236 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	2b02      	cmp	r3, #2
 8002056:	f040 80c9 	bne.w	80021ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0203 	and.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	429a      	cmp	r2, r3
 800206c:	d12c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	3b01      	subs	r3, #1
 800207a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d123      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d11b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d113      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d06b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d062      	beq.n	8002194 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0ac      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 80020e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ea:	f7ff f863 	bl	80011b4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f85f 	bl	80011b4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e099      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x77c>)
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002120:	3a01      	subs	r2, #1
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800212a:	0212      	lsls	r2, r2, #8
 800212c:	4311      	orrs	r1, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002132:	0852      	lsrs	r2, r2, #1
 8002134:	3a01      	subs	r2, #1
 8002136:	0552      	lsls	r2, r2, #21
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213e:	0852      	lsrs	r2, r2, #1
 8002140:	3a01      	subs	r2, #1
 8002142:	0652      	lsls	r2, r2, #25
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800214a:	06d2      	lsls	r2, r2, #27
 800214c:	430a      	orrs	r2, r1
 800214e:	4912      	ldr	r1, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216c:	f7ff f822 	bl	80011b4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f81e 	bl	80011b4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e058      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002192:	e050      	b.n	8002236 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04f      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
 8002198:	40021000 	.word	0x40021000
 800219c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d144      	bne.n	8002236 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c4:	f7fe fff6 	bl	80011b4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe fff2 	bl	80011b4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e02c      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x7ac>
 80021ea:	e024      	b.n	8002236 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d01f      	beq.n	8002232 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 80021f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe ffd9 	bl	80011b4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe ffd5 	bl	80011b4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e00f      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4905      	ldr	r1, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x820>)
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x824>)
 800222c:	4013      	ands	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e001      	b.n	8002236 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	feeefffc 	.word	0xfeeefffc

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0e7      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4970      	ldr	r1, [pc, #448]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0cf      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d908      	bls.n	80022ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4960      	ldr	r1, [pc, #384]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04c      	beq.n	8002360 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0a6      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e09a      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230e:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e086      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4943      	ldr	r1, [pc, #268]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe ff40 	bl	80011b4 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7fe ff3c 	bl	80011b4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	429a      	cmp	r2, r3
 800237a:	d208      	bcs.n	800238e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	492b      	ldr	r1, [pc, #172]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d210      	bcs.n	80023be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 0207 	bic.w	r2, r3, #7
 80023a4:	4923      	ldr	r1, [pc, #140]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e036      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4910      	ldr	r1, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fc:	f000 f824 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	490b      	ldr	r1, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1f4>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1f8>)
 800241a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1fc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fd5f 	bl	8000ee4 <HAL_InitTick>
 8002426:	4603      	mov	r3, r0
 8002428:	72fb      	strb	r3, [r7, #11]

  return status;
 800242a:	7afb      	ldrb	r3, [r7, #11]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	0800615c 	.word	0x0800615c
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xa6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fb03 f202 	mul.w	r2, r3, r2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0e5b      	lsrs	r3, r3, #25
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	08006174 	.word	0x08006174
 8002558:	00f42400 	.word	0x00f42400
 800255c:	007a1200 	.word	0x007a1200

08002560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	0800616c 	.word	0x0800616c

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a8:	f7ff ffda 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4904      	ldr	r1, [pc, #16]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	0800616c 	.word	0x0800616c

080025d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	220f      	movs	r2, #15
 80025de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_GetClockConfig+0x5c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCC_GetClockConfig+0x5c>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCC_GetClockConfig+0x5c>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_GetClockConfig+0x5c>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCC_GetClockConfig+0x60>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800264c:	f7ff f958 	bl	8001900 <HAL_PWREx_GetVoltageRange>
 8002650:	6178      	str	r0, [r7, #20]
 8002652:	e014      	b.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	; 0x58
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800266c:	f7ff f948 	bl	8001900 <HAL_PWREx_GetVoltageRange>
 8002670:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002684:	d10b      	bne.n	800269e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d919      	bls.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2ba0      	cmp	r3, #160	; 0xa0
 8002690:	d902      	bls.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e013      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e010      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d902      	bls.n	80026aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a4:	2303      	movs	r3, #3
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e00a      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d102      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b0:	2302      	movs	r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e004      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d101      	bne.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 0207 	bic.w	r2, r3, #7
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002700:	2300      	movs	r3, #0
 8002702:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270c:	2b00      	cmp	r3, #0
 800270e:	d031      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002718:	d01a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800271a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800271e:	d814      	bhi.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002728:	d10f      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a5c      	ldr	r2, [pc, #368]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002736:	e00c      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fa54 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	74fb      	strb	r3, [r7, #19]
      break;
 800274e:	e000      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002758:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	494e      	ldr	r1, [pc, #312]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 809e 	beq.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fcf6 	bl	80011b4 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ca:	e009      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fcf2 	bl	80011b4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d902      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	74fb      	strb	r3, [r7, #19]
        break;
 80027de:	e005      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ef      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d15a      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	429a      	cmp	r2, r3
 800280c:	d019      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283a:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d016      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fcb2 	bl	80011b4 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	e00b      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fcae 	bl	80011b4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d902      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	74fb      	strb	r3, [r7, #19]
            break;
 800286a:	e006      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ec      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288e:	4904      	ldr	r1, [pc, #16]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	7c7b      	ldrb	r3, [r7, #17]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a9d      	ldr	r2, [pc, #628]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ca:	4b98      	ldr	r3, [pc, #608]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 0203 	bic.w	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4994      	ldr	r1, [pc, #592]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ec:	4b8f      	ldr	r3, [pc, #572]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 020c 	bic.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	498c      	ldr	r1, [pc, #560]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290e:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	4983      	ldr	r1, [pc, #524]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002930:	4b7e      	ldr	r3, [pc, #504]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	497b      	ldr	r1, [pc, #492]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4972      	ldr	r1, [pc, #456]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002974:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	496a      	ldr	r1, [pc, #424]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	4961      	ldr	r1, [pc, #388]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b8:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	4959      	ldr	r1, [pc, #356]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	4950      	ldr	r1, [pc, #320]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	493f      	ldr	r1, [pc, #252]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d028      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	4937      	ldr	r1, [pc, #220]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e011      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f8b4 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	491f      	ldr	r1, [pc, #124]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abc:	d106      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac8:	60d3      	str	r3, [r2, #12]
 8002aca:	e011      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f885 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a02      	ldr	r2, [pc, #8]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
 8002b28:	e014      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f853 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01c      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f830 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c06:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d10d      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
       ||
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c1e:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d047      	beq.n	8002cc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e044      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d018      	beq.n	8002c72 <RCCEx_PLLSAI1_Config+0x86>
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d825      	bhi.n	8002c90 <RCCEx_PLLSAI1_Config+0xa4>
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d002      	beq.n	8002c4e <RCCEx_PLLSAI1_Config+0x62>
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d009      	beq.n	8002c60 <RCCEx_PLLSAI1_Config+0x74>
 8002c4c:	e020      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11d      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5e:	e01a      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c60:	4b5a      	ldr	r3, [pc, #360]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e013      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c72:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7e:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c8e:	e006      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e004      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c96:	bf00      	nop
 8002c98:	e002      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	4943      	ldr	r1, [pc, #268]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d17c      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fa6e 	bl	80011b4 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cda:	e009      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cdc:	f7fe fa6a 	bl	80011b4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	73fb      	strb	r3, [r7, #15]
        break;
 8002cee:	e005      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ef      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d15f      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d110      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	0211      	lsls	r1, r2, #8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68d2      	ldr	r2, [r2, #12]
 8002d1e:	06d2      	lsls	r2, r2, #27
 8002d20:	430a      	orrs	r2, r1
 8002d22:	492a      	ldr	r1, [pc, #168]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	610b      	str	r3, [r1, #16]
 8002d28:	e027      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d112      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	0211      	lsls	r1, r2, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6912      	ldr	r2, [r2, #16]
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0552      	lsls	r2, r2, #21
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	491f      	ldr	r1, [pc, #124]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	610b      	str	r3, [r1, #16]
 8002d54:	e011      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	0211      	lsls	r1, r2, #8
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6952      	ldr	r2, [r2, #20]
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0652      	lsls	r2, r2, #25
 8002d72:	430a      	orrs	r2, r1
 8002d74:	4915      	ldr	r1, [pc, #84]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe fa15 	bl	80011b4 <HAL_GetTick>
 8002d8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d8c:	e009      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8e:	f7fe fa11 	bl	80011b4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002da0:	e005      	b.n	8002dae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0ef      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06c      	beq.n	8002ebc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd ffe0 	bl	8000dbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	22ca      	movs	r2, #202	; 0xca
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2253      	movs	r2, #83	; 0x53
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f87c 	bl	8002f12 <RTC_EnterInitMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d14b      	bne.n	8002ebc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e36:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	041a      	lsls	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f87f 	bl	8002f78 <RTC_ExitInitMode>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11b      	bne.n	8002ebc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0203 	bic.w	r2, r2, #3
 8002e92:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002edc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002ede:	f7fe f969 	bl	80011b4 <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ee4:	e009      	b.n	8002efa <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ee6:	f7fe f965 	bl	80011b4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef4:	d901      	bls.n	8002efa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e007      	b.n	8002f0a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ee      	beq.n	8002ee6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d120      	bne.n	8002f6e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f36:	f7fe f93d 	bl	80011b4 <HAL_GetTick>
 8002f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f3c:	e00d      	b.n	8002f5a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f3e:	f7fe f939 	bl	80011b4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f4c:	d905      	bls.n	8002f5a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2203      	movs	r2, #3
 8002f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <RTC_EnterInitMode+0x5c>
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d1e7      	bne.n	8002f3e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f8e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10c      	bne.n	8002fb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff92 	bl	8002ec6 <HAL_RTC_WaitForSynchro>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01e      	beq.n	8002fe6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e017      	b.n	8002fe6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002fbc:	f023 0320 	bic.w	r3, r3, #32
 8002fc0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff7f 	bl	8002ec6 <HAL_RTC_WaitForSynchro>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <RTC_ExitInitMode+0x78>)
 8002fe0:	f043 0320 	orr.w	r3, r3, #32
 8002fe4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40002800 	.word	0x40002800

08002ff4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800300a:	2302      	movs	r3, #2
 800300c:	e07f      	b.n	800310e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ca      	movs	r2, #202	; 0xca
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2253      	movs	r2, #83	; 0x53
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800304e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d120      	bne.n	80030a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800305e:	f7fe f8a9 	bl	80011b4 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003064:	e015      	b.n	8003092 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003066:	f7fe f8a5 	bl	80011b4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003074:	d90d      	bls.n	8003092 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e03d      	b.n	800310e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0e2      	beq.n	8003066 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0107 	bic.w	r1, r3, #7
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80030ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	22ff      	movs	r2, #255	; 0xff
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800312e:	2302      	movs	r3, #2
 8003130:	e04d      	b.n	80031ce <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	22ca      	movs	r2, #202	; 0xca
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2253      	movs	r2, #83	; 0x53
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003170:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003172:	f7fe f81f 	bl	80011b4 <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003178:	e015      	b.n	80031a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800317a:	f7fe f81b 	bl	80011b4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	d90d      	bls.n	80031a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	22ff      	movs	r2, #255	; 0xff
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2203      	movs	r2, #3
 8003196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e013      	b.n	80031ce <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0e2      	beq.n	800317a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80031e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031e6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003206:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fd fd57 	bl	8000cbc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e049      	b.n	80032ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f841 	bl	80032d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f000 f9e4 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e040      	b.n	8003382 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_TIM_Base_Start_IT+0xa8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d009      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_TIM_Base_Start_IT+0xac>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_TIM_Base_Start_IT+0xb0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d115      	bne.n	800336c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_TIM_Base_Start_IT+0xb4>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d015      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x96>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d011      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e008      	b.n	800337e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e000      	b.n	8003380 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40000400 	.word	0x40000400
 8003398:	40014000 	.word	0x40014000
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0202 	mvn.w	r2, #2
 80033cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f905 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8f7 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f908 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0204 	mvn.w	r2, #4
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8db 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8cd 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8de 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0208 	mvn.w	r2, #8
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8b1 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8a3 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8b4 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0210 	mvn.w	r2, #16
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2208      	movs	r2, #8
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f887 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f879 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f88a 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0201 	mvn.w	r2, #1
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fbd8 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8e8 	bl	8003720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d10e      	bne.n	800357e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d107      	bne.n	800357e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8db 	bl	8003734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d10e      	bne.n	80035aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d107      	bne.n	80035aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f838 	bl	800361a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d10e      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d107      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0220 	mvn.w	r2, #32
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f89b 	bl	800370c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x28>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x28>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <TIM_Base_SetConfig+0xd0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d00b      	beq.n	8003692 <TIM_Base_SetConfig+0x62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a20      	ldr	r2, [pc, #128]	; (8003700 <TIM_Base_SetConfig+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_Base_SetConfig+0x62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <TIM_Base_SetConfig+0xd4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_Base_SetConfig+0x62>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <TIM_Base_SetConfig+0xd8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0xb0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <TIM_Base_SetConfig+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <TIM_Base_SetConfig+0xd8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400

0800370c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e040      	b.n	80037dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fb5e 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8c0 	bl	800390c <UART_SetConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb3a 	bl	8003e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fbc1 	bl	8003f5c <UART_CheckIdleState>
 80037da:	4603      	mov	r3, r0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	f040 8082 	bne.w	8003902 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_UART_Transmit+0x26>
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e07a      	b.n	8003904 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_UART_Transmit+0x38>
 8003818:	2302      	movs	r3, #2
 800381a:	e073      	b.n	8003904 <HAL_UART_Transmit+0x120>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003832:	f7fd fcbf 	bl	80011b4 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	d108      	bne.n	8003864 <HAL_UART_Transmit+0x80>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e003      	b.n	800386c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003874:	e02d      	b.n	80038d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fbb4 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e039      	b.n	8003904 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a2:	b292      	uxth	r2, r2
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3302      	adds	r3, #2
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e008      	b.n	80038c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	b292      	uxth	r2, r2
 80038b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1cb      	bne.n	8003876 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2140      	movs	r1, #64	; 0x40
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fb80 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e005      	b.n	8003904 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b08a      	sub	sp, #40	; 0x28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	431a      	orrs	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4313      	orrs	r3, r2
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4ba5      	ldr	r3, [pc, #660]	; (8003bd0 <UART_SetConfig+0x2c4>)
 800393c:	4013      	ands	r3, r2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003944:	430b      	orrs	r3, r1
 8003946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a9a      	ldr	r2, [pc, #616]	; (8003bd4 <UART_SetConfig+0x2c8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	4313      	orrs	r3, r2
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a91      	ldr	r2, [pc, #580]	; (8003bd8 <UART_SetConfig+0x2cc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d126      	bne.n	80039e4 <UART_SetConfig+0xd8>
 8003996:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <UART_SetConfig+0x2d0>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d81b      	bhi.n	80039dc <UART_SetConfig+0xd0>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0xa0>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e0d6      	b.n	8003b72 <UART_SetConfig+0x266>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e0d2      	b.n	8003b72 <UART_SetConfig+0x266>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e0ce      	b.n	8003b72 <UART_SetConfig+0x266>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e0ca      	b.n	8003b72 <UART_SetConfig+0x266>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e0c6      	b.n	8003b72 <UART_SetConfig+0x266>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7d      	ldr	r2, [pc, #500]	; (8003be0 <UART_SetConfig+0x2d4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d138      	bne.n	8003a60 <UART_SetConfig+0x154>
 80039ee:	4b7b      	ldr	r3, [pc, #492]	; (8003bdc <UART_SetConfig+0x2d0>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d82d      	bhi.n	8003a58 <UART_SetConfig+0x14c>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xf8>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a59 	.word	0x08003a59
 8003a0c:	08003a59 	.word	0x08003a59
 8003a10:	08003a59 	.word	0x08003a59
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a59 	.word	0x08003a59
 8003a1c:	08003a59 	.word	0x08003a59
 8003a20:	08003a59 	.word	0x08003a59
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e098      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a40:	2302      	movs	r3, #2
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e094      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e090      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a50:	2308      	movs	r3, #8
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e08c      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e088      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <UART_SetConfig+0x2d8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d125      	bne.n	8003ab6 <UART_SetConfig+0x1aa>
 8003a6a:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <UART_SetConfig+0x2d0>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d016      	beq.n	8003aa6 <UART_SetConfig+0x19a>
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d818      	bhi.n	8003aae <UART_SetConfig+0x1a2>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d00a      	beq.n	8003a96 <UART_SetConfig+0x18a>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d814      	bhi.n	8003aae <UART_SetConfig+0x1a2>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <UART_SetConfig+0x182>
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d008      	beq.n	8003a9e <UART_SetConfig+0x192>
 8003a8c:	e00f      	b.n	8003aae <UART_SetConfig+0x1a2>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a94:	e06d      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a96:	2302      	movs	r3, #2
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9c:	e069      	b.n	8003b72 <UART_SetConfig+0x266>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa4:	e065      	b.n	8003b72 <UART_SetConfig+0x266>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aac:	e061      	b.n	8003b72 <UART_SetConfig+0x266>
 8003aae:	2310      	movs	r3, #16
 8003ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab4:	e05d      	b.n	8003b72 <UART_SetConfig+0x266>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <UART_SetConfig+0x2dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d125      	bne.n	8003b0c <UART_SetConfig+0x200>
 8003ac0:	4b46      	ldr	r3, [pc, #280]	; (8003bdc <UART_SetConfig+0x2d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aca:	2bc0      	cmp	r3, #192	; 0xc0
 8003acc:	d016      	beq.n	8003afc <UART_SetConfig+0x1f0>
 8003ace:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad0:	d818      	bhi.n	8003b04 <UART_SetConfig+0x1f8>
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d00a      	beq.n	8003aec <UART_SetConfig+0x1e0>
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d814      	bhi.n	8003b04 <UART_SetConfig+0x1f8>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <UART_SetConfig+0x1d8>
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d008      	beq.n	8003af4 <UART_SetConfig+0x1e8>
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x1f8>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e042      	b.n	8003b72 <UART_SetConfig+0x266>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e03e      	b.n	8003b72 <UART_SetConfig+0x266>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e03a      	b.n	8003b72 <UART_SetConfig+0x266>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e036      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e032      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <UART_SetConfig+0x2c8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d12a      	bne.n	8003b6c <UART_SetConfig+0x260>
 8003b16:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <UART_SetConfig+0x2d0>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b24:	d01a      	beq.n	8003b5c <UART_SetConfig+0x250>
 8003b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b2a:	d81b      	bhi.n	8003b64 <UART_SetConfig+0x258>
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	d00c      	beq.n	8003b4c <UART_SetConfig+0x240>
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d815      	bhi.n	8003b64 <UART_SetConfig+0x258>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <UART_SetConfig+0x238>
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d008      	beq.n	8003b54 <UART_SetConfig+0x248>
 8003b42:	e00f      	b.n	8003b64 <UART_SetConfig+0x258>
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e012      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e00e      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b54:	2304      	movs	r3, #4
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e00a      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e006      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b64:	2310      	movs	r3, #16
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e002      	b.n	8003b72 <UART_SetConfig+0x266>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <UART_SetConfig+0x2c8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 808b 	bne.w	8003c94 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d834      	bhi.n	8003bf0 <UART_SetConfig+0x2e4>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0x280>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bf1 	.word	0x08003bf1
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003bbf 	.word	0x08003bbf
 8003ba0:	08003bf1 	.word	0x08003bf1
 8003ba4:	08003bf1 	.word	0x08003bf1
 8003ba8:	08003bf1 	.word	0x08003bf1
 8003bac:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f7fe fce2 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	61f8      	str	r0, [r7, #28]
        break;
 8003bb6:	e021      	b.n	8003bfc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <UART_SetConfig+0x2e0>)
 8003bba:	61fb      	str	r3, [r7, #28]
        break;
 8003bbc:	e01e      	b.n	8003bfc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fc43 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61f8      	str	r0, [r7, #28]
        break;
 8003bc4:	e01a      	b.n	8003bfc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	61fb      	str	r3, [r7, #28]
        break;
 8003bcc:	e016      	b.n	8003bfc <UART_SetConfig+0x2f0>
 8003bce:	bf00      	nop
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80fa 	beq.w	8003df8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d305      	bcc.n	8003c20 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c26:	e0e7      	b.n	8003df8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	461c      	mov	r4, r3
 8003c2e:	4615      	mov	r5, r2
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	022b      	lsls	r3, r5, #8
 8003c3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c3e:	0222      	lsls	r2, r4, #8
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	6849      	ldr	r1, [r1, #4]
 8003c44:	0849      	lsrs	r1, r1, #1
 8003c46:	2000      	movs	r0, #0
 8003c48:	4688      	mov	r8, r1
 8003c4a:	4681      	mov	r9, r0
 8003c4c:	eb12 0a08 	adds.w	sl, r2, r8
 8003c50:	eb43 0b09 	adc.w	fp, r3, r9
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	4650      	mov	r0, sl
 8003c64:	4659      	mov	r1, fp
 8003c66:	f7fc fc3b 	bl	80004e0 <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4613      	mov	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c78:	d308      	bcc.n	8003c8c <UART_SetConfig+0x380>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c80:	d204      	bcs.n	8003c8c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	e0b5      	b.n	8003df8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c92:	e0b1      	b.n	8003df8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d15d      	bne.n	8003d5a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d827      	bhi.n	8003cf6 <UART_SetConfig+0x3ea>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x3a0>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fc52 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61f8      	str	r0, [r7, #28]
        break;
 8003cd6:	e014      	b.n	8003d02 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fc64 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61f8      	str	r0, [r7, #28]
        break;
 8003cde:	e010      	b.n	8003d02 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <UART_SetConfig+0x508>)
 8003ce2:	61fb      	str	r3, [r7, #28]
        break;
 8003ce4:	e00d      	b.n	8003d02 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fbaf 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
        break;
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d077      	beq.n	8003df8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d916      	bls.n	8003d52 <UART_SetConfig+0x446>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d212      	bcs.n	8003d52 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	8afa      	ldrh	r2, [r7, #22]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e052      	b.n	8003df8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d58:	e04e      	b.n	8003df8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d827      	bhi.n	8003db2 <UART_SetConfig+0x4a6>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x45c>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003db3 	.word	0x08003db3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	08003db3 	.word	0x08003db3
 8003d88:	08003dab 	.word	0x08003dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe fbf4 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e014      	b.n	8003dbe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe fc06 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003d98:	61f8      	str	r0, [r7, #28]
        break;
 8003d9a:	e010      	b.n	8003dbe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <UART_SetConfig+0x508>)
 8003d9e:	61fb      	str	r3, [r7, #28]
        break;
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da2:	f7fe fb51 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003da6:	61f8      	str	r0, [r7, #28]
        break;
 8003da8:	e009      	b.n	8003dbe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dae:	61fb      	str	r3, [r7, #28]
        break;
 8003db0:	e005      	b.n	8003dbe <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085a      	lsrs	r2, r3, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d909      	bls.n	8003df2 <UART_SetConfig+0x4e6>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d205      	bcs.n	8003df2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e002      	b.n	8003df8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	00f42400 	.word	0x00f42400

08003e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f16:	d10a      	bne.n	8003f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fd f922 	bl	80011b4 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10e      	bne.n	8003f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f82d 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e023      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d10e      	bne.n	8003fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f817 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00d      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b09c      	sub	sp, #112	; 0x70
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffe:	e0a5      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	f000 80a1 	beq.w	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fd f8d3 	bl	80011b4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d13e      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004072:	64ba      	str	r2, [r7, #72]	; 0x48
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e067      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d04f      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d147      	bne.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	61bb      	str	r3, [r7, #24]
   return(result);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	f43f af4a 	beq.w	8004000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3770      	adds	r7, #112	; 0x70
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004186:	2234      	movs	r2, #52	; 0x34
 8004188:	2100      	movs	r1, #0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f001 fb2e 	bl	80057ec <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1a3 0208 	sub.w	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2202      	movs	r2, #2
 80041c4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80041ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	3b04      	subs	r3, #4
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	3b04      	subs	r3, #4
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004202:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	3304      	adds	r3, #4
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <_tx_byte_pool_create+0x11c>)
 8004216:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8004224:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8004226:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004228:	b672      	cpsid	i
#endif
    return(int_posture);
 800422a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800422c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <_tx_byte_pool_create+0x120>)
 8004232:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <_tx_byte_pool_create+0x124>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <_tx_byte_pool_create+0x128>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
 800424e:	e011      	b.n	8004274 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <_tx_byte_pool_create+0x128>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <_tx_byte_pool_create+0x124>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <_tx_byte_pool_create+0x124>)
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3738      	adds	r7, #56	; 0x38
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	ffffeeee 	.word	0xffffeeee
 8004298:	42595445 	.word	0x42595445
 800429c:	20000b2c 	.word	0x20000b2c
 80042a0:	20000b28 	.word	0x20000b28

080042a4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80042a8:	f000 f960 	bl	800456c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80042ac:	f000 fd68 	bl	8004d80 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <_tx_initialize_high_level+0x58>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <_tx_initialize_high_level+0x5c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <_tx_initialize_high_level+0x60>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <_tx_initialize_high_level+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <_tx_initialize_high_level+0x68>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <_tx_initialize_high_level+0x6c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <_tx_initialize_high_level+0x70>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <_tx_initialize_high_level+0x74>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <_tx_initialize_high_level+0x78>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <_tx_initialize_high_level+0x7c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <_tx_initialize_high_level+0x80>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <_tx_initialize_high_level+0x84>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
#endif
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000b00 	.word	0x20000b00
 8004300:	20000b04 	.word	0x20000b04
 8004304:	20000b08 	.word	0x20000b08
 8004308:	20000b0c 	.word	0x20000b0c
 800430c:	20000b10 	.word	0x20000b10
 8004310:	20000b14 	.word	0x20000b14
 8004314:	20000b20 	.word	0x20000b20
 8004318:	20000b24 	.word	0x20000b24
 800431c:	20000b28 	.word	0x20000b28
 8004320:	20000b2c 	.word	0x20000b2c
 8004324:	20000b18 	.word	0x20000b18
 8004328:	20000b1c 	.word	0x20000b1c

0800432c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <_tx_initialize_kernel_enter+0x48>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004338:	d00c      	beq.n	8004354 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <_tx_initialize_kernel_enter+0x48>)
 800433c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004340:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004342:	f7fb ff4d 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8004346:	f7ff ffad 	bl	80042a4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <_tx_initialize_kernel_enter+0x4c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3301      	adds	r3, #1
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <_tx_initialize_kernel_enter+0x4c>)
 8004352:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <_tx_initialize_kernel_enter+0x48>)
 8004356:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800435a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <_tx_initialize_kernel_enter+0x50>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc fa3f 	bl	80007e4 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <_tx_initialize_kernel_enter+0x48>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800436c:	f7fb ff78 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000000c 	.word	0x2000000c
 8004378:	20000bd0 	.word	0x20000bd0
 800437c:	20000b30 	.word	0x20000b30

08004380 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b092      	sub	sp, #72	; 0x48
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800438e:	2300      	movs	r3, #0
 8004390:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004392:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004394:	21ef      	movs	r1, #239	; 0xef
 8004396:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004398:	f001 fa28 	bl	80057ec <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800439c:	22b0      	movs	r2, #176	; 0xb0
 800439e:	2100      	movs	r1, #0
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f001 fa23 	bl	80057ec <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043bc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043c2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043d6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043dc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80043e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80043ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ec:	3b01      	subs	r3, #1
 80043ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f0:	4413      	add	r3, r2
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80043fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d007      	beq.n	8004412 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004410:	e006      	b.n	8004420 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800441c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2203      	movs	r2, #3
 8004424:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a48      	ldr	r2, [pc, #288]	; (800454c <_tx_thread_create+0x1cc>)
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004432:	4947      	ldr	r1, [pc, #284]	; (8004550 <_tx_thread_create+0x1d0>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7fb ff7b 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004444:	b672      	cpsid	i
    return(int_posture);
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004448:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a41      	ldr	r2, [pc, #260]	; (8004554 <_tx_thread_create+0x1d4>)
 800444e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004450:	4b41      	ldr	r3, [pc, #260]	; (8004558 <_tx_thread_create+0x1d8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004458:	4a40      	ldr	r2, [pc, #256]	; (800455c <_tx_thread_create+0x1dc>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800446e:	e016      	b.n	800449e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <_tx_thread_create+0x1dc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800449a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <_tx_thread_create+0x1d8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <_tx_thread_create+0x1d8>)
 80044a6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <_tx_thread_create+0x1e0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <_tx_thread_create+0x1e0>)
 80044b0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80044b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d129      	bne.n	800450c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80044b8:	f3ef 8305 	mrs	r3, IPSR
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <_tx_thread_create+0x1e4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80044ca:	d30d      	bcc.n	80044e8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80044cc:	4b26      	ldr	r3, [pc, #152]	; (8004568 <_tx_thread_create+0x1e8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <_tx_thread_create+0x16c>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80044d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044e6:	e001      	b.n	80044ec <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f383 8810 	msr	PRIMASK, r3
}
 80044f6:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f979 	bl	80047f0 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80044fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01e      	beq.n	8004542 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c
 800450a:	e01a      	b.n	8004542 <_tx_thread_create+0x1c2>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004518:	f3ef 8310 	mrs	r3, PRIMASK
 800451c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800451e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004520:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004522:	b672      	cpsid	i
    return(int_posture);
 8004524:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <_tx_thread_create+0x1e0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <_tx_thread_create+0x1e0>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800453e:	f000 f91d 	bl	800477c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3748      	adds	r7, #72	; 0x48
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	08004cc5 	.word	0x08004cc5
 8004550:	080045e5 	.word	0x080045e5
 8004554:	54485244 	.word	0x54485244
 8004558:	20000b44 	.word	0x20000b44
 800455c:	20000b40 	.word	0x20000b40
 8004560:	20000bd0 	.word	0x20000bd0
 8004564:	2000000c 	.word	0x2000000c
 8004568:	20000b3c 	.word	0x20000b3c

0800456c <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <_tx_thread_initialize+0x50>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <_tx_thread_initialize+0x54>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <_tx_thread_initialize+0x58>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <_tx_thread_initialize+0x5c>)
 8004584:	2220      	movs	r2, #32
 8004586:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	2100      	movs	r1, #0
 800458c:	480f      	ldr	r0, [pc, #60]	; (80045cc <_tx_thread_initialize+0x60>)
 800458e:	f001 f92d 	bl	80057ec <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <_tx_thread_initialize+0x64>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004598:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <_tx_thread_initialize+0x68>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <_tx_thread_initialize+0x6c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <_tx_thread_initialize+0x70>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <_tx_thread_initialize+0x74>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80045b2:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <_tx_thread_initialize+0x74>)
 80045b4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000b38 	.word	0x20000b38
 80045c0:	20000b3c 	.word	0x20000b3c
 80045c4:	20000b48 	.word	0x20000b48
 80045c8:	20000b4c 	.word	0x20000b4c
 80045cc:	20000b50 	.word	0x20000b50
 80045d0:	20000b40 	.word	0x20000b40
 80045d4:	20000b44 	.word	0x20000b44
 80045d8:	20000bd0 	.word	0x20000bd0
 80045dc:	20000bd4 	.word	0x20000bd4
 80045e0:	20000bd8 	.word	0x20000bd8

080045e4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <_tx_thread_shell_entry+0x8c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045f8:	4610      	mov	r0, r2
 80045fa:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <_tx_thread_shell_entry+0x90>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <_tx_thread_shell_entry+0x90>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69f8      	ldr	r0, [r7, #28]
 800460a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800460c:	f3ef 8310 	mrs	r3, PRIMASK
 8004610:	607b      	str	r3, [r7, #4]
    return(posture);
 8004612:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004614:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004616:	b672      	cpsid	i
    return(int_posture);
 8004618:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800461a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2201      	movs	r2, #1
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2201      	movs	r2, #1
 8004626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2200      	movs	r2, #0
 800462c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <_tx_thread_shell_entry+0x94>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <_tx_thread_shell_entry+0x94>)
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f383 8810 	msr	PRIMASK, r3
}
 8004642:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8004644:	f3ef 8314 	mrs	r3, CONTROL
 8004648:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800464a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f383 8814 	msr	CONTROL, r3
}
 8004660:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004662:	69f8      	ldr	r0, [r7, #28]
 8004664:	f000 f9c4 	bl	80049f0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004668:	bf00      	nop
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000b38 	.word	0x20000b38
 8004674:	20000bd4 	.word	0x20000bd4
 8004678:	20000bd0 	.word	0x20000bd0

0800467c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	; 0x38
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800468e:	b672      	cpsid	i
    return(int_posture);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004692:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <_tx_thread_sleep+0xf0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <_tx_thread_sleep+0x36>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80046ac:	2313      	movs	r3, #19
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	e056      	b.n	8004760 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80046b2:	f3ef 8305 	mrs	r3, IPSR
 80046b6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80046b8:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <_tx_thread_sleep+0xf4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <_tx_thread_sleep+0x5a>
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80046d0:	2313      	movs	r3, #19
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
 80046d4:	e044      	b.n	8004760 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	4a26      	ldr	r2, [pc, #152]	; (8004774 <_tx_thread_sleep+0xf8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d108      	bne.n	80046f0 <_tx_thread_sleep+0x74>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80046ea:	2313      	movs	r3, #19
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
 80046ee:	e037      	b.n	8004760 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <_tx_thread_sleep+0x8c>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004702:	2300      	movs	r3, #0
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
 8004706:	e02b      	b.n	8004760 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <_tx_thread_sleep+0xfc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <_tx_thread_sleep+0xa6>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800471c:	2313      	movs	r3, #19
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
 8004720:	e01e      	b.n	8004760 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2204      	movs	r2, #4
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2201      	movs	r2, #1
 800472c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	2200      	movs	r2, #0
 8004732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <_tx_thread_sleep+0xfc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <_tx_thread_sleep+0xfc>)
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f383 8810 	msr	PRIMASK, r3
}
 8004750:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004754:	f000 f94c 	bl	80049f0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004762:	4618      	mov	r0, r3
 8004764:	3738      	adds	r7, #56	; 0x38
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000b38 	.word	0x20000b38
 8004770:	2000000c 	.word	0x2000000c
 8004774:	20000c80 	.word	0x20000c80
 8004778:	20000bd0 	.word	0x20000bd0

0800477c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004782:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <_tx_thread_system_preempt_check+0x64>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d121      	bne.n	80047d2 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <_tx_thread_system_preempt_check+0x68>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <_tx_thread_system_preempt_check+0x6c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d017      	beq.n	80047d2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <_tx_thread_system_preempt_check+0x70>)
 80047a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80047aa:	f3ef 8305 	mrs	r3, IPSR
 80047ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80047b0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047b6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ba:	60fb      	str	r3, [r7, #12]
    return(posture);
 80047bc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80047be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80047c0:	b662      	cpsie	i
}
 80047c2:	bf00      	nop
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80047d0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80047d2:	bf00      	nop
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000bd0 	.word	0x20000bd0
 80047e4:	20000b38 	.word	0x20000b38
 80047e8:	20000b3c 	.word	0x20000b3c
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b096      	sub	sp, #88	; 0x58
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047f8:	f3ef 8310 	mrs	r3, PRIMASK
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004802:	b672      	cpsid	i
    return(int_posture);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004806:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	334c      	adds	r3, #76	; 0x4c
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb91 	bl	8004f3c <_tx_timer_system_deactivate>
 800481a:	e002      	b.n	8004822 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004822:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <_tx_thread_system_resume+0x1e4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	4a6a      	ldr	r2, [pc, #424]	; (80049d4 <_tx_thread_system_resume+0x1e4>)
 800482a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 8083 	bne.w	800493c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8097 	beq.w	800496e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	2b00      	cmp	r3, #0
 8004846:	d172      	bne.n	800492e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8004854:	4a60      	ldr	r2, [pc, #384]	; (80049d8 <_tx_thread_system_resume+0x1e8>)
 8004856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800485e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d154      	bne.n	800490e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004864:	495c      	ldr	r1, [pc, #368]	; (80049d8 <_tx_thread_system_resume+0x1e8>)
 8004866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800487a:	2201      	movs	r2, #1
 800487c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004884:	4b55      	ldr	r3, [pc, #340]	; (80049dc <_tx_thread_system_resume+0x1ec>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488a:	4313      	orrs	r3, r2
 800488c:	4a53      	ldr	r2, [pc, #332]	; (80049dc <_tx_thread_system_resume+0x1ec>)
 800488e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <_tx_thread_system_resume+0x1f0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004896:	429a      	cmp	r2, r3
 8004898:	d269      	bcs.n	800496e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800489a:	4a51      	ldr	r2, [pc, #324]	; (80049e0 <_tx_thread_system_resume+0x1f0>)
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80048a0:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <_tx_thread_system_resume+0x1f4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80048a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80048ac:	4a4d      	ldr	r2, [pc, #308]	; (80049e4 <_tx_thread_system_resume+0x1f4>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e05c      	b.n	800496e <_tx_thread_system_resume+0x17e>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d257      	bcs.n	800496e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80048be:	4a49      	ldr	r2, [pc, #292]	; (80049e4 <_tx_thread_system_resume+0x1f4>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	f383 8810 	msr	PRIMASK, r3
}
 80048ce:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <_tx_thread_system_resume+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d174      	bne.n	80049c6 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <_tx_thread_system_resume+0x1f8>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80048f0:	f3ef 8310 	mrs	r3, PRIMASK
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80048f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80048fa:	b662      	cpsie	i
}
 80048fc:	bf00      	nop
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f383 8810 	msr	PRIMASK, r3
}
 8004908:	bf00      	nop
}
 800490a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800490c:	e05b      	b.n	80049c6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	e01f      	b.n	800496e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2203      	movs	r2, #3
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
 800493a:	e018      	b.n	800496e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	2b01      	cmp	r3, #1
 8004942:	d014      	beq.n	800496e <_tx_thread_system_resume+0x17e>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	2b02      	cmp	r3, #2
 800494a:	d010      	beq.n	800496e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
 8004960:	e005      	b.n	800496e <_tx_thread_system_resume+0x17e>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2203      	movs	r2, #3
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <_tx_thread_system_resume+0x1fc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63bb      	str	r3, [r7, #56]	; 0x38
 8004974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004976:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f383 8810 	msr	PRIMASK, r3
}
 800497e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <_tx_thread_system_resume+0x1f4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004986:	429a      	cmp	r2, r3
 8004988:	d020      	beq.n	80049cc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <_tx_thread_system_resume+0x1e4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11a      	bne.n	80049cc <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <_tx_thread_system_resume+0x1f8>)
 8004998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800499e:	f3ef 8305 	mrs	r3, IPSR
 80049a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80049a4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	613b      	str	r3, [r7, #16]
    return(posture);
 80049b0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80049b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80049b4:	b662      	cpsie	i
}
 80049b6:	bf00      	nop
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	bf00      	nop
}
 80049c4:	e001      	b.n	80049ca <_tx_thread_system_resume+0x1da>
                                return;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <_tx_thread_system_resume+0x1dc>
 80049ca:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80049cc:	3758      	adds	r7, #88	; 0x58
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000bd0 	.word	0x20000bd0
 80049d8:	20000b50 	.word	0x20000b50
 80049dc:	20000b48 	.word	0x20000b48
 80049e0:	20000b4c 	.word	0x20000b4c
 80049e4:	20000b3c 	.word	0x20000b3c
 80049e8:	e000ed04 	.word	0xe000ed04
 80049ec:	20000b38 	.word	0x20000b38

080049f0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b09e      	sub	sp, #120	; 0x78
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80049f8:	4b81      	ldr	r3, [pc, #516]	; (8004c00 <_tx_thread_system_suspend+0x210>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a08:	b672      	cpsid	i
    return(int_posture);
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004a0c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d112      	bne.n	8004a3c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d004      	beq.n	8004a34 <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	334c      	adds	r3, #76	; 0x4c
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fa22 	bl	8004e78 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <_tx_thread_system_suspend+0x214>)
 8004a3a:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004a3c:	4b72      	ldr	r3, [pc, #456]	; (8004c08 <_tx_thread_system_suspend+0x218>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	4a71      	ldr	r2, [pc, #452]	; (8004c08 <_tx_thread_system_suspend+0x218>)
 8004a44:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	f040 80a6 	bne.w	8004b9c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004a62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d015      	beq.n	8004a96 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a7a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004a7c:	4a63      	ldr	r2, [pc, #396]	; (8004c0c <_tx_thread_system_suspend+0x21c>)
 8004a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d157      	bne.n	8004b3a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004a8a:	4960      	ldr	r1, [pc, #384]	; (8004c0c <_tx_thread_system_suspend+0x21c>)
 8004a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a94:	e051      	b.n	8004b3a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004a96:	4a5d      	ldr	r2, [pc, #372]	; (8004c0c <_tx_thread_system_suspend+0x21c>)
 8004a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004aaa:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <_tx_thread_system_suspend+0x220>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <_tx_thread_system_suspend+0x220>)
 8004ab6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004abc:	4b54      	ldr	r3, [pc, #336]	; (8004c10 <_tx_thread_system_suspend+0x220>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12b      	bne.n	8004b20 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004ac8:	4b52      	ldr	r3, [pc, #328]	; (8004c14 <_tx_thread_system_suspend+0x224>)
 8004aca:	2220      	movs	r2, #32
 8004acc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <_tx_thread_system_suspend+0x228>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ae0:	4b49      	ldr	r3, [pc, #292]	; (8004c08 <_tx_thread_system_suspend+0x218>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f040 8081 	bne.w	8004bf0 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004aee:	4b4b      	ldr	r3, [pc, #300]	; (8004c1c <_tx_thread_system_suspend+0x22c>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004af6:	f3ef 8305 	mrs	r3, IPSR
 8004afa:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10c      	bne.n	8004b1c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b02:	f3ef 8310 	mrs	r3, PRIMASK
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004b0c:	b662      	cpsie	i
}
 8004b0e:	bf00      	nop
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	bf00      	nop
}
 8004b1c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004b1e:	e067      	b.n	8004bf0 <_tx_thread_system_suspend+0x200>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b34:	4413      	add	r3, r2
 8004b36:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <_tx_thread_system_suspend+0x224>)
 8004b38:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <_tx_thread_system_suspend+0x228>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d12b      	bne.n	8004b9c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004b44:	4b33      	ldr	r3, [pc, #204]	; (8004c14 <_tx_thread_system_suspend+0x224>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a30      	ldr	r2, [pc, #192]	; (8004c0c <_tx_thread_system_suspend+0x21c>)
 8004b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <_tx_thread_system_suspend+0x228>)
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <_tx_thread_system_suspend+0x218>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d144      	bne.n	8004bf4 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <_tx_thread_system_suspend+0x22c>)
 8004b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004b72:	f3ef 8305 	mrs	r3, IPSR
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004b88:	b662      	cpsie	i
}
 8004b8a:	bf00      	nop
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	bf00      	nop
}
 8004b98:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004b9a:	e02b      	b.n	8004bf4 <_tx_thread_system_suspend+0x204>
 8004b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <_tx_thread_system_suspend+0x228>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d022      	beq.n	8004bf8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <_tx_thread_system_suspend+0x218>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11c      	bne.n	8004bf8 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004bbe:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <_tx_thread_system_suspend+0x22c>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004bc6:	f3ef 8305 	mrs	r3, IPSR
 8004bca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10c      	bne.n	8004bec <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd6:	617b      	str	r3, [r7, #20]
    return(posture);
 8004bd8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004bda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004bdc:	b662      	cpsie	i
}
 8004bde:	bf00      	nop
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	bf00      	nop
}
 8004bec:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004bee:	e003      	b.n	8004bf8 <_tx_thread_system_suspend+0x208>
                return;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <_tx_thread_system_suspend+0x20a>
            return;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <_tx_thread_system_suspend+0x20a>
    return;
 8004bf8:	bf00      	nop
}
 8004bfa:	3778      	adds	r7, #120	; 0x78
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000b38 	.word	0x20000b38
 8004c04:	2000113c 	.word	0x2000113c
 8004c08:	20000bd0 	.word	0x20000bd0
 8004c0c:	20000b50 	.word	0x20000b50
 8004c10:	20000b48 	.word	0x20000b48
 8004c14:	20000b4c 	.word	0x20000b4c
 8004c18:	20000b3c 	.word	0x20000b3c
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004c26:	4b21      	ldr	r3, [pc, #132]	; (8004cac <_tx_thread_time_slice+0x8c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c30:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004c32:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8004c34:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c36:	b672      	cpsid	i
    return(int_posture);
 8004c38:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004c3a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <_tx_thread_time_slice+0x90>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d024      	beq.n	8004c92 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d120      	bne.n	8004c92 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <_tx_thread_time_slice+0x94>)
 8004c5e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d013      	beq.n	8004c92 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d10d      	bne.n	8004c92 <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6a12      	ldr	r2, [r2, #32]
 8004c7e:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <_tx_thread_time_slice+0x98>)
 8004c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <_tx_thread_time_slice+0x9c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <_tx_thread_time_slice+0x98>)
 8004c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <_tx_thread_time_slice+0xa0>)
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000b38 	.word	0x20000b38
 8004cb0:	20000be0 	.word	0x20000be0
 8004cb4:	2000113c 	.word	0x2000113c
 8004cb8:	20000b50 	.word	0x20000b50
 8004cbc:	20000b4c 	.word	0x20000b4c
 8004cc0:	20000b3c 	.word	0x20000b3c

08004cc4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	617b      	str	r3, [r7, #20]
    return(posture);
 8004cd6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004cd8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004cda:	b672      	cpsid	i
    return(int_posture);
 8004cdc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8004cde:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d10e      	bne.n	8004d06 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <_tx_thread_timeout+0x74>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <_tx_thread_timeout+0x74>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d00:	f7ff fd76 	bl	80047f0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004d04:	e013      	b.n	8004d2e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	69b9      	ldr	r1, [r7, #24]
 8004d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2c:	4798      	blx	r3
}
 8004d2e:	bf00      	nop
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000bd0 	.word	0x20000bd0

08004d3c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d42:	f3ef 8310 	mrs	r3, PRIMASK
 8004d46:	607b      	str	r3, [r7, #4]
    return(posture);
 8004d48:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004d4a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d4c:	b672      	cpsid	i
    return(int_posture);
 8004d4e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004d50:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <_tx_timer_expiration_process+0x3c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <_tx_timer_expiration_process+0x3c>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f383 8810 	msr	PRIMASK, r3
}
 8004d66:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004d68:	4804      	ldr	r0, [pc, #16]	; (8004d7c <_tx_timer_expiration_process+0x40>)
 8004d6a:	f7ff fd41 	bl	80047f0 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000bd0 	.word	0x20000bd0
 8004d7c:	20000c80 	.word	0x20000c80

08004d80 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b089      	sub	sp, #36	; 0x24
 8004d84:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <_tx_timer_initialize+0xa8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <_tx_timer_initialize+0xac>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <_tx_timer_initialize+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004d98:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <_tx_timer_initialize+0xb4>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_tx_timer_initialize+0xb8>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	2100      	movs	r1, #0
 8004da8:	4824      	ldr	r0, [pc, #144]	; (8004e3c <_tx_timer_initialize+0xbc>)
 8004daa:	f000 fd1f 	bl	80057ec <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <_tx_timer_initialize+0xc0>)
 8004db0:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <_tx_timer_initialize+0xbc>)
 8004db2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004db4:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <_tx_timer_initialize+0xc4>)
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <_tx_timer_initialize+0xbc>)
 8004db8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004dba:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <_tx_timer_initialize+0xc8>)
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <_tx_timer_initialize+0xcc>)
 8004dbe:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004dc0:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <_tx_timer_initialize+0xc8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <_tx_timer_initialize+0xc8>)
 8004dc8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <_tx_timer_initialize+0xd0>)
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <_tx_timer_initialize+0xd4>)
 8004dce:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <_tx_timer_initialize+0xd8>)
 8004dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <_tx_timer_initialize+0xdc>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <_tx_timer_initialize+0xd0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <_tx_timer_initialize+0xd8>)
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	491d      	ldr	r1, [pc, #116]	; (8004e5c <_tx_timer_initialize+0xdc>)
 8004de8:	6809      	ldr	r1, [r1, #0]
 8004dea:	481c      	ldr	r0, [pc, #112]	; (8004e5c <_tx_timer_initialize+0xdc>)
 8004dec:	6800      	ldr	r0, [r0, #0]
 8004dee:	2400      	movs	r4, #0
 8004df0:	9405      	str	r4, [sp, #20]
 8004df2:	2400      	movs	r4, #0
 8004df4:	9404      	str	r4, [sp, #16]
 8004df6:	9003      	str	r0, [sp, #12]
 8004df8:	9102      	str	r1, [sp, #8]
 8004dfa:	9201      	str	r2, [sp, #4]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <_tx_timer_initialize+0xe0>)
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <_tx_timer_initialize+0xe4>)
 8004e02:	4919      	ldr	r1, [pc, #100]	; (8004e68 <_tx_timer_initialize+0xe8>)
 8004e04:	4819      	ldr	r0, [pc, #100]	; (8004e6c <_tx_timer_initialize+0xec>)
 8004e06:	f7ff fabb 	bl	8004380 <_tx_thread_create>
 8004e0a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004e12:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <_tx_timer_initialize+0xf0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <_tx_timer_initialize+0xf4>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000bdc 	.word	0x20000bdc
 8004e2c:	2000113c 	.word	0x2000113c
 8004e30:	20000be0 	.word	0x20000be0
 8004e34:	20000c70 	.word	0x20000c70
 8004e38:	20000c7c 	.word	0x20000c7c
 8004e3c:	20000be4 	.word	0x20000be4
 8004e40:	20000c64 	.word	0x20000c64
 8004e44:	20000c6c 	.word	0x20000c6c
 8004e48:	20000c68 	.word	0x20000c68
 8004e4c:	20000c60 	.word	0x20000c60
 8004e50:	20000d30 	.word	0x20000d30
 8004e54:	20000d3c 	.word	0x20000d3c
 8004e58:	20000d34 	.word	0x20000d34
 8004e5c:	20000d38 	.word	0x20000d38
 8004e60:	4154494d 	.word	0x4154494d
 8004e64:	08004fad 	.word	0x08004fad
 8004e68:	08006148 	.word	0x08006148
 8004e6c:	20000c80 	.word	0x20000c80
 8004e70:	20000c74 	.word	0x20000c74
 8004e74:	20000c78 	.word	0x20000c78

08004e78 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d04a      	beq.n	8004f22 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d046      	beq.n	8004f22 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d142      	bne.n	8004f22 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d902      	bls.n	8004ea8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8004ea2:	231f      	movs	r3, #31
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e002      	b.n	8004eae <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <_tx_timer_system_activate+0xb8>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <_tx_timer_system_activate+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d30b      	bcc.n	8004edc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <_tx_timer_system_activate+0xbc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	109b      	asrs	r3, r3, #2
 8004ece:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <_tx_timer_system_activate+0xc0>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e011      	b.n	8004f1c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8004f22:	bf00      	nop
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000c6c 	.word	0x20000c6c
 8004f34:	20000c68 	.word	0x20000c68
 8004f38:	20000c64 	.word	0x20000c64

08004f3c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d026      	beq.n	8004f9e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d108      	bne.n	8004f70 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d117      	bne.n	8004f98 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e013      	b.n	8004f98 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d105      	bne.n	8004f98 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	619a      	str	r2, [r3, #24]
    }
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b098      	sub	sp, #96	; 0x60
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a73      	ldr	r2, [pc, #460]	; (8005188 <_tx_timer_thread_entry+0x1dc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f040 80de 	bne.w	800517e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004fcc:	b672      	cpsid	i
    return(int_posture);
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8004fd0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8004fd2:	4b6e      	ldr	r3, [pc, #440]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f107 020c 	add.w	r2, r7, #12
 8004fe6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8004ff0:	4b66      	ldr	r3, [pc, #408]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4a65      	ldr	r2, [pc, #404]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 8004ff8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8004ffa:	4b64      	ldr	r3, [pc, #400]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b64      	ldr	r3, [pc, #400]	; (8005190 <_tx_timer_thread_entry+0x1e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d103      	bne.n	800500e <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005006:	4b63      	ldr	r3, [pc, #396]	; (8005194 <_tx_timer_thread_entry+0x1e8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a60      	ldr	r2, [pc, #384]	; (800518c <_tx_timer_thread_entry+0x1e0>)
 800500c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800500e:	4b62      	ldr	r3, [pc, #392]	; (8005198 <_tx_timer_thread_entry+0x1ec>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800502a:	b672      	cpsid	i
    return(int_posture);
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800502e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005030:	e07f      	b.n	8005132 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005044:	429a      	cmp	r2, r3
 8005046:	d102      	bne.n	800504e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e00e      	b.n	800506c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005058:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800505e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005062:	f107 020c 	add.w	r2, r7, #12
 8005066:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b20      	cmp	r3, #32
 8005072:	d911      	bls.n	8005098 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800507c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507e:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	f107 0208 	add.w	r2, r7, #8
 800508a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005090:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	e01a      	b.n	80050ce <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80050a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80050ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	f107 0208 	add.w	r2, r7, #8
 80050ba:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c0:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	e002      	b.n	80050ce <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80050ce:	4a33      	ldr	r2, [pc, #204]	; (800519c <_tx_timer_thread_entry+0x1f0>)
 80050d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	f383 8810 	msr	PRIMASK, r3
}
 80050de:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80050e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80050e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050ea:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050ec:	f3ef 8310 	mrs	r3, PRIMASK
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80050f6:	b672      	cpsid	i
    return(int_posture);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80050fa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80050fc:	4b27      	ldr	r3, [pc, #156]	; (800519c <_tx_timer_thread_entry+0x1f0>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005106:	429a      	cmp	r2, r3
 8005108:	d105      	bne.n	8005116 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	2200      	movs	r2, #0
 800510e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005110:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005112:	f7ff feb1 	bl	8004e78 <_tx_timer_system_activate>
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f383 8810 	msr	PRIMASK, r3
}
 8005120:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005122:	f3ef 8310 	mrs	r3, PRIMASK
 8005126:	623b      	str	r3, [r7, #32]
    return(posture);
 8005128:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800512a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800512c:	b672      	cpsid	i
    return(int_posture);
 800512e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005130:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f47f af7c 	bne.w	8005032 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800513a:	4b17      	ldr	r3, [pc, #92]	; (8005198 <_tx_timer_thread_entry+0x1ec>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d116      	bne.n	8005170 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <_tx_timer_thread_entry+0x1f4>)
 8005144:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005148:	2203      	movs	r2, #3
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800514c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514e:	2201      	movs	r2, #1
 8005150:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <_tx_timer_thread_entry+0x1f8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <_tx_timer_thread_entry+0x1f8>)
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005168:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800516a:	f7ff fc41 	bl	80049f0 <_tx_thread_system_suspend>
 800516e:	e728      	b.n	8004fc2 <_tx_timer_thread_entry+0x16>
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	bf00      	nop
            TX_DISABLE
 800517c:	e721      	b.n	8004fc2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800517e:	bf00      	nop
 8005180:	3760      	adds	r7, #96	; 0x60
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	4154494d 	.word	0x4154494d
 800518c:	20000c6c 	.word	0x20000c6c
 8005190:	20000c68 	.word	0x20000c68
 8005194:	20000c64 	.word	0x20000c64
 8005198:	20000c70 	.word	0x20000c70
 800519c:	20000c7c 	.word	0x20000c7c
 80051a0:	20000c80 	.word	0x20000c80
 80051a4:	20000bd0 	.word	0x20000bd0

080051a8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b092      	sub	sp, #72	; 0x48
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80051b6:	2300      	movs	r3, #0
 80051b8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80051c0:	2302      	movs	r3, #2
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	e075      	b.n	80052b2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80051c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c8:	2b34      	cmp	r3, #52	; 0x34
 80051ca:	d002      	beq.n	80051d2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80051cc:	2302      	movs	r3, #2
 80051ce:	647b      	str	r3, [r7, #68]	; 0x44
 80051d0:	e06f      	b.n	80052b2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80051dc:	b672      	cpsid	i
    return(int_posture);
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 80051e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <_txe_byte_pool_create+0x128>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	4a39      	ldr	r2, [pc, #228]	; (80052d0 <_txe_byte_pool_create+0x128>)
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f383 8810 	msr	PRIMASK, r3
}
 80051f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <_txe_byte_pool_create+0x12c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	643b      	str	r3, [r7, #64]	; 0x40
 8005202:	e009      	b.n	8005218 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005208:	429a      	cmp	r2, r3
 800520a:	d00b      	beq.n	8005224 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	3301      	adds	r3, #1
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
 8005218:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <_txe_byte_pool_create+0x130>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800521e:	429a      	cmp	r2, r3
 8005220:	d3f0      	bcc.n	8005204 <_txe_byte_pool_create+0x5c>
 8005222:	e000      	b.n	8005226 <_txe_byte_pool_create+0x7e>
                break;
 8005224:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005226:	f3ef 8310 	mrs	r3, PRIMASK
 800522a:	623b      	str	r3, [r7, #32]
    return(posture);
 800522c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800522e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005230:	b672      	cpsid	i
    return(int_posture);
 8005232:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005236:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <_txe_byte_pool_create+0x128>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3b01      	subs	r3, #1
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <_txe_byte_pool_create+0x128>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800524c:	f7ff fa96 	bl	800477c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005254:	429a      	cmp	r2, r3
 8005256:	d102      	bne.n	800525e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005258:	2302      	movs	r3, #2
 800525a:	647b      	str	r3, [r7, #68]	; 0x44
 800525c:	e029      	b.n	80052b2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005264:	2303      	movs	r3, #3
 8005266:	647b      	str	r3, [r7, #68]	; 0x44
 8005268:	e023      	b.n	80052b2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b63      	cmp	r3, #99	; 0x63
 800526e:	d802      	bhi.n	8005276 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005270:	2305      	movs	r3, #5
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	e01d      	b.n	80052b2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <_txe_byte_pool_create+0x134>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <_txe_byte_pool_create+0x138>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005284:	2313      	movs	r3, #19
 8005286:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005288:	f3ef 8305 	mrs	r3, IPSR
 800528c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800528e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005290:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <_txe_byte_pool_create+0x13c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4313      	orrs	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800529a:	f3ef 8305 	mrs	r3, IPSR
 800529e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80052a0:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <_txe_byte_pool_create+0x13c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80052ac:	d201      	bcs.n	80052b2 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80052ae:	2313      	movs	r3, #19
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7fe ff5a 	bl	8004178 <_tx_byte_pool_create>
 80052c4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3748      	adds	r7, #72	; 0x48
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000bd0 	.word	0x20000bd0
 80052d4:	20000b28 	.word	0x20000b28
 80052d8:	20000b2c 	.word	0x20000b2c
 80052dc:	20000b38 	.word	0x20000b38
 80052e0:	20000c80 	.word	0x20000c80
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b09a      	sub	sp, #104	; 0x68
 80052ec:	af06      	add	r7, sp, #24
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80052f6:	2300      	movs	r3, #0
 80052f8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d102      	bne.n	8005306 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005300:	230e      	movs	r3, #14
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	e0bb      	b.n	800547e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8005306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005308:	2bb0      	cmp	r3, #176	; 0xb0
 800530a:	d002      	beq.n	8005312 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800530c:	230e      	movs	r3, #14
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005310:	e0b5      	b.n	800547e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005312:	f3ef 8310 	mrs	r3, PRIMASK
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800531c:	b672      	cpsid	i
    return(int_posture);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005322:	4b64      	ldr	r3, [pc, #400]	; (80054b4 <_txe_thread_create+0x1cc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a62      	ldr	r2, [pc, #392]	; (80054b4 <_txe_thread_create+0x1cc>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8005338:	2300      	movs	r3, #0
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800533c:	4b5e      	ldr	r3, [pc, #376]	; (80054b8 <_txe_thread_create+0x1d0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8005346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005348:	3b01      	subs	r3, #1
 800534a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800534c:	4413      	add	r3, r2
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005354:	2300      	movs	r3, #0
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
 8005358:	e02b      	b.n	80053b2 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	429a      	cmp	r2, r3
 8005360:	d101      	bne.n	8005366 <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005368:	2b01      	cmp	r3, #1
 800536a:	d028      	beq.n	80053be <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800536c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005372:	429a      	cmp	r2, r3
 8005374:	d308      	bcc.n	8005388 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800537c:	429a      	cmp	r2, r3
 800537e:	d203      	bcs.n	8005388 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800538e:	429a      	cmp	r2, r3
 8005390:	d308      	bcc.n	80053a4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005398:	429a      	cmp	r2, r3
 800539a:	d203      	bcs.n	80053a4 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	3301      	adds	r3, #1
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	4b42      	ldr	r3, [pc, #264]	; (80054bc <_txe_thread_create+0x1d4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d3ce      	bcc.n	800535a <_txe_thread_create+0x72>
 80053bc:	e000      	b.n	80053c0 <_txe_thread_create+0xd8>
                break;
 80053be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80053c6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80053c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80053ca:	b672      	cpsid	i
    return(int_posture);
 80053cc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <_txe_thread_create+0x1cc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	4a37      	ldr	r2, [pc, #220]	; (80054b4 <_txe_thread_create+0x1cc>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f383 8810 	msr	PRIMASK, r3
}
 80053e4:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80053e6:	f7ff f9c9 	bl	800477c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d102      	bne.n	80053f8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80053f2:	230e      	movs	r3, #14
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f6:	e042      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80053fe:	2303      	movs	r3, #3
 8005400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005402:	e03c      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800540a:	2303      	movs	r3, #3
 800540c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540e:	e036      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005412:	2bc7      	cmp	r3, #199	; 0xc7
 8005414:	d802      	bhi.n	800541c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8005416:	2305      	movs	r3, #5
 8005418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541a:	e030      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800541c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541e:	2b1f      	cmp	r3, #31
 8005420:	d902      	bls.n	8005428 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8005422:	230f      	movs	r3, #15
 8005424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005426:	e02a      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8005428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800542a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800542c:	429a      	cmp	r2, r3
 800542e:	d902      	bls.n	8005436 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8005430:	2318      	movs	r3, #24
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005434:	e023      	b.n	800547e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d902      	bls.n	8005442 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800543c:	2310      	movs	r3, #16
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	e01d      	b.n	800547e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <_txe_thread_create+0x1d8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <_txe_thread_create+0x1dc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005450:	2313      	movs	r3, #19
 8005452:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005454:	f3ef 8305 	mrs	r3, IPSR
 8005458:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800545a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <_txe_thread_create+0x1e0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005466:	f3ef 8305 	mrs	r3, IPSR
 800546a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800546c:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <_txe_thread_create+0x1e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005478:	d201      	bcs.n	800547e <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800547a:	2313      	movs	r3, #19
 800547c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d112      	bne.n	80054aa <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8005484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005492:	9302      	str	r3, [sp, #8]
 8005494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7fe ff6c 	bl	8004380 <_tx_thread_create>
 80054a8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3750      	adds	r7, #80	; 0x50
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000bd0 	.word	0x20000bd0
 80054b8:	20000b40 	.word	0x20000b40
 80054bc:	20000b44 	.word	0x20000b44
 80054c0:	20000b38 	.word	0x20000b38
 80054c4:	20000c80 	.word	0x20000c80
 80054c8:	2000000c 	.word	0x2000000c

080054cc <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054d2:	f3ef 8310 	mrs	r3, PRIMASK
 80054d6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80054d8:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80054da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80054dc:	b672      	cpsid	i
    return(int_posture);
 80054de:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 80054e0:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 80054e2:	463b      	mov	r3, r7
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f83d 	bl	8005564 <tx_timer_get_next>
 80054ea:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d103      	bne.n	800550a <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb f9bf 	bl	8000888 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <tx_low_power_enter+0x5c>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f383 8810 	msr	PRIMASK, r3
}
 800551a:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800551c:	f7fb f9da 	bl	80008d4 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 8005520:	bf00      	nop
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20001140 	.word	0x20001140

0800552c <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <tx_low_power_exit+0x34>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <tx_low_power_exit+0x34>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 8005540:	f7fb f9cf 	bl	80008e2 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 8005544:	f7fb f9d6 	bl	80008f4 <App_ThreadX_LowPower_Timer_Adjust>
 8005548:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f86f 	bl	8005634 <tx_time_increment>
        }
    }
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20001140 	.word	0x20001140

08005564 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 8005564:	b480      	push	{r7}
 8005566:	b08d      	sub	sp, #52	; 0x34
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	617b      	str	r3, [r7, #20]
    return(posture);
 8005578:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800557a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800557c:	b672      	cpsid	i
    return(int_posture);
 800557e:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 8005580:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 8005582:	4b29      	ldr	r3, [pc, #164]	; (8005628 <tx_timer_get_next+0xc4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	e02f      	b.n	80055ee <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01d      	beq.n	80055d2 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d906      	bls.n	80055b2 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	4413      	add	r3, r2
 80055ac:	3b20      	subs	r3, #32
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	e001      	b.n	80055b6 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d901      	bls.n	80055c2 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d1e4      	bne.n	800559c <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	3304      	adds	r3, #4
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <tx_timer_get_next+0xc8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <tx_timer_get_next+0xcc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	3301      	adds	r3, #1
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	2b1f      	cmp	r3, #31
 80055f2:	d9cc      	bls.n	800558e <tx_timer_get_next+0x2a>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d004      	beq.n	8005612 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800560e:	2301      	movs	r3, #1
 8005610:	e003      	b.n	800561a <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 8005618:	2300      	movs	r3, #0
    }
}
 800561a:	4618      	mov	r0, r3
 800561c:	3734      	adds	r7, #52	; 0x34
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000c6c 	.word	0x20000c6c
 800562c:	20000c68 	.word	0x20000c68
 8005630:	20000c64 	.word	0x20000c64

08005634 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 809b 	beq.w	800577a <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005644:	f3ef 8310 	mrs	r3, PRIMASK
 8005648:	613b      	str	r3, [r7, #16]
    return(posture);
 800564a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800564c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800564e:	b672      	cpsid	i
    return(int_posture);
 8005650:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8005652:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8005654:	4b4b      	ldr	r3, [pc, #300]	; (8005784 <tx_time_increment+0x150>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4413      	add	r3, r2
 800565c:	4a49      	ldr	r2, [pc, #292]	; (8005784 <tx_time_increment+0x150>)
 800565e:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8005660:	4b49      	ldr	r3, [pc, #292]	; (8005788 <tx_time_increment+0x154>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00e      	beq.n	8005686 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8005668:	4b47      	ldr	r3, [pc, #284]	; (8005788 <tx_time_increment+0x154>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d206      	bcs.n	8005680 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8005672:	4b45      	ldr	r3, [pc, #276]	; (8005788 <tx_time_increment+0x154>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	4a43      	ldr	r2, [pc, #268]	; (8005788 <tx_time_increment+0x154>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e002      	b.n	8005686 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8005680:	4b41      	ldr	r3, [pc, #260]	; (8005788 <tx_time_increment+0x154>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <tx_time_increment+0x158>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	e046      	b.n	8005724 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d034      	beq.n	8005708 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d908      	bls.n	80056be <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	4413      	add	r3, r2
 80056b4:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e003      	b.n	80056c6 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d1e6      	bne.n	80056a4 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e009      	b.n	8005702 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	3304      	adds	r3, #4
 800570c:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <tx_time_increment+0x15c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <tx_time_increment+0x160>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	3301      	adds	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	2b1f      	cmp	r3, #31
 8005728:	d9b5      	bls.n	8005696 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <tx_time_increment+0x160>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <tx_time_increment+0x158>)
 8005730:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8005732:	e019      	b.n	8005768 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d206      	bcs.n	8005756 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e002      	b.n	800575c <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2200      	movs	r2, #0
 8005760:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8005762:	69f8      	ldr	r0, [r7, #28]
 8005764:	f7ff fb88 	bl	8004e78 <_tx_timer_system_activate>
    while (temp_list_head)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e2      	bne.n	8005734 <tx_time_increment+0x100>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f383 8810 	msr	PRIMASK, r3
}
 8005778:	e000      	b.n	800577c <tx_time_increment+0x148>
        return;
 800577a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000bdc 	.word	0x20000bdc
 8005788:	2000113c 	.word	0x2000113c
 800578c:	20000c6c 	.word	0x20000c6c
 8005790:	20000c68 	.word	0x20000c68
 8005794:	20000c64 	.word	0x20000c64

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 fca2 	bl	8006100 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	080061e0 	.word	0x080061e0
 80057e0:	080061e0 	.word	0x080061e0
 80057e4:	080061e0 	.word	0x080061e0
 80057e8:	080061e4 	.word	0x080061e4

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <sniprintf>:
 80057fc:	b40c      	push	{r2, r3}
 80057fe:	b530      	push	{r4, r5, lr}
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <sniprintf+0x64>)
 8005802:	1e0c      	subs	r4, r1, #0
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	b09d      	sub	sp, #116	; 0x74
 8005808:	da08      	bge.n	800581c <sniprintf+0x20>
 800580a:	238b      	movs	r3, #139	; 0x8b
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	b01d      	add	sp, #116	; 0x74
 8005814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005818:	b002      	add	sp, #8
 800581a:	4770      	bx	lr
 800581c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005824:	bf14      	ite	ne
 8005826:	f104 33ff 	addne.w	r3, r4, #4294967295
 800582a:	4623      	moveq	r3, r4
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800583c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800583e:	ab21      	add	r3, sp, #132	; 0x84
 8005840:	a902      	add	r1, sp, #8
 8005842:	4628      	mov	r0, r5
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	f000 f869 	bl	800591c <_svfiprintf_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	bfbc      	itt	lt
 800584e:	238b      	movlt	r3, #139	; 0x8b
 8005850:	602b      	strlt	r3, [r5, #0]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d0dd      	beq.n	8005812 <sniprintf+0x16>
 8005856:	9b02      	ldr	r3, [sp, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e7d9      	b.n	8005812 <sniprintf+0x16>
 800585e:	bf00      	nop
 8005860:	20000010 	.word	0x20000010

08005864 <__ssputs_r>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	688e      	ldr	r6, [r1, #8]
 800586a:	429e      	cmp	r6, r3
 800586c:	4682      	mov	sl, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4690      	mov	r8, r2
 8005872:	461f      	mov	r7, r3
 8005874:	d838      	bhi.n	80058e8 <__ssputs_r+0x84>
 8005876:	898a      	ldrh	r2, [r1, #12]
 8005878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800587c:	d032      	beq.n	80058e4 <__ssputs_r+0x80>
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	6909      	ldr	r1, [r1, #16]
 8005882:	eba5 0901 	sub.w	r9, r5, r1
 8005886:	6965      	ldr	r5, [r4, #20]
 8005888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800588c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005890:	3301      	adds	r3, #1
 8005892:	444b      	add	r3, r9
 8005894:	106d      	asrs	r5, r5, #1
 8005896:	429d      	cmp	r5, r3
 8005898:	bf38      	it	cc
 800589a:	461d      	movcc	r5, r3
 800589c:	0553      	lsls	r3, r2, #21
 800589e:	d531      	bpl.n	8005904 <__ssputs_r+0xa0>
 80058a0:	4629      	mov	r1, r5
 80058a2:	f000 fb63 	bl	8005f6c <_malloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	b950      	cbnz	r0, 80058c0 <__ssputs_r+0x5c>
 80058aa:	230c      	movs	r3, #12
 80058ac:	f8ca 3000 	str.w	r3, [sl]
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	6921      	ldr	r1, [r4, #16]
 80058c2:	464a      	mov	r2, r9
 80058c4:	f000 fabe 	bl	8005e44 <memcpy>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6126      	str	r6, [r4, #16]
 80058d6:	6165      	str	r5, [r4, #20]
 80058d8:	444e      	add	r6, r9
 80058da:	eba5 0509 	sub.w	r5, r5, r9
 80058de:	6026      	str	r6, [r4, #0]
 80058e0:	60a5      	str	r5, [r4, #8]
 80058e2:	463e      	mov	r6, r7
 80058e4:	42be      	cmp	r6, r7
 80058e6:	d900      	bls.n	80058ea <__ssputs_r+0x86>
 80058e8:	463e      	mov	r6, r7
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	4632      	mov	r2, r6
 80058ee:	4641      	mov	r1, r8
 80058f0:	f000 fab6 	bl	8005e60 <memmove>
 80058f4:	68a3      	ldr	r3, [r4, #8]
 80058f6:	1b9b      	subs	r3, r3, r6
 80058f8:	60a3      	str	r3, [r4, #8]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	4433      	add	r3, r6
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	2000      	movs	r0, #0
 8005902:	e7db      	b.n	80058bc <__ssputs_r+0x58>
 8005904:	462a      	mov	r2, r5
 8005906:	f000 fba5 	bl	8006054 <_realloc_r>
 800590a:	4606      	mov	r6, r0
 800590c:	2800      	cmp	r0, #0
 800590e:	d1e1      	bne.n	80058d4 <__ssputs_r+0x70>
 8005910:	6921      	ldr	r1, [r4, #16]
 8005912:	4650      	mov	r0, sl
 8005914:	f000 fabe 	bl	8005e94 <_free_r>
 8005918:	e7c7      	b.n	80058aa <__ssputs_r+0x46>
	...

0800591c <_svfiprintf_r>:
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	4698      	mov	r8, r3
 8005922:	898b      	ldrh	r3, [r1, #12]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	b09d      	sub	sp, #116	; 0x74
 8005928:	4607      	mov	r7, r0
 800592a:	460d      	mov	r5, r1
 800592c:	4614      	mov	r4, r2
 800592e:	d50e      	bpl.n	800594e <_svfiprintf_r+0x32>
 8005930:	690b      	ldr	r3, [r1, #16]
 8005932:	b963      	cbnz	r3, 800594e <_svfiprintf_r+0x32>
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	f000 fb19 	bl	8005f6c <_malloc_r>
 800593a:	6028      	str	r0, [r5, #0]
 800593c:	6128      	str	r0, [r5, #16]
 800593e:	b920      	cbnz	r0, 800594a <_svfiprintf_r+0x2e>
 8005940:	230c      	movs	r3, #12
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e0d1      	b.n	8005aee <_svfiprintf_r+0x1d2>
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	616b      	str	r3, [r5, #20]
 800594e:	2300      	movs	r3, #0
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
 8005952:	2320      	movs	r3, #32
 8005954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005958:	f8cd 800c 	str.w	r8, [sp, #12]
 800595c:	2330      	movs	r3, #48	; 0x30
 800595e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b08 <_svfiprintf_r+0x1ec>
 8005962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005966:	f04f 0901 	mov.w	r9, #1
 800596a:	4623      	mov	r3, r4
 800596c:	469a      	mov	sl, r3
 800596e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005972:	b10a      	cbz	r2, 8005978 <_svfiprintf_r+0x5c>
 8005974:	2a25      	cmp	r2, #37	; 0x25
 8005976:	d1f9      	bne.n	800596c <_svfiprintf_r+0x50>
 8005978:	ebba 0b04 	subs.w	fp, sl, r4
 800597c:	d00b      	beq.n	8005996 <_svfiprintf_r+0x7a>
 800597e:	465b      	mov	r3, fp
 8005980:	4622      	mov	r2, r4
 8005982:	4629      	mov	r1, r5
 8005984:	4638      	mov	r0, r7
 8005986:	f7ff ff6d 	bl	8005864 <__ssputs_r>
 800598a:	3001      	adds	r0, #1
 800598c:	f000 80aa 	beq.w	8005ae4 <_svfiprintf_r+0x1c8>
 8005990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005992:	445a      	add	r2, fp
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	f89a 3000 	ldrb.w	r3, [sl]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80a2 	beq.w	8005ae4 <_svfiprintf_r+0x1c8>
 80059a0:	2300      	movs	r3, #0
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059aa:	f10a 0a01 	add.w	sl, sl, #1
 80059ae:	9304      	str	r3, [sp, #16]
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b6:	931a      	str	r3, [sp, #104]	; 0x68
 80059b8:	4654      	mov	r4, sl
 80059ba:	2205      	movs	r2, #5
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	4851      	ldr	r0, [pc, #324]	; (8005b08 <_svfiprintf_r+0x1ec>)
 80059c2:	f7fa fd3d 	bl	8000440 <memchr>
 80059c6:	9a04      	ldr	r2, [sp, #16]
 80059c8:	b9d8      	cbnz	r0, 8005a02 <_svfiprintf_r+0xe6>
 80059ca:	06d0      	lsls	r0, r2, #27
 80059cc:	bf44      	itt	mi
 80059ce:	2320      	movmi	r3, #32
 80059d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d4:	0711      	lsls	r1, r2, #28
 80059d6:	bf44      	itt	mi
 80059d8:	232b      	movmi	r3, #43	; 0x2b
 80059da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059de:	f89a 3000 	ldrb.w	r3, [sl]
 80059e2:	2b2a      	cmp	r3, #42	; 0x2a
 80059e4:	d015      	beq.n	8005a12 <_svfiprintf_r+0xf6>
 80059e6:	9a07      	ldr	r2, [sp, #28]
 80059e8:	4654      	mov	r4, sl
 80059ea:	2000      	movs	r0, #0
 80059ec:	f04f 0c0a 	mov.w	ip, #10
 80059f0:	4621      	mov	r1, r4
 80059f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f6:	3b30      	subs	r3, #48	; 0x30
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d94e      	bls.n	8005a9a <_svfiprintf_r+0x17e>
 80059fc:	b1b0      	cbz	r0, 8005a2c <_svfiprintf_r+0x110>
 80059fe:	9207      	str	r2, [sp, #28]
 8005a00:	e014      	b.n	8005a2c <_svfiprintf_r+0x110>
 8005a02:	eba0 0308 	sub.w	r3, r0, r8
 8005a06:	fa09 f303 	lsl.w	r3, r9, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	46a2      	mov	sl, r4
 8005a10:	e7d2      	b.n	80059b8 <_svfiprintf_r+0x9c>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	9103      	str	r1, [sp, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfbb      	ittet	lt
 8005a1e:	425b      	neglt	r3, r3
 8005a20:	f042 0202 	orrlt.w	r2, r2, #2
 8005a24:	9307      	strge	r3, [sp, #28]
 8005a26:	9307      	strlt	r3, [sp, #28]
 8005a28:	bfb8      	it	lt
 8005a2a:	9204      	strlt	r2, [sp, #16]
 8005a2c:	7823      	ldrb	r3, [r4, #0]
 8005a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a30:	d10c      	bne.n	8005a4c <_svfiprintf_r+0x130>
 8005a32:	7863      	ldrb	r3, [r4, #1]
 8005a34:	2b2a      	cmp	r3, #42	; 0x2a
 8005a36:	d135      	bne.n	8005aa4 <_svfiprintf_r+0x188>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	1d1a      	adds	r2, r3, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	9203      	str	r2, [sp, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bfb8      	it	lt
 8005a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a48:	3402      	adds	r4, #2
 8005a4a:	9305      	str	r3, [sp, #20]
 8005a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b18 <_svfiprintf_r+0x1fc>
 8005a50:	7821      	ldrb	r1, [r4, #0]
 8005a52:	2203      	movs	r2, #3
 8005a54:	4650      	mov	r0, sl
 8005a56:	f7fa fcf3 	bl	8000440 <memchr>
 8005a5a:	b140      	cbz	r0, 8005a6e <_svfiprintf_r+0x152>
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	eba0 000a 	sub.w	r0, r0, sl
 8005a62:	fa03 f000 	lsl.w	r0, r3, r0
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	4303      	orrs	r3, r0
 8005a6a:	3401      	adds	r4, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a72:	4826      	ldr	r0, [pc, #152]	; (8005b0c <_svfiprintf_r+0x1f0>)
 8005a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a78:	2206      	movs	r2, #6
 8005a7a:	f7fa fce1 	bl	8000440 <memchr>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d038      	beq.n	8005af4 <_svfiprintf_r+0x1d8>
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <_svfiprintf_r+0x1f4>)
 8005a84:	bb1b      	cbnz	r3, 8005ace <_svfiprintf_r+0x1b2>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	3307      	adds	r3, #7
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	3308      	adds	r3, #8
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	4433      	add	r3, r6
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	e767      	b.n	800596a <_svfiprintf_r+0x4e>
 8005a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	e7a5      	b.n	80059f0 <_svfiprintf_r+0xd4>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	9305      	str	r3, [sp, #20]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f04f 0c0a 	mov.w	ip, #10
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab6:	3a30      	subs	r2, #48	; 0x30
 8005ab8:	2a09      	cmp	r2, #9
 8005aba:	d903      	bls.n	8005ac4 <_svfiprintf_r+0x1a8>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0c5      	beq.n	8005a4c <_svfiprintf_r+0x130>
 8005ac0:	9105      	str	r1, [sp, #20]
 8005ac2:	e7c3      	b.n	8005a4c <_svfiprintf_r+0x130>
 8005ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac8:	4604      	mov	r4, r0
 8005aca:	2301      	movs	r3, #1
 8005acc:	e7f0      	b.n	8005ab0 <_svfiprintf_r+0x194>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005ad6:	a904      	add	r1, sp, #16
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f3af 8000 	nop.w
 8005ade:	1c42      	adds	r2, r0, #1
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	d1d6      	bne.n	8005a92 <_svfiprintf_r+0x176>
 8005ae4:	89ab      	ldrh	r3, [r5, #12]
 8005ae6:	065b      	lsls	r3, r3, #25
 8005ae8:	f53f af2c 	bmi.w	8005944 <_svfiprintf_r+0x28>
 8005aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aee:	b01d      	add	sp, #116	; 0x74
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4638      	mov	r0, r7
 8005b00:	f000 f87a 	bl	8005bf8 <_printf_i>
 8005b04:	e7eb      	b.n	8005ade <_svfiprintf_r+0x1c2>
 8005b06:	bf00      	nop
 8005b08:	080061a4 	.word	0x080061a4
 8005b0c:	080061ae 	.word	0x080061ae
 8005b10:	00000000 	.word	0x00000000
 8005b14:	08005865 	.word	0x08005865
 8005b18:	080061aa 	.word	0x080061aa

08005b1c <_printf_common>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	4616      	mov	r6, r2
 8005b22:	4699      	mov	r9, r3
 8005b24:	688a      	ldr	r2, [r1, #8]
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bfb8      	it	lt
 8005b30:	4613      	movlt	r3, r2
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b10a      	cbz	r2, 8005b42 <_printf_common+0x26>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	0699      	lsls	r1, r3, #26
 8005b46:	bf42      	ittt	mi
 8005b48:	6833      	ldrmi	r3, [r6, #0]
 8005b4a:	3302      	addmi	r3, #2
 8005b4c:	6033      	strmi	r3, [r6, #0]
 8005b4e:	6825      	ldr	r5, [r4, #0]
 8005b50:	f015 0506 	ands.w	r5, r5, #6
 8005b54:	d106      	bne.n	8005b64 <_printf_common+0x48>
 8005b56:	f104 0a19 	add.w	sl, r4, #25
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	6832      	ldr	r2, [r6, #0]
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dc26      	bgt.n	8005bb2 <_printf_common+0x96>
 8005b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b68:	1e13      	subs	r3, r2, #0
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	bf18      	it	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	0692      	lsls	r2, r2, #26
 8005b72:	d42b      	bmi.n	8005bcc <_printf_common+0xb0>
 8005b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	47c0      	blx	r8
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d01e      	beq.n	8005bc0 <_printf_common+0xa4>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	68e5      	ldr	r5, [r4, #12]
 8005b86:	6832      	ldr	r2, [r6, #0]
 8005b88:	f003 0306 	and.w	r3, r3, #6
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	bf08      	it	eq
 8005b90:	1aad      	subeq	r5, r5, r2
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	bf0c      	ite	eq
 8005b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b9c:	2500      	movne	r5, #0
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bfc4      	itt	gt
 8005ba2:	1a9b      	subgt	r3, r3, r2
 8005ba4:	18ed      	addgt	r5, r5, r3
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	341a      	adds	r4, #26
 8005baa:	42b5      	cmp	r5, r6
 8005bac:	d11a      	bne.n	8005be4 <_printf_common+0xc8>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e008      	b.n	8005bc4 <_printf_common+0xa8>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4638      	mov	r0, r7
 8005bba:	47c0      	blx	r8
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d103      	bne.n	8005bc8 <_printf_common+0xac>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	3501      	adds	r5, #1
 8005bca:	e7c6      	b.n	8005b5a <_printf_common+0x3e>
 8005bcc:	18e1      	adds	r1, r4, r3
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	2030      	movs	r0, #48	; 0x30
 8005bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd6:	4422      	add	r2, r4
 8005bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be0:	3302      	adds	r3, #2
 8005be2:	e7c7      	b.n	8005b74 <_printf_common+0x58>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4622      	mov	r2, r4
 8005be8:	4649      	mov	r1, r9
 8005bea:	4638      	mov	r0, r7
 8005bec:	47c0      	blx	r8
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d0e6      	beq.n	8005bc0 <_printf_common+0xa4>
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7d9      	b.n	8005baa <_printf_common+0x8e>
	...

08005bf8 <_printf_i>:
 8005bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	7e0f      	ldrb	r7, [r1, #24]
 8005bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c00:	2f78      	cmp	r7, #120	; 0x78
 8005c02:	4691      	mov	r9, r2
 8005c04:	4680      	mov	r8, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	469a      	mov	sl, r3
 8005c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0e:	d807      	bhi.n	8005c20 <_printf_i+0x28>
 8005c10:	2f62      	cmp	r7, #98	; 0x62
 8005c12:	d80a      	bhi.n	8005c2a <_printf_i+0x32>
 8005c14:	2f00      	cmp	r7, #0
 8005c16:	f000 80d8 	beq.w	8005dca <_printf_i+0x1d2>
 8005c1a:	2f58      	cmp	r7, #88	; 0x58
 8005c1c:	f000 80a3 	beq.w	8005d66 <_printf_i+0x16e>
 8005c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c28:	e03a      	b.n	8005ca0 <_printf_i+0xa8>
 8005c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2e:	2b15      	cmp	r3, #21
 8005c30:	d8f6      	bhi.n	8005c20 <_printf_i+0x28>
 8005c32:	a101      	add	r1, pc, #4	; (adr r1, 8005c38 <_printf_i+0x40>)
 8005c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005c21 	.word	0x08005c21
 8005c44:	08005c21 	.word	0x08005c21
 8005c48:	08005c21 	.word	0x08005c21
 8005c4c:	08005c21 	.word	0x08005c21
 8005c50:	08005ca5 	.word	0x08005ca5
 8005c54:	08005c21 	.word	0x08005c21
 8005c58:	08005c21 	.word	0x08005c21
 8005c5c:	08005c21 	.word	0x08005c21
 8005c60:	08005c21 	.word	0x08005c21
 8005c64:	08005db1 	.word	0x08005db1
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005d93 	.word	0x08005d93
 8005c70:	08005c21 	.word	0x08005c21
 8005c74:	08005c21 	.word	0x08005c21
 8005c78:	08005dd3 	.word	0x08005dd3
 8005c7c:	08005c21 	.word	0x08005c21
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005c21 	.word	0x08005c21
 8005c88:	08005c21 	.word	0x08005c21
 8005c8c:	08005d9b 	.word	0x08005d9b
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	602a      	str	r2, [r5, #0]
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0a3      	b.n	8005dec <_printf_i+0x1f4>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	6829      	ldr	r1, [r5, #0]
 8005ca8:	0606      	lsls	r6, r0, #24
 8005caa:	f101 0304 	add.w	r3, r1, #4
 8005cae:	d50a      	bpl.n	8005cc6 <_printf_i+0xce>
 8005cb0:	680e      	ldr	r6, [r1, #0]
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	da03      	bge.n	8005cc0 <_printf_i+0xc8>
 8005cb8:	232d      	movs	r3, #45	; 0x2d
 8005cba:	4276      	negs	r6, r6
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	485e      	ldr	r0, [pc, #376]	; (8005e3c <_printf_i+0x244>)
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	e019      	b.n	8005cfa <_printf_i+0x102>
 8005cc6:	680e      	ldr	r6, [r1, #0]
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cce:	bf18      	it	ne
 8005cd0:	b236      	sxthne	r6, r6
 8005cd2:	e7ef      	b.n	8005cb4 <_printf_i+0xbc>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	6029      	str	r1, [r5, #0]
 8005cdc:	0601      	lsls	r1, r0, #24
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0xec>
 8005ce0:	681e      	ldr	r6, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0xf2>
 8005ce4:	0646      	lsls	r6, r0, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0xe8>
 8005ce8:	881e      	ldrh	r6, [r3, #0]
 8005cea:	4854      	ldr	r0, [pc, #336]	; (8005e3c <_printf_i+0x244>)
 8005cec:	2f6f      	cmp	r7, #111	; 0x6f
 8005cee:	bf0c      	ite	eq
 8005cf0:	2308      	moveq	r3, #8
 8005cf2:	230a      	movne	r3, #10
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cfa:	6865      	ldr	r5, [r4, #4]
 8005cfc:	60a5      	str	r5, [r4, #8]
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	bfa2      	ittt	ge
 8005d02:	6821      	ldrge	r1, [r4, #0]
 8005d04:	f021 0104 	bicge.w	r1, r1, #4
 8005d08:	6021      	strge	r1, [r4, #0]
 8005d0a:	b90e      	cbnz	r6, 8005d10 <_printf_i+0x118>
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	d04d      	beq.n	8005dac <_printf_i+0x1b4>
 8005d10:	4615      	mov	r5, r2
 8005d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d16:	fb03 6711 	mls	r7, r3, r1, r6
 8005d1a:	5dc7      	ldrb	r7, [r0, r7]
 8005d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d20:	4637      	mov	r7, r6
 8005d22:	42bb      	cmp	r3, r7
 8005d24:	460e      	mov	r6, r1
 8005d26:	d9f4      	bls.n	8005d12 <_printf_i+0x11a>
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d10b      	bne.n	8005d44 <_printf_i+0x14c>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	07de      	lsls	r6, r3, #31
 8005d30:	d508      	bpl.n	8005d44 <_printf_i+0x14c>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	4299      	cmp	r1, r3
 8005d38:	bfde      	ittt	le
 8005d3a:	2330      	movle	r3, #48	; 0x30
 8005d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d44:	1b52      	subs	r2, r2, r5
 8005d46:	6122      	str	r2, [r4, #16]
 8005d48:	f8cd a000 	str.w	sl, [sp]
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	aa03      	add	r2, sp, #12
 8005d50:	4621      	mov	r1, r4
 8005d52:	4640      	mov	r0, r8
 8005d54:	f7ff fee2 	bl	8005b1c <_printf_common>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d14c      	bne.n	8005df6 <_printf_i+0x1fe>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	b004      	add	sp, #16
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	4835      	ldr	r0, [pc, #212]	; (8005e3c <_printf_i+0x244>)
 8005d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d6c:	6829      	ldr	r1, [r5, #0]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d74:	6029      	str	r1, [r5, #0]
 8005d76:	061d      	lsls	r5, r3, #24
 8005d78:	d514      	bpl.n	8005da4 <_printf_i+0x1ac>
 8005d7a:	07df      	lsls	r7, r3, #31
 8005d7c:	bf44      	itt	mi
 8005d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d82:	6023      	strmi	r3, [r4, #0]
 8005d84:	b91e      	cbnz	r6, 8005d8e <_printf_i+0x196>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f023 0320 	bic.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	2310      	movs	r3, #16
 8005d90:	e7b0      	b.n	8005cf4 <_printf_i+0xfc>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f043 0320 	orr.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	2378      	movs	r3, #120	; 0x78
 8005d9c:	4828      	ldr	r0, [pc, #160]	; (8005e40 <_printf_i+0x248>)
 8005d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005da2:	e7e3      	b.n	8005d6c <_printf_i+0x174>
 8005da4:	0659      	lsls	r1, r3, #25
 8005da6:	bf48      	it	mi
 8005da8:	b2b6      	uxthmi	r6, r6
 8005daa:	e7e6      	b.n	8005d7a <_printf_i+0x182>
 8005dac:	4615      	mov	r5, r2
 8005dae:	e7bb      	b.n	8005d28 <_printf_i+0x130>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	6826      	ldr	r6, [r4, #0]
 8005db4:	6961      	ldr	r1, [r4, #20]
 8005db6:	1d18      	adds	r0, r3, #4
 8005db8:	6028      	str	r0, [r5, #0]
 8005dba:	0635      	lsls	r5, r6, #24
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0x1cc>
 8005dc0:	6019      	str	r1, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0x1d2>
 8005dc4:	0670      	lsls	r0, r6, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0x1c8>
 8005dc8:	8019      	strh	r1, [r3, #0]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	4615      	mov	r5, r2
 8005dd0:	e7ba      	b.n	8005d48 <_printf_i+0x150>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	1d1a      	adds	r2, r3, #4
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fa fb2e 	bl	8000440 <memchr>
 8005de4:	b108      	cbz	r0, 8005dea <_printf_i+0x1f2>
 8005de6:	1b40      	subs	r0, r0, r5
 8005de8:	6060      	str	r0, [r4, #4]
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	6123      	str	r3, [r4, #16]
 8005dee:	2300      	movs	r3, #0
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df4:	e7a8      	b.n	8005d48 <_printf_i+0x150>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	47d0      	blx	sl
 8005e00:	3001      	adds	r0, #1
 8005e02:	d0ab      	beq.n	8005d5c <_printf_i+0x164>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	079b      	lsls	r3, r3, #30
 8005e08:	d413      	bmi.n	8005e32 <_printf_i+0x23a>
 8005e0a:	68e0      	ldr	r0, [r4, #12]
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	4298      	cmp	r0, r3
 8005e10:	bfb8      	it	lt
 8005e12:	4618      	movlt	r0, r3
 8005e14:	e7a4      	b.n	8005d60 <_printf_i+0x168>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	47d0      	blx	sl
 8005e20:	3001      	adds	r0, #1
 8005e22:	d09b      	beq.n	8005d5c <_printf_i+0x164>
 8005e24:	3501      	adds	r5, #1
 8005e26:	68e3      	ldr	r3, [r4, #12]
 8005e28:	9903      	ldr	r1, [sp, #12]
 8005e2a:	1a5b      	subs	r3, r3, r1
 8005e2c:	42ab      	cmp	r3, r5
 8005e2e:	dcf2      	bgt.n	8005e16 <_printf_i+0x21e>
 8005e30:	e7eb      	b.n	8005e0a <_printf_i+0x212>
 8005e32:	2500      	movs	r5, #0
 8005e34:	f104 0619 	add.w	r6, r4, #25
 8005e38:	e7f5      	b.n	8005e26 <_printf_i+0x22e>
 8005e3a:	bf00      	nop
 8005e3c:	080061b5 	.word	0x080061b5
 8005e40:	080061c6 	.word	0x080061c6

08005e44 <memcpy>:
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e4c:	d100      	bne.n	8005e50 <memcpy+0xc>
 8005e4e:	4770      	bx	lr
 8005e50:	b510      	push	{r4, lr}
 8005e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d1f9      	bne.n	8005e52 <memcpy+0xe>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <memmove>:
 8005e60:	4288      	cmp	r0, r1
 8005e62:	b510      	push	{r4, lr}
 8005e64:	eb01 0402 	add.w	r4, r1, r2
 8005e68:	d902      	bls.n	8005e70 <memmove+0x10>
 8005e6a:	4284      	cmp	r4, r0
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	d807      	bhi.n	8005e80 <memmove+0x20>
 8005e70:	1e43      	subs	r3, r0, #1
 8005e72:	42a1      	cmp	r1, r4
 8005e74:	d008      	beq.n	8005e88 <memmove+0x28>
 8005e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e7e:	e7f8      	b.n	8005e72 <memmove+0x12>
 8005e80:	4402      	add	r2, r0
 8005e82:	4601      	mov	r1, r0
 8005e84:	428a      	cmp	r2, r1
 8005e86:	d100      	bne.n	8005e8a <memmove+0x2a>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e92:	e7f7      	b.n	8005e84 <memmove+0x24>

08005e94 <_free_r>:
 8005e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e96:	2900      	cmp	r1, #0
 8005e98:	d044      	beq.n	8005f24 <_free_r+0x90>
 8005e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9e:	9001      	str	r0, [sp, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ea6:	bfb8      	it	lt
 8005ea8:	18e4      	addlt	r4, r4, r3
 8005eaa:	f000 f913 	bl	80060d4 <__malloc_lock>
 8005eae:	4a1e      	ldr	r2, [pc, #120]	; (8005f28 <_free_r+0x94>)
 8005eb0:	9801      	ldr	r0, [sp, #4]
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	b933      	cbnz	r3, 8005ec4 <_free_r+0x30>
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6014      	str	r4, [r2, #0]
 8005eba:	b003      	add	sp, #12
 8005ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ec0:	f000 b90e 	b.w	80060e0 <__malloc_unlock>
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d908      	bls.n	8005eda <_free_r+0x46>
 8005ec8:	6825      	ldr	r5, [r4, #0]
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	bf01      	itttt	eq
 8005ed0:	6819      	ldreq	r1, [r3, #0]
 8005ed2:	685b      	ldreq	r3, [r3, #4]
 8005ed4:	1949      	addeq	r1, r1, r5
 8005ed6:	6021      	streq	r1, [r4, #0]
 8005ed8:	e7ed      	b.n	8005eb6 <_free_r+0x22>
 8005eda:	461a      	mov	r2, r3
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	b10b      	cbz	r3, 8005ee4 <_free_r+0x50>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d9fa      	bls.n	8005eda <_free_r+0x46>
 8005ee4:	6811      	ldr	r1, [r2, #0]
 8005ee6:	1855      	adds	r5, r2, r1
 8005ee8:	42a5      	cmp	r5, r4
 8005eea:	d10b      	bne.n	8005f04 <_free_r+0x70>
 8005eec:	6824      	ldr	r4, [r4, #0]
 8005eee:	4421      	add	r1, r4
 8005ef0:	1854      	adds	r4, r2, r1
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	d1e0      	bne.n	8005eba <_free_r+0x26>
 8005ef8:	681c      	ldr	r4, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	4421      	add	r1, r4
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	e7da      	b.n	8005eba <_free_r+0x26>
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x78>
 8005f06:	230c      	movs	r3, #12
 8005f08:	6003      	str	r3, [r0, #0]
 8005f0a:	e7d6      	b.n	8005eba <_free_r+0x26>
 8005f0c:	6825      	ldr	r5, [r4, #0]
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	428b      	cmp	r3, r1
 8005f12:	bf04      	itt	eq
 8005f14:	6819      	ldreq	r1, [r3, #0]
 8005f16:	685b      	ldreq	r3, [r3, #4]
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	bf04      	itt	eq
 8005f1c:	1949      	addeq	r1, r1, r5
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	6054      	str	r4, [r2, #4]
 8005f22:	e7ca      	b.n	8005eba <_free_r+0x26>
 8005f24:	b003      	add	sp, #12
 8005f26:	bd30      	pop	{r4, r5, pc}
 8005f28:	20001144 	.word	0x20001144

08005f2c <sbrk_aligned>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4e0e      	ldr	r6, [pc, #56]	; (8005f68 <sbrk_aligned+0x3c>)
 8005f30:	460c      	mov	r4, r1
 8005f32:	6831      	ldr	r1, [r6, #0]
 8005f34:	4605      	mov	r5, r0
 8005f36:	b911      	cbnz	r1, 8005f3e <sbrk_aligned+0x12>
 8005f38:	f000 f8bc 	bl	80060b4 <_sbrk_r>
 8005f3c:	6030      	str	r0, [r6, #0]
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 f8b7 	bl	80060b4 <_sbrk_r>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d00a      	beq.n	8005f60 <sbrk_aligned+0x34>
 8005f4a:	1cc4      	adds	r4, r0, #3
 8005f4c:	f024 0403 	bic.w	r4, r4, #3
 8005f50:	42a0      	cmp	r0, r4
 8005f52:	d007      	beq.n	8005f64 <sbrk_aligned+0x38>
 8005f54:	1a21      	subs	r1, r4, r0
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 f8ac 	bl	80060b4 <_sbrk_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d101      	bne.n	8005f64 <sbrk_aligned+0x38>
 8005f60:	f04f 34ff 	mov.w	r4, #4294967295
 8005f64:	4620      	mov	r0, r4
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	20001148 	.word	0x20001148

08005f6c <_malloc_r>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	1ccd      	adds	r5, r1, #3
 8005f72:	f025 0503 	bic.w	r5, r5, #3
 8005f76:	3508      	adds	r5, #8
 8005f78:	2d0c      	cmp	r5, #12
 8005f7a:	bf38      	it	cc
 8005f7c:	250c      	movcc	r5, #12
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	4607      	mov	r7, r0
 8005f82:	db01      	blt.n	8005f88 <_malloc_r+0x1c>
 8005f84:	42a9      	cmp	r1, r5
 8005f86:	d905      	bls.n	8005f94 <_malloc_r+0x28>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	4630      	mov	r0, r6
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	4e2e      	ldr	r6, [pc, #184]	; (8006050 <_malloc_r+0xe4>)
 8005f96:	f000 f89d 	bl	80060d4 <__malloc_lock>
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	461c      	mov	r4, r3
 8005f9e:	bb34      	cbnz	r4, 8005fee <_malloc_r+0x82>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f7ff ffc2 	bl	8005f2c <sbrk_aligned>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	4604      	mov	r4, r0
 8005fac:	d14d      	bne.n	800604a <_malloc_r+0xde>
 8005fae:	6834      	ldr	r4, [r6, #0]
 8005fb0:	4626      	mov	r6, r4
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d140      	bne.n	8006038 <_malloc_r+0xcc>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4638      	mov	r0, r7
 8005fbc:	eb04 0803 	add.w	r8, r4, r3
 8005fc0:	f000 f878 	bl	80060b4 <_sbrk_r>
 8005fc4:	4580      	cmp	r8, r0
 8005fc6:	d13a      	bne.n	800603e <_malloc_r+0xd2>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	3503      	adds	r5, #3
 8005fcc:	1a6d      	subs	r5, r5, r1
 8005fce:	f025 0503 	bic.w	r5, r5, #3
 8005fd2:	3508      	adds	r5, #8
 8005fd4:	2d0c      	cmp	r5, #12
 8005fd6:	bf38      	it	cc
 8005fd8:	250c      	movcc	r5, #12
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff ffa5 	bl	8005f2c <sbrk_aligned>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d02b      	beq.n	800603e <_malloc_r+0xd2>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	442b      	add	r3, r5
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	e00e      	b.n	800600c <_malloc_r+0xa0>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	1b52      	subs	r2, r2, r5
 8005ff2:	d41e      	bmi.n	8006032 <_malloc_r+0xc6>
 8005ff4:	2a0b      	cmp	r2, #11
 8005ff6:	d916      	bls.n	8006026 <_malloc_r+0xba>
 8005ff8:	1961      	adds	r1, r4, r5
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6025      	str	r5, [r4, #0]
 8005ffe:	bf18      	it	ne
 8006000:	6059      	strne	r1, [r3, #4]
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	bf08      	it	eq
 8006006:	6031      	streq	r1, [r6, #0]
 8006008:	5162      	str	r2, [r4, r5]
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	4638      	mov	r0, r7
 800600e:	f104 060b 	add.w	r6, r4, #11
 8006012:	f000 f865 	bl	80060e0 <__malloc_unlock>
 8006016:	f026 0607 	bic.w	r6, r6, #7
 800601a:	1d23      	adds	r3, r4, #4
 800601c:	1af2      	subs	r2, r6, r3
 800601e:	d0b6      	beq.n	8005f8e <_malloc_r+0x22>
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	50a3      	str	r3, [r4, r2]
 8006024:	e7b3      	b.n	8005f8e <_malloc_r+0x22>
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	42a3      	cmp	r3, r4
 800602a:	bf0c      	ite	eq
 800602c:	6032      	streq	r2, [r6, #0]
 800602e:	605a      	strne	r2, [r3, #4]
 8006030:	e7ec      	b.n	800600c <_malloc_r+0xa0>
 8006032:	4623      	mov	r3, r4
 8006034:	6864      	ldr	r4, [r4, #4]
 8006036:	e7b2      	b.n	8005f9e <_malloc_r+0x32>
 8006038:	4634      	mov	r4, r6
 800603a:	6876      	ldr	r6, [r6, #4]
 800603c:	e7b9      	b.n	8005fb2 <_malloc_r+0x46>
 800603e:	230c      	movs	r3, #12
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	4638      	mov	r0, r7
 8006044:	f000 f84c 	bl	80060e0 <__malloc_unlock>
 8006048:	e7a1      	b.n	8005f8e <_malloc_r+0x22>
 800604a:	6025      	str	r5, [r4, #0]
 800604c:	e7de      	b.n	800600c <_malloc_r+0xa0>
 800604e:	bf00      	nop
 8006050:	20001144 	.word	0x20001144

08006054 <_realloc_r>:
 8006054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006058:	4680      	mov	r8, r0
 800605a:	4614      	mov	r4, r2
 800605c:	460e      	mov	r6, r1
 800605e:	b921      	cbnz	r1, 800606a <_realloc_r+0x16>
 8006060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006064:	4611      	mov	r1, r2
 8006066:	f7ff bf81 	b.w	8005f6c <_malloc_r>
 800606a:	b92a      	cbnz	r2, 8006078 <_realloc_r+0x24>
 800606c:	f7ff ff12 	bl	8005e94 <_free_r>
 8006070:	4625      	mov	r5, r4
 8006072:	4628      	mov	r0, r5
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006078:	f000 f838 	bl	80060ec <_malloc_usable_size_r>
 800607c:	4284      	cmp	r4, r0
 800607e:	4607      	mov	r7, r0
 8006080:	d802      	bhi.n	8006088 <_realloc_r+0x34>
 8006082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006086:	d812      	bhi.n	80060ae <_realloc_r+0x5a>
 8006088:	4621      	mov	r1, r4
 800608a:	4640      	mov	r0, r8
 800608c:	f7ff ff6e 	bl	8005f6c <_malloc_r>
 8006090:	4605      	mov	r5, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	d0ed      	beq.n	8006072 <_realloc_r+0x1e>
 8006096:	42bc      	cmp	r4, r7
 8006098:	4622      	mov	r2, r4
 800609a:	4631      	mov	r1, r6
 800609c:	bf28      	it	cs
 800609e:	463a      	movcs	r2, r7
 80060a0:	f7ff fed0 	bl	8005e44 <memcpy>
 80060a4:	4631      	mov	r1, r6
 80060a6:	4640      	mov	r0, r8
 80060a8:	f7ff fef4 	bl	8005e94 <_free_r>
 80060ac:	e7e1      	b.n	8006072 <_realloc_r+0x1e>
 80060ae:	4635      	mov	r5, r6
 80060b0:	e7df      	b.n	8006072 <_realloc_r+0x1e>
	...

080060b4 <_sbrk_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d06      	ldr	r5, [pc, #24]	; (80060d0 <_sbrk_r+0x1c>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	f7fa ffd2 	bl	8001068 <_sbrk>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_sbrk_r+0x1a>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_sbrk_r+0x1a>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000114c 	.word	0x2000114c

080060d4 <__malloc_lock>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__malloc_lock+0x8>)
 80060d6:	f000 b811 	b.w	80060fc <__retarget_lock_acquire_recursive>
 80060da:	bf00      	nop
 80060dc:	20001150 	.word	0x20001150

080060e0 <__malloc_unlock>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__malloc_unlock+0x8>)
 80060e2:	f000 b80c 	b.w	80060fe <__retarget_lock_release_recursive>
 80060e6:	bf00      	nop
 80060e8:	20001150 	.word	0x20001150

080060ec <_malloc_usable_size_r>:
 80060ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f0:	1f18      	subs	r0, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bfbc      	itt	lt
 80060f6:	580b      	ldrlt	r3, [r1, r0]
 80060f8:	18c0      	addlt	r0, r0, r3
 80060fa:	4770      	bx	lr

080060fc <__retarget_lock_acquire_recursive>:
 80060fc:	4770      	bx	lr

080060fe <__retarget_lock_release_recursive>:
 80060fe:	4770      	bx	lr

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
