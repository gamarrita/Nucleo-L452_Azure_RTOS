
01_stop_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  00023e90  2**0
                  CONTENTS
  4 .ARM          00000008  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f0  080064f0  00023e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .trace        00003e80  20000000  20000000  00030000  2**2
                  ALLOC
  9 .data         00000010  20003e80  080064f8  00023e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000010a0  20003e90  08006508  00023e90  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f30  08006508  00024f30  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023e90  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002007d  00000000  00000000  00023ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ed7  00000000  00000000  00043f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  00048e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001390  00000000  00000000  0004a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027381  00000000  00000000  0004b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f26c  00000000  00000000  00072b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9717  00000000  00000000  00091dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b514  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ac  00000000  00000000  0017b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20003e90 	.word	0x20003e90
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006450 	.word	0x08006450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20003e94 	.word	0x20003e94
 80001dc:	08006450 	.word	0x08006450

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f899 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	200048f4 	.word	0x200048f4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1f      	ldr	r4, [pc, #124]	; (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c18      	ldr	r4, [pc, #96]	; (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b949      	cbnz	r1, 800030e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80002fa:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80002fc:	f005 ff16 	bl	800612c <tx_low_power_enter>
    POP     {r0-r3}
 8000300:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000302:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000304:	f005 ff42 	bl	800618c <tx_low_power_exit>
    POP     {r0-r3}
 8000308:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f1      	b.n	80002f2 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7d4      	b.n	80002c8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	20004990 	.word	0x20004990
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	200048f8 	.word	0x200048f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	200048fc 	.word	0x200048fc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	20004efc 	.word	0x20004efc

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	; (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	; (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f004 fea1 	bl	8005110 <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f004 fd80 	bl	8004ed8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	2000499c 	.word	0x2000499c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	20004efc 	.word	0x20004efc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	200049a0 	.word	0x200049a0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	20004a2c 	.word	0x20004a2c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	20004a30 	.word	0x20004a30
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	20004a28 	.word	0x20004a28
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	20004a24 	.word	0x20004a24
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	20004990 	.word	0x20004990
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	200048f8 	.word	0x200048f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	200048fc 	.word	0x200048fc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <__aeabi_uldivmod>:
 8000428:	b953      	cbnz	r3, 8000440 <__aeabi_uldivmod+0x18>
 800042a:	b94a      	cbnz	r2, 8000440 <__aeabi_uldivmod+0x18>
 800042c:	2900      	cmp	r1, #0
 800042e:	bf08      	it	eq
 8000430:	2800      	cmpeq	r0, #0
 8000432:	bf1c      	itt	ne
 8000434:	f04f 31ff 	movne.w	r1, #4294967295
 8000438:	f04f 30ff 	movne.w	r0, #4294967295
 800043c:	f000 b974 	b.w	8000728 <__aeabi_idiv0>
 8000440:	f1ad 0c08 	sub.w	ip, sp, #8
 8000444:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000454:	b004      	add	sp, #16
 8000456:	4770      	bx	lr

08000458 <__udivmoddi4>:
 8000458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800045c:	9d08      	ldr	r5, [sp, #32]
 800045e:	4604      	mov	r4, r0
 8000460:	468e      	mov	lr, r1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d14d      	bne.n	8000502 <__udivmoddi4+0xaa>
 8000466:	428a      	cmp	r2, r1
 8000468:	4694      	mov	ip, r2
 800046a:	d969      	bls.n	8000540 <__udivmoddi4+0xe8>
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	b152      	cbz	r2, 8000488 <__udivmoddi4+0x30>
 8000472:	fa01 f302 	lsl.w	r3, r1, r2
 8000476:	f1c2 0120 	rsb	r1, r2, #32
 800047a:	fa20 f101 	lsr.w	r1, r0, r1
 800047e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000482:	ea41 0e03 	orr.w	lr, r1, r3
 8000486:	4094      	lsls	r4, r2
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	0c21      	lsrs	r1, r4, #16
 800048e:	fbbe f6f8 	udiv	r6, lr, r8
 8000492:	fa1f f78c 	uxth.w	r7, ip
 8000496:	fb08 e316 	mls	r3, r8, r6, lr
 800049a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800049e:	fb06 f107 	mul.w	r1, r6, r7
 80004a2:	4299      	cmp	r1, r3
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x64>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80004ae:	f080 811f 	bcs.w	80006f0 <__udivmoddi4+0x298>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 811c 	bls.w	80006f0 <__udivmoddi4+0x298>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3310 	mls	r3, r8, r0, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb00 f707 	mul.w	r7, r0, r7
 80004d0:	42a7      	cmp	r7, r4
 80004d2:	d90a      	bls.n	80004ea <__udivmoddi4+0x92>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004dc:	f080 810a 	bcs.w	80006f4 <__udivmoddi4+0x29c>
 80004e0:	42a7      	cmp	r7, r4
 80004e2:	f240 8107 	bls.w	80006f4 <__udivmoddi4+0x29c>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	1be4      	subs	r4, r4, r7
 80004f0:	2600      	movs	r6, #0
 80004f2:	b11d      	cbz	r5, 80004fc <__udivmoddi4+0xa4>
 80004f4:	40d4      	lsrs	r4, r2
 80004f6:	2300      	movs	r3, #0
 80004f8:	e9c5 4300 	strd	r4, r3, [r5]
 80004fc:	4631      	mov	r1, r6
 80004fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000502:	428b      	cmp	r3, r1
 8000504:	d909      	bls.n	800051a <__udivmoddi4+0xc2>
 8000506:	2d00      	cmp	r5, #0
 8000508:	f000 80ef 	beq.w	80006ea <__udivmoddi4+0x292>
 800050c:	2600      	movs	r6, #0
 800050e:	e9c5 0100 	strd	r0, r1, [r5]
 8000512:	4630      	mov	r0, r6
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	fab3 f683 	clz	r6, r3
 800051e:	2e00      	cmp	r6, #0
 8000520:	d14a      	bne.n	80005b8 <__udivmoddi4+0x160>
 8000522:	428b      	cmp	r3, r1
 8000524:	d302      	bcc.n	800052c <__udivmoddi4+0xd4>
 8000526:	4282      	cmp	r2, r0
 8000528:	f200 80f9 	bhi.w	800071e <__udivmoddi4+0x2c6>
 800052c:	1a84      	subs	r4, r0, r2
 800052e:	eb61 0303 	sbc.w	r3, r1, r3
 8000532:	2001      	movs	r0, #1
 8000534:	469e      	mov	lr, r3
 8000536:	2d00      	cmp	r5, #0
 8000538:	d0e0      	beq.n	80004fc <__udivmoddi4+0xa4>
 800053a:	e9c5 4e00 	strd	r4, lr, [r5]
 800053e:	e7dd      	b.n	80004fc <__udivmoddi4+0xa4>
 8000540:	b902      	cbnz	r2, 8000544 <__udivmoddi4+0xec>
 8000542:	deff      	udf	#255	; 0xff
 8000544:	fab2 f282 	clz	r2, r2
 8000548:	2a00      	cmp	r2, #0
 800054a:	f040 8092 	bne.w	8000672 <__udivmoddi4+0x21a>
 800054e:	eba1 010c 	sub.w	r1, r1, ip
 8000552:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000556:	fa1f fe8c 	uxth.w	lr, ip
 800055a:	2601      	movs	r6, #1
 800055c:	0c20      	lsrs	r0, r4, #16
 800055e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000562:	fb07 1113 	mls	r1, r7, r3, r1
 8000566:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800056a:	fb0e f003 	mul.w	r0, lr, r3
 800056e:	4288      	cmp	r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x12c>
 8000572:	eb1c 0101 	adds.w	r1, ip, r1
 8000576:	f103 38ff 	add.w	r8, r3, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x12a>
 800057c:	4288      	cmp	r0, r1
 800057e:	f200 80cb 	bhi.w	8000718 <__udivmoddi4+0x2c0>
 8000582:	4643      	mov	r3, r8
 8000584:	1a09      	subs	r1, r1, r0
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb1 f0f7 	udiv	r0, r1, r7
 800058c:	fb07 1110 	mls	r1, r7, r0, r1
 8000590:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000594:	fb0e fe00 	mul.w	lr, lr, r0
 8000598:	45a6      	cmp	lr, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x156>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x154>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f200 80bb 	bhi.w	8000722 <__udivmoddi4+0x2ca>
 80005ac:	4608      	mov	r0, r1
 80005ae:	eba4 040e 	sub.w	r4, r4, lr
 80005b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x9a>
 80005b8:	f1c6 0720 	rsb	r7, r6, #32
 80005bc:	40b3      	lsls	r3, r6
 80005be:	fa22 fc07 	lsr.w	ip, r2, r7
 80005c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005c6:	fa20 f407 	lsr.w	r4, r0, r7
 80005ca:	fa01 f306 	lsl.w	r3, r1, r6
 80005ce:	431c      	orrs	r4, r3
 80005d0:	40f9      	lsrs	r1, r7
 80005d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005d6:	fa00 f306 	lsl.w	r3, r0, r6
 80005da:	fbb1 f8f9 	udiv	r8, r1, r9
 80005de:	0c20      	lsrs	r0, r4, #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fb09 1118 	mls	r1, r9, r8, r1
 80005e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ec:	fb08 f00e 	mul.w	r0, r8, lr
 80005f0:	4288      	cmp	r0, r1
 80005f2:	fa02 f206 	lsl.w	r2, r2, r6
 80005f6:	d90b      	bls.n	8000610 <__udivmoddi4+0x1b8>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000600:	f080 8088 	bcs.w	8000714 <__udivmoddi4+0x2bc>
 8000604:	4288      	cmp	r0, r1
 8000606:	f240 8085 	bls.w	8000714 <__udivmoddi4+0x2bc>
 800060a:	f1a8 0802 	sub.w	r8, r8, #2
 800060e:	4461      	add	r1, ip
 8000610:	1a09      	subs	r1, r1, r0
 8000612:	b2a4      	uxth	r4, r4
 8000614:	fbb1 f0f9 	udiv	r0, r1, r9
 8000618:	fb09 1110 	mls	r1, r9, r0, r1
 800061c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000620:	fb00 fe0e 	mul.w	lr, r0, lr
 8000624:	458e      	cmp	lr, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x1e2>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000630:	d26c      	bcs.n	800070c <__udivmoddi4+0x2b4>
 8000632:	458e      	cmp	lr, r1
 8000634:	d96a      	bls.n	800070c <__udivmoddi4+0x2b4>
 8000636:	3802      	subs	r0, #2
 8000638:	4461      	add	r1, ip
 800063a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800063e:	fba0 9402 	umull	r9, r4, r0, r2
 8000642:	eba1 010e 	sub.w	r1, r1, lr
 8000646:	42a1      	cmp	r1, r4
 8000648:	46c8      	mov	r8, r9
 800064a:	46a6      	mov	lr, r4
 800064c:	d356      	bcc.n	80006fc <__udivmoddi4+0x2a4>
 800064e:	d053      	beq.n	80006f8 <__udivmoddi4+0x2a0>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x212>
 8000652:	ebb3 0208 	subs.w	r2, r3, r8
 8000656:	eb61 010e 	sbc.w	r1, r1, lr
 800065a:	fa01 f707 	lsl.w	r7, r1, r7
 800065e:	fa22 f306 	lsr.w	r3, r2, r6
 8000662:	40f1      	lsrs	r1, r6
 8000664:	431f      	orrs	r7, r3
 8000666:	e9c5 7100 	strd	r7, r1, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	f1c2 0320 	rsb	r3, r2, #32
 8000676:	40d8      	lsrs	r0, r3
 8000678:	fa0c fc02 	lsl.w	ip, ip, r2
 800067c:	fa21 f303 	lsr.w	r3, r1, r3
 8000680:	4091      	lsls	r1, r2
 8000682:	4301      	orrs	r1, r0
 8000684:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000688:	fa1f fe8c 	uxth.w	lr, ip
 800068c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000690:	fb07 3610 	mls	r6, r7, r0, r3
 8000694:	0c0b      	lsrs	r3, r1, #16
 8000696:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800069a:	fb00 f60e 	mul.w	r6, r0, lr
 800069e:	429e      	cmp	r6, r3
 80006a0:	fa04 f402 	lsl.w	r4, r4, r2
 80006a4:	d908      	bls.n	80006b8 <__udivmoddi4+0x260>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80006ae:	d22f      	bcs.n	8000710 <__udivmoddi4+0x2b8>
 80006b0:	429e      	cmp	r6, r3
 80006b2:	d92d      	bls.n	8000710 <__udivmoddi4+0x2b8>
 80006b4:	3802      	subs	r0, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	1b9b      	subs	r3, r3, r6
 80006ba:	b289      	uxth	r1, r1
 80006bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c0:	fb07 3316 	mls	r3, r7, r6, r3
 80006c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c8:	fb06 f30e 	mul.w	r3, r6, lr
 80006cc:	428b      	cmp	r3, r1
 80006ce:	d908      	bls.n	80006e2 <__udivmoddi4+0x28a>
 80006d0:	eb1c 0101 	adds.w	r1, ip, r1
 80006d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006d8:	d216      	bcs.n	8000708 <__udivmoddi4+0x2b0>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d914      	bls.n	8000708 <__udivmoddi4+0x2b0>
 80006de:	3e02      	subs	r6, #2
 80006e0:	4461      	add	r1, ip
 80006e2:	1ac9      	subs	r1, r1, r3
 80006e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006e8:	e738      	b.n	800055c <__udivmoddi4+0x104>
 80006ea:	462e      	mov	r6, r5
 80006ec:	4628      	mov	r0, r5
 80006ee:	e705      	b.n	80004fc <__udivmoddi4+0xa4>
 80006f0:	4606      	mov	r6, r0
 80006f2:	e6e3      	b.n	80004bc <__udivmoddi4+0x64>
 80006f4:	4618      	mov	r0, r3
 80006f6:	e6f8      	b.n	80004ea <__udivmoddi4+0x92>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d2a9      	bcs.n	8000650 <__udivmoddi4+0x1f8>
 80006fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000700:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000704:	3801      	subs	r0, #1
 8000706:	e7a3      	b.n	8000650 <__udivmoddi4+0x1f8>
 8000708:	4646      	mov	r6, r8
 800070a:	e7ea      	b.n	80006e2 <__udivmoddi4+0x28a>
 800070c:	4620      	mov	r0, r4
 800070e:	e794      	b.n	800063a <__udivmoddi4+0x1e2>
 8000710:	4640      	mov	r0, r8
 8000712:	e7d1      	b.n	80006b8 <__udivmoddi4+0x260>
 8000714:	46d0      	mov	r8, sl
 8000716:	e77b      	b.n	8000610 <__udivmoddi4+0x1b8>
 8000718:	3b02      	subs	r3, #2
 800071a:	4461      	add	r1, ip
 800071c:	e732      	b.n	8000584 <__udivmoddi4+0x12c>
 800071e:	4630      	mov	r0, r6
 8000720:	e709      	b.n	8000536 <__udivmoddi4+0xde>
 8000722:	4464      	add	r4, ip
 8000724:	3802      	subs	r0, #2
 8000726:	e742      	b.n	80005ae <__udivmoddi4+0x156>

08000728 <__aeabi_idiv0>:
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000734:	2334      	movs	r3, #52	; 0x34
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <tx_application_define+0x34>)
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <tx_application_define+0x38>)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <tx_application_define+0x3c>)
 8000742:	f005 fb61 	bl	8005e08 <_txe_byte_pool_create>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <tx_application_define+0x3c>)
 800074e:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 f80b 	bl	800076c <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20003eac 	.word	0x20003eac
 8000764:	08006468 	.word	0x08006468
 8000768:	200042ac 	.word	0x200042ac

0800076c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af08      	add	r7, sp, #32
 8000772:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tx_thread_create(&thread_ptr, "refresh_thread", refresh_thread_entry,
 800077c:	23b0      	movs	r3, #176	; 0xb0
 800077e:	9306      	str	r3, [sp, #24]
 8000780:	2301      	movs	r3, #1
 8000782:	9305      	str	r3, [sp, #20]
 8000784:	2301      	movs	r3, #1
 8000786:	9304      	str	r3, [sp, #16]
 8000788:	230f      	movs	r3, #15
 800078a:	9303      	str	r3, [sp, #12]
 800078c:	230f      	movs	r3, #15
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <App_ThreadX_Init+0x54>)
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	f241 2334 	movw	r3, #4660	; 0x1234
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <App_ThreadX_Init+0x58>)
 80007a0:	4909      	ldr	r1, [pc, #36]	; (80007c8 <App_ThreadX_Init+0x5c>)
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <App_ThreadX_Init+0x60>)
 80007a4:	f005 fbd0 	bl	8005f48 <_txe_thread_create>
		  0x1234, thread_stack, THREAD_STACK_SIZE,
		  15, 15, 1, TX_AUTO_START);

// Si no esta activado el modo de bajo consumo activo TraceX.
#ifndef FM_THREADX_LOW_POWER
  tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
 80007a8:	221e      	movs	r2, #30
 80007aa:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <App_ThreadX_Init+0x64>)
 80007b0:	f004 fee4 	bl	800557c <_tx_trace_enable>
#endif

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200042e0 	.word	0x200042e0
 80007c4:	08000821 	.word	0x08000821
 80007c8:	0800647c 	.word	0x0800647c
 80007cc:	200046e0 	.word	0x200046e0
 80007d0:	20000000 	.word	0x20000000

080007d4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80007d8:	f003 fc62 	bl	80040a0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	ticks_to_sleep = (32768 / 16) * count; // clock_freq /  RTC_WAKEUPCLOCK_RTCCLK_DIV16
	ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
#ifdef FM_THREADX_LOW_POWER
	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
	 */
#ifdef FM_THREADX_LOW_POWER
	SystemClock_Config();
#endif
  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	cnt_ret += cnt_drift;
	cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
	cnt_ret /= 2048;
	return cnt_ret;
#else
	return 0;
 8000814:	2300      	movs	r3, #0
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <refresh_thread_entry>:

/* USER CODE BEGIN 1 */
VOID refresh_thread_entry(ULONG initial_input)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2120      	movs	r1, #32
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fe12 	bl	8001458 <HAL_GPIO_WritePin>
		tx_thread_sleep(100);
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	f003 fe69 	bl	800450c <_tx_thread_sleep>

		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fe09 	bl	8001458 <HAL_GPIO_WritePin>
		tx_thread_sleep(100);
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f003 fe60 	bl	800450c <_tx_thread_sleep>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800084c:	e7ec      	b.n	8000828 <refresh_thread_entry+0x8>
	...

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fb64 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f812 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 f8fa 	bl	8000a54 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8000860:	f000 f866 	bl	8000930 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000864:	f000 f892 	bl	800098c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000868:	f000 f8c4 	bl	80009f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Start(&hlptim1, 0xffff);
 800086c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <main+0x2c>)
 8000872:	f000 feab 	bl	80015cc <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000876:	f7ff ffad 	bl	80007d4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087a:	e7fe      	b.n	800087a <main+0x2a>
 800087c:	20004790 	.word	0x20004790

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	; 0x58
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2244      	movs	r2, #68	; 0x44
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f005 fdd6 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80008a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008a6:	f000 ff23 	bl	80016f0 <HAL_PWREx_ControlVoltageScaling>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b0:	f000 f954 	bl	8000b5c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b4:	f000 fefe 	bl	80016b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SystemClock_Config+0xac>)
 80008ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008be:	4a1b      	ldr	r2, [pc, #108]	; (800092c <SystemClock_Config+0xac>)
 80008c0:	f023 0318 	bic.w	r3, r3, #24
 80008c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80008c8:	231c      	movs	r3, #28
 80008ca:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80008dc:	2390      	movs	r3, #144	; 0x90
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 ff57 	bl	800179c <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008f4:	f000 f932 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	2104      	movs	r1, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fb57 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800091c:	f000 f91e 	bl	8000b5c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000920:	f002 f812 	bl	8002948 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000924:	bf00      	nop
 8000926:	3758      	adds	r7, #88	; 0x58
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <MX_LPTIM1_Init+0x58>)
 8000938:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_LPTIM1_Init+0x54>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000946:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_LPTIM1_Init+0x54>)
 800094a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_LPTIM1_Init+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_LPTIM1_Init+0x54>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_LPTIM1_Init+0x54>)
 8000970:	f000 fd8a 	bl	8001488 <HAL_LPTIM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800097a:	f000 f8ef 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20004790 	.word	0x20004790
 8000988:	40007c00 	.word	0x40007c00

0800098c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_RTC_Init+0x60>)
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_RTC_Init+0x64>)
 8000994:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_RTC_Init+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_RTC_Init+0x60>)
 800099e:	227f      	movs	r2, #127	; 0x7f
 80009a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_RTC_Init+0x60>)
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_RTC_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_RTC_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_RTC_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_RTC_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <MX_RTC_Init+0x60>)
 80009c2:	f002 f8c3 	bl	8002b4c <HAL_RTC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009cc:	f000 f8c6 	bl	8000b5c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xffff, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_RTC_Init+0x60>)
 80009d8:	f002 f9ca 	bl	8002d70 <HAL_RTCEx_SetWakeUpTimer_IT>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80009e2:	f000 f8bb 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200047c8 	.word	0x200047c8
 80009f0:	40002800 	.word	0x40002800

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART2_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a38:	f002 fd44 	bl	80034c4 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f88b 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200047ec 	.word	0x200047ec
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2120      	movs	r1, #32
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fcc1 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000adc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <MX_GPIO_Init+0xc8>)
 8000aee:	f000 fb39 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000af2:	2320      	movs	r3, #32
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fb2a 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000800 	.word	0x48000800

08000b20 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f002 f9b5 	bl	8002e98 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4a:	f000 fa09 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40001000 	.word	0x40001000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0003 	mvn.w	r0, #3
 8000ba6:	f000 fab3 	bl	8001110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09e      	sub	sp, #120	; 0x78
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2268      	movs	r2, #104	; 0x68
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fc39 	bl	8006440 <memset>
  if(hlptim->Instance==LPTIM1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_LPTIM_MspInit+0x60>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d11b      	bne.n	8000c10 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000bde:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000be2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fc41 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8000bf4:	f7ff ffb2 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_LPTIM_MspInit+0x64>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_LPTIM_MspInit+0x64>)
 8000bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c02:	6593      	str	r3, [r2, #88]	; 0x58
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_LPTIM_MspInit+0x64>)
 8000c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3778      	adds	r7, #120	; 0x78
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40007c00 	.word	0x40007c00
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2268      	movs	r2, #104	; 0x68
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fc05 	bl	8006440 <memset>
  if(hrtc->Instance==RTC)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <HAL_RTC_MspInit+0x68>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d11f      	bne.n	8000c80 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fc0d 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c5c:	f7ff ff7e 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_RTC_MspInit+0x6c>)
 8000c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_RTC_MspInit+0x6c>)
 8000c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 fa4b 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 fa64 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3770      	adds	r7, #112	; 0x70
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40002800 	.word	0x40002800
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a4      	sub	sp, #144	; 0x90
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2268      	movs	r2, #104	; 0x68
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f005 fbc5 	bl	8006440 <memset>
  if(huart->Instance==USART2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <HAL_UART_MspInit+0xb0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d13a      	bne.n	8000d36 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fbcf 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd8:	f7ff ff40 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d22:	2307      	movs	r3, #7
 8000d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 fa17 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3790      	adds	r7, #144	; 0x90
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <HAL_InitTick+0xe0>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_InitTick+0xe0>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <HAL_InitTick+0xe0>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6e:	f107 0210 	add.w	r2, r7, #16
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fae7 	bl	800234c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d88:	f001 fab4 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8000d8c:	6378      	str	r0, [r7, #52]	; 0x34
 8000d8e:	e004      	b.n	8000d9a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d90:	f001 fab0 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8000d94:	4603      	mov	r3, r0
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_InitTick+0xe4>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9b      	lsrs	r3, r3, #18
 8000da4:	3b01      	subs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_InitTick+0xe8>)
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_InitTick+0xec>)
 8000dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_InitTick+0xe8>)
 8000db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_InitTick+0xe8>)
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0xe8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_InitTick+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_InitTick+0xe8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <HAL_InitTick+0xe8>)
 8000dd0:	f002 f8e6 	bl	8002fa0 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11b      	bne.n	8000e1a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000de2:	4813      	ldr	r0, [pc, #76]	; (8000e30 <HAL_InitTick+0xe8>)
 8000de4:	f002 f93e 	bl	8003064 <HAL_TIM_Base_Start_IT>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d111      	bne.n	8000e1a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df6:	2036      	movs	r0, #54	; 0x36
 8000df8:	f000 f9a6 	bl	8001148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	d808      	bhi.n	8000e14 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e02:	2200      	movs	r2, #0
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	2036      	movs	r0, #54	; 0x36
 8000e08:	f000 f982 	bl	8001110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_InitTick+0xf0>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e002      	b.n	8000e1a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3738      	adds	r7, #56	; 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	20004870 	.word	0x20004870
 8000e34:	40001000 	.word	0x40001000
 8000e38:	20003e84 	.word	0x20003e84

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	for(int i = 0; i <10; i++);
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e002      	b.n	8000e6c <DebugMon_Handler+0x12>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	ddf9      	ble.n	8000e66 <DebugMon_Handler+0xc>

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <RTC_WKUP_IRQHandler+0x10>)
 8000e86:	f002 f865 	bl	8002f54 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200047c8 	.word	0x200047c8

08000e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM6_DAC_IRQHandler+0x10>)
 8000e9a:	f002 f93f 	bl	800311c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20004870 	.word	0x20004870

08000ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffea 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f005 fa7d 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fca7 	bl	8000850 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000f08:	20003e80 	.word	0x20003e80
  ldr r1, =_edata
 8000f0c:	20003e90 	.word	0x20003e90
  ldr r2, =_sidata
 8000f10:	080064f8 	.word	0x080064f8
  ldr r2, =_sbss
 8000f14:	20003e90 	.word	0x20003e90
  ldr r4, =_ebss
 8000f18:	20004f30 	.word	0x20004f30

08000f1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_Init+0x3c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x3c>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f8df 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3c:	200f      	movs	r0, #15
 8000f3e:	f7ff ff03 	bl	8000d48 <HAL_InitTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e001      	b.n	8000f52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4e:	f7ff fe0b 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20003e88 	.word	0x20003e88
 8000f84:	200048bc 	.word	0x200048bc

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200048bc 	.word	0x200048bc

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4c 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff61 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb1 	bl	8001094 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff80 	bl	8001040 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff54 	bl	8001004 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e154      	b.n	800141e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8146 	beq.w	8001418 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a0 	beq.w	8001418 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a53      	ldr	r2, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d019      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a49      	ldr	r2, [pc, #292]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a48      	ldr	r2, [pc, #288]	; (8001448 <HAL_GPIO_Init+0x2e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1e4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_GPIO_Init+0x2e8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a46      	ldr	r2, [pc, #280]	; (8001450 <HAL_GPIO_Init+0x2ec>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1dc>
 800133c:	2304      	movs	r3, #4
 800133e:	e008      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001340:	2307      	movs	r3, #7
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001344:	2303      	movs	r3, #3
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001350:	2300      	movs	r3, #0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001362:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001370:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f aea3 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e08f      	b.n	80015ba <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d106      	bne.n	80014ba <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fb7f 	bl	8000bb8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2202      	movs	r2, #2
 80014be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d004      	beq.n	80014dc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014da:	d103      	bne.n	80014e4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f023 031e 	bic.w	r3, r3, #30
 80014e2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d005      	beq.n	80014fc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80014fa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_LPTIM_Init+0x13c>)
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800150c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001512:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001518:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800151e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001536:	4313      	orrs	r3, r2
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d004      	beq.n	8001550 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800154e:	d107      	bne.n	8001560 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001558:	4313      	orrs	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001568:	4293      	cmp	r3, r2
 800156a:	d00a      	beq.n	8001582 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001574:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800157a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_LPTIM_Init+0x140>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d108      	bne.n	80015a6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	621a      	str	r2, [r3, #32]
 80015a4:	e004      	b.n	80015b0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015ae:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	ff19f1fe 	.word	0xff19f1fe
 80015c8:	40007c00 	.word	0x40007c00

080015cc <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d00c      	beq.n	8001600 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015ee:	d107      	bne.n	8001600 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80015fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2210      	movs	r2, #16
 8001616:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001620:	2110      	movs	r1, #16
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f816 	bl	8001654 <LPTIM_WaitForFlag>
 8001628:	4603      	mov	r3, r0
 800162a:	2b03      	cmp	r3, #3
 800162c:	d101      	bne.n	8001632 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e00c      	b.n	800164c <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0204 	orr.w	r2, r2, #4
 8001640:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <LPTIM_WaitForFlag+0x58>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <LPTIM_WaitForFlag+0x5c>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0b9b      	lsrs	r3, r3, #14
 800166e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3b01      	subs	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	4013      	ands	r3, r2
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d002      	beq.n	800169e <LPTIM_WaitForFlag+0x4a>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ec      	bne.n	8001678 <LPTIM_WaitForFlag+0x24>

  return result;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20003e80 	.word	0x20003e80
 80016b0:	d1b71759 	.word	0xd1b71759

080016b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_PWREx_GetVoltageRange+0x18>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40007000 	.word	0x40007000

080016f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fe:	d130      	bne.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170c:	d038      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2232      	movs	r2, #50	; 0x32
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001734:	e002      	b.n	800173c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3b01      	subs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	d102      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x60>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f2      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	d110      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e00f      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176e:	d007      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40007000 	.word	0x40007000
 8001794:	20003e80 	.word	0x20003e80
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 bc02 	b.w	8001fb4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b0:	4b96      	ldr	r3, [pc, #600]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ba:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80e4 	beq.w	800199a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4c>
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f040 808b 	bne.w	80018f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	f040 8087 	bne.w	80018f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x64>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e3d9      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_RCC_OscConfig+0x7e>
 8001810:	4b7e      	ldr	r3, [pc, #504]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001818:	e005      	b.n	8001826 <HAL_RCC_OscConfig+0x8a>
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001826:	4293      	cmp	r3, r2
 8001828:	d223      	bcs.n	8001872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fdbe 	bl	80023b0 <RCC_SetFlashLatencyFromMSIRange>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e3ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	496d      	ldr	r1, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	4968      	ldr	r1, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e025      	b.n	80018be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001872:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a65      	ldr	r2, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4960      	ldr	r1, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	495b      	ldr	r1, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd7e 	bl	80023b0 <RCC_SetFlashLatencyFromMSIRange>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e37a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018be:	f000 fc81 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	4950      	ldr	r1, [pc, #320]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_RCC_OscConfig+0x278>)
 80018dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018de:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fa30 	bl	8000d48 <HAL_InitTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d052      	beq.n	8001998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	e35e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d032      	beq.n	8001964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb3d 	bl	8000f88 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001912:	f7ff fb39 	bl	8000f88 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e347      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4930      	ldr	r1, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	492b      	ldr	r1, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
 8001962:	e01a      	b.n	800199a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb0a 	bl	8000f88 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001978:	f7ff fb06 	bl	8000f88 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e314      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1dc>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d073      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_OscConfig+0x21c>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d10e      	bne.n	80019d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d063      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d15f      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e2f1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x24c>
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e025      	b.n	8001a34 <HAL_RCC_OscConfig+0x298>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d114      	bne.n	8001a1c <HAL_RCC_OscConfig+0x280>
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e013      	b.n	8001a34 <HAL_RCC_OscConfig+0x298>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	080064a0 	.word	0x080064a0
 8001a14:	20003e80 	.word	0x20003e80
 8001a18:	20003e84 	.word	0x20003e84
 8001a1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a9f      	ldr	r2, [pc, #636]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a9c      	ldr	r2, [pc, #624]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff faa4 	bl	8000f88 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff faa0 	bl	8000f88 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2ae      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2a8>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fa90 	bl	8000f88 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fa8c 	bl	8000f88 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e29a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2d0>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d060      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x310>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d116      	bne.n	8001ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x328>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e277      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	4973      	ldr	r1, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad8:	e040      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d023      	beq.n	8001b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa4b 	bl	8000f88 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa47 	bl	8000f88 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e255      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	495f      	ldr	r1, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e018      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fa27 	bl	8000f88 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fa23 	bl	8000f88 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e231      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa02 	bl	8000f88 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f9fe 	bl	8000f88 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e20c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x3ec>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f9e5 	bl	8000f88 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f9e1 	bl	8000f88 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1ef      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80a6 	beq.w	8001d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d118      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f9a8 	bl	8000f88 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7ff f9a4 	bl	8000f88 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1b2      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4d8>
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c72:	e029      	b.n	8001cc8 <HAL_RCC_OscConfig+0x52c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d115      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x50c>
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x52c>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	4b9a      	ldr	r3, [pc, #616]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	4a99      	ldr	r2, [pc, #612]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb8:	4b96      	ldr	r3, [pc, #600]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a95      	ldr	r2, [pc, #596]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d016      	beq.n	8001cfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f95a 	bl	8000f88 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f956 	bl	8000f88 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e162      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ed      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x53c>
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f943 	bl	8000f88 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff f93f 	bl	8000f88 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e14b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1c:	4b7d      	ldr	r3, [pc, #500]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ed      	bne.n	8001d06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d50:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	4a6f      	ldr	r2, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f912 	bl	8000f88 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d68:	f7ff f90e 	bl	8000f88 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e11c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ef      	beq.n	8001d68 <HAL_RCC_OscConfig+0x5cc>
 8001d88:	e01b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f8f5 	bl	8000f88 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da2:	f7ff f8f1 	bl	8000f88 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ff      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80f3 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	f040 80c9 	bne.w	8001f68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd6:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d12c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	3b01      	subs	r3, #1
 8001df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d123      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d11b      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d113      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d06b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d062      	beq.n	8001f10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0ac      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e66:	f7ff f88f 	bl	8000f88 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f88b 	bl	8000f88 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e099      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x77c>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ea6:	0212      	lsls	r2, r2, #8
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eae:	0852      	lsrs	r2, r2, #1
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	0552      	lsls	r2, r2, #21
 8001eb4:	4311      	orrs	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eba:	0852      	lsrs	r2, r2, #1
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	0652      	lsls	r2, r2, #25
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec6:	06d2      	lsls	r2, r2, #27
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	4912      	ldr	r1, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee8:	f7ff f84e 	bl	8000f88 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f84a 	bl	8000f88 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e058      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0e:	e050      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e04f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d144      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f40:	f7ff f822 	bl	8000f88 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f81e 	bl	8000f88 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e02c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x7ac>
 8001f66:	e024      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d01f      	beq.n	8001fae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f805 	bl	8000f88 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff f801 	bl	8000f88 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4905      	ldr	r1, [pc, #20]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x824>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e001      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	feeefffc 	.word	0xfeeefffc

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e7      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4970      	ldr	r1, [pc, #448]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cf      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4960      	ldr	r1, [pc, #384]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d04c      	beq.n	80020dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d121      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0a6      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e09a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207a:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e086      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4943      	ldr	r1, [pc, #268]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ac:	f7fe ff6c 	bl	8000f88 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe ff68 	bl	8000f88 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e06e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d208      	bcs.n	800210a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	492b      	ldr	r1, [pc, #172]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d210      	bcs.n	800213a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4923      	ldr	r1, [pc, #140]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e036      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4910      	ldr	r1, [pc, #64]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002178:	f000 f824 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	490b      	ldr	r1, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1fc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fdd3 	bl	8000d48 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	080064a0 	.word	0x080064a0
 80021bc:	20003e80 	.word	0x20003e80
 80021c0:	20003e84 	.word	0x20003e84

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11e      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002234:	e00a      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d102      	bne.n	8002242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	e004      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d101      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800224a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d134      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0xa6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xac>
 8002268:	e005      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002272:	617b      	str	r3, [r7, #20]
      break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	3301      	adds	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0e5b      	lsrs	r3, r3, #25
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022bc:	69bb      	ldr	r3, [r7, #24]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080064b8 	.word	0x080064b8
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20003e80 	.word	0x20003e80

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	; (800231c <HAL_RCC_GetPCLK1Freq+0x28>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	080064b0 	.word	0x080064b0

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002324:	f7ff ffda 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	080064b0 	.word	0x080064b0

0800234c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	220f      	movs	r2, #15
 800235a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_RCC_GetClockConfig+0x60>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	601a      	str	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40022000 	.word	0x40022000

080023b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c8:	f7ff f984 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
 80023cc:	6178      	str	r0, [r7, #20]
 80023ce:	e014      	b.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023da:	6593      	str	r3, [r2, #88]	; 0x58
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e8:	f7ff f974 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
 80023ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002400:	d10b      	bne.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d919      	bls.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2ba0      	cmp	r3, #160	; 0xa0
 800240c:	d902      	bls.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240e:	2302      	movs	r3, #2
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e013      	b.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002414:	2301      	movs	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e010      	b.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d902      	bls.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002420:	2303      	movs	r3, #3
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e00a      	b.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d102      	bne.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800242c:	2302      	movs	r3, #2
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e004      	b.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b70      	cmp	r3, #112	; 0x70
 8002436:	d101      	bne.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002438:	2301      	movs	r3, #1
 800243a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0207 	bic.w	r2, r3, #7
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002478:	2300      	movs	r3, #0
 800247a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800247c:	2300      	movs	r3, #0
 800247e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002488:	2b00      	cmp	r3, #0
 800248a:	d031      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002494:	d01a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002496:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800249a:	d814      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b2:	e00c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fa54 	bl	8002968 <RCCEx_PLLSAI1_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ca:	e000      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d4:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	494e      	ldr	r1, [pc, #312]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ea:	e001      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 809e 	beq.w	800263a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	; 0x58
 8002524:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002540:	f7fe fd22 	bl	8000f88 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002546:	e009      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fd1e 	bl	8000f88 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d902      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	74fb      	strb	r3, [r7, #19]
        break;
 800255a:	e005      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ef      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d15a      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01e      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	429a      	cmp	r2, r3
 8002588:	d019      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b6:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fcde 	bl	8000f88 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	e00b      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fcda 	bl	8000f88 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d902      	bls.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	74fb      	strb	r3, [r7, #19]
            break;
 80025e6:	e006      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ec      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002612:	e009      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
 8002618:	e006      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002628:	7c7b      	ldrb	r3, [r7, #17]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4a9d      	ldr	r2, [pc, #628]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002646:	4b98      	ldr	r3, [pc, #608]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4994      	ldr	r1, [pc, #592]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002668:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 020c 	bic.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	498c      	ldr	r1, [pc, #560]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800268a:	4b87      	ldr	r3, [pc, #540]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	4983      	ldr	r1, [pc, #524]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ac:	4b7e      	ldr	r3, [pc, #504]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	497b      	ldr	r1, [pc, #492]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ce:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4972      	ldr	r1, [pc, #456]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f0:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	496a      	ldr	r1, [pc, #424]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	4961      	ldr	r1, [pc, #388]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002734:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	4959      	ldr	r1, [pc, #356]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	4950      	ldr	r1, [pc, #320]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002778:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	4948      	ldr	r1, [pc, #288]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800279c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a0:	f023 0203 	bic.w	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	493f      	ldr	r1, [pc, #252]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d028      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	4937      	ldr	r1, [pc, #220]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d106      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a31      	ldr	r2, [pc, #196]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e011      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f2:	d10c      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f8b4 	bl	8002968 <RCCEx_PLLSAI1_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	491f      	ldr	r1, [pc, #124]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002838:	d106      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002844:	60d3      	str	r3, [r2, #12]
 8002846:	e011      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f885 	bl	8002968 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02b      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002896:	d109      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a02      	ldr	r2, [pc, #8]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
 80028a4:	e014      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f853 	bl	8002968 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01c      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	4916      	ldr	r1, [pc, #88]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028fa:	d10c      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f830 	bl	8002968 <RCCEx_PLLSAI1_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002930:	4904      	ldr	r1, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002938:	7cbb      	ldrb	r3, [r7, #18]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002976:	4b74      	ldr	r3, [pc, #464]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d018      	beq.n	80029b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002982:	4b71      	ldr	r3, [pc, #452]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d10d      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
       ||
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800299a:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
       ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d047      	beq.n	8002a3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e044      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d018      	beq.n	80029ee <RCCEx_PLLSAI1_Config+0x86>
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d825      	bhi.n	8002a0c <RCCEx_PLLSAI1_Config+0xa4>
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d002      	beq.n	80029ca <RCCEx_PLLSAI1_Config+0x62>
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d009      	beq.n	80029dc <RCCEx_PLLSAI1_Config+0x74>
 80029c8:	e020      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029da:	e01a      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e013      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0a:	e006      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e004      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a22:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	430b      	orrs	r3, r1
 8002a38:	4943      	ldr	r1, [pc, #268]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d17c      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fa9a 	bl	8000f88 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a56:	e009      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a58:	f7fe fa96 	bl	8000f88 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6a:	e005      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ef      	bne.n	8002a58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d15f      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d110      	bne.n	8002aa6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	0211      	lsls	r1, r2, #8
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	06d2      	lsls	r2, r2, #27
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	492a      	ldr	r1, [pc, #168]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	610b      	str	r3, [r1, #16]
 8002aa4:	e027      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d112      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	0211      	lsls	r1, r2, #8
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6912      	ldr	r2, [r2, #16]
 8002ac2:	0852      	lsrs	r2, r2, #1
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0552      	lsls	r2, r2, #21
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	491f      	ldr	r1, [pc, #124]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	610b      	str	r3, [r1, #16]
 8002ad0:	e011      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6892      	ldr	r2, [r2, #8]
 8002ae2:	0211      	lsls	r1, r2, #8
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6952      	ldr	r2, [r2, #20]
 8002ae8:	0852      	lsrs	r2, r2, #1
 8002aea:	3a01      	subs	r2, #1
 8002aec:	0652      	lsls	r2, r2, #25
 8002aee:	430a      	orrs	r2, r1
 8002af0:	4915      	ldr	r1, [pc, #84]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fa41 	bl	8000f88 <HAL_GetTick>
 8002b06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b08:	e009      	b.n	8002b1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0a:	f7fe fa3d 	bl	8000f88 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d902      	bls.n	8002b1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1c:	e005      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ef      	beq.n	8002b0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06c      	beq.n	8002c38 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe f854 	bl	8000c20 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	22ca      	movs	r2, #202	; 0xca
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2253      	movs	r2, #83	; 0x53
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f87c 	bl	8002c8e <RTC_EnterInitMode>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d14b      	bne.n	8002c38 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	041a      	lsls	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f87f 	bl	8002cf4 <RTC_ExitInitMode>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11b      	bne.n	8002c38 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0203 	bic.w	r2, r2, #3
 8002c0e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c58:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002c5a:	f7fe f995 	bl	8000f88 <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c60:	e009      	b.n	8002c76 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c62:	f7fe f991 	bl	8000f88 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c70:	d901      	bls.n	8002c76 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e007      	b.n	8002c86 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d120      	bne.n	8002cea <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002cb2:	f7fe f969 	bl	8000f88 <HAL_GetTick>
 8002cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002cb8:	e00d      	b.n	8002cd6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002cba:	f7fe f965 	bl	8000f88 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc8:	d905      	bls.n	8002cd6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <RTC_EnterInitMode+0x5c>
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d1e7      	bne.n	8002cba <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10c      	bne.n	8002d32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff92 	bl	8002c42 <HAL_RTC_WaitForSynchro>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01e      	beq.n	8002d62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2203      	movs	r2, #3
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e017      	b.n	8002d62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d38:	f023 0320 	bic.w	r3, r3, #32
 8002d3c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff7f 	bl	8002c42 <HAL_RTC_WaitForSynchro>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <RTC_ExitInitMode+0x78>)
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40002800 	.word	0x40002800

08002d70 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e07f      	b.n	8002e8a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	22ca      	movs	r2, #202	; 0xca
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2253      	movs	r2, #83	; 0x53
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002dca:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d120      	bne.n	8002e1c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002dda:	f7fe f8d5 	bl	8000f88 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002de0:	e015      	b.n	8002e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002de2:	f7fe f8d1 	bl	8000f88 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df0:	d90d      	bls.n	8002e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e03d      	b.n	8002e8a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0e2      	beq.n	8002de2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 0107 	bic.w	r1, r3, #7
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e04d      	b.n	8002f4a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	22ca      	movs	r2, #202	; 0xca
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2253      	movs	r2, #83	; 0x53
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eec:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002eee:	f7fe f84b 	bl	8000f88 <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ef4:	e015      	b.n	8002f22 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ef6:	f7fe f847 	bl	8000f88 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f04:	d90d      	bls.n	8002f22 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2203      	movs	r2, #3
 8002f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e013      	b.n	8002f4a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e2      	beq.n	8002ef6 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	22ff      	movs	r2, #255	; 0xff
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f62:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f82:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fd fdcb 	bl	8000b20 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e049      	b.n	8003046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f841 	bl	800304e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 f9e4 	bl	80033ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d001      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e040      	b.n	80030fe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_TIM_Base_Start_IT+0xa8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x58>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d009      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x58>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_TIM_Base_Start_IT+0xac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x58>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_TIM_Base_Start_IT+0xb0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d115      	bne.n	80030e8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_TIM_Base_Start_IT+0xb4>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d015      	beq.n	80030fa <HAL_TIM_Base_Start_IT+0x96>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d011      	beq.n	80030fa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e6:	e008      	b.n	80030fa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e000      	b.n	80030fc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40014000 	.word	0x40014000
 8003118:	00010007 	.word	0x00010007

0800311c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0202 	mvn.w	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f905 	bl	800336e <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8f7 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f908 	bl	8003382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0204 	mvn.w	r2, #4
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8db 	bl	800336e <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8cd 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8de 	bl	8003382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8b1 	bl	800336e <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8a3 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8b4 	bl	8003382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f887 	bl	800336e <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f879 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f88a 	bl	8003382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0201 	mvn.w	r2, #1
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fc4c 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8e8 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032da:	d10e      	bne.n	80032fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8db 	bl	80034b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d10e      	bne.n	8003326 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d107      	bne.n	8003326 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f838 	bl	8003396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b20      	cmp	r3, #32
 8003332:	d10e      	bne.n	8003352 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d107      	bne.n	8003352 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f06f 0220 	mvn.w	r2, #32
 800334a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f89b 	bl	8003488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a2e      	ldr	r2, [pc, #184]	; (8003478 <TIM_Base_SetConfig+0xcc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_Base_SetConfig+0x28>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x28>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <TIM_Base_SetConfig+0xd0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a23      	ldr	r2, [pc, #140]	; (8003478 <TIM_Base_SetConfig+0xcc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <TIM_Base_SetConfig+0xd0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <TIM_Base_SetConfig+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <TIM_Base_SetConfig+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <TIM_Base_SetConfig+0xcc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TIM_Base_SetConfig+0xd4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <TIM_Base_SetConfig+0xd8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400

08003488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e040      	b.n	8003558 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fbd2 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	; 0x24
 80034f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f82c 	bl	8003560 <UART_SetConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 faa6 	bl	8003a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800352e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800353e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb2d 	bl	8003bb0 <UART_CheckIdleState>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	431a      	orrs	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	4313      	orrs	r3, r2
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4ba5      	ldr	r3, [pc, #660]	; (8003824 <UART_SetConfig+0x2c4>)
 8003590:	4013      	ands	r3, r2
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003598:	430b      	orrs	r3, r1
 800359a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9a      	ldr	r2, [pc, #616]	; (8003828 <UART_SetConfig+0x2c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	4313      	orrs	r3, r2
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a91      	ldr	r2, [pc, #580]	; (800382c <UART_SetConfig+0x2cc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d126      	bne.n	8003638 <UART_SetConfig+0xd8>
 80035ea:	4b91      	ldr	r3, [pc, #580]	; (8003830 <UART_SetConfig+0x2d0>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d81b      	bhi.n	8003630 <UART_SetConfig+0xd0>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UART_SetConfig+0xa0>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003621 	.word	0x08003621
 8003608:	08003619 	.word	0x08003619
 800360c:	08003629 	.word	0x08003629
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e0d6      	b.n	80037c6 <UART_SetConfig+0x266>
 8003618:	2302      	movs	r3, #2
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e0d2      	b.n	80037c6 <UART_SetConfig+0x266>
 8003620:	2304      	movs	r3, #4
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e0ce      	b.n	80037c6 <UART_SetConfig+0x266>
 8003628:	2308      	movs	r3, #8
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e0ca      	b.n	80037c6 <UART_SetConfig+0x266>
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e0c6      	b.n	80037c6 <UART_SetConfig+0x266>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a7d      	ldr	r2, [pc, #500]	; (8003834 <UART_SetConfig+0x2d4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d138      	bne.n	80036b4 <UART_SetConfig+0x154>
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <UART_SetConfig+0x2d0>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d82d      	bhi.n	80036ac <UART_SetConfig+0x14c>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0xf8>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036ad 	.word	0x080036ad
 8003664:	080036ad 	.word	0x080036ad
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036ad 	.word	0x080036ad
 8003674:	080036ad 	.word	0x080036ad
 8003678:	08003695 	.word	0x08003695
 800367c:	080036ad 	.word	0x080036ad
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036a5 	.word	0x080036a5
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e098      	b.n	80037c6 <UART_SetConfig+0x266>
 8003694:	2302      	movs	r3, #2
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e094      	b.n	80037c6 <UART_SetConfig+0x266>
 800369c:	2304      	movs	r3, #4
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e090      	b.n	80037c6 <UART_SetConfig+0x266>
 80036a4:	2308      	movs	r3, #8
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e08c      	b.n	80037c6 <UART_SetConfig+0x266>
 80036ac:	2310      	movs	r3, #16
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e088      	b.n	80037c6 <UART_SetConfig+0x266>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5f      	ldr	r2, [pc, #380]	; (8003838 <UART_SetConfig+0x2d8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d125      	bne.n	800370a <UART_SetConfig+0x1aa>
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <UART_SetConfig+0x2d0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d016      	beq.n	80036fa <UART_SetConfig+0x19a>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d818      	bhi.n	8003702 <UART_SetConfig+0x1a2>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d00a      	beq.n	80036ea <UART_SetConfig+0x18a>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d814      	bhi.n	8003702 <UART_SetConfig+0x1a2>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <UART_SetConfig+0x182>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d008      	beq.n	80036f2 <UART_SetConfig+0x192>
 80036e0:	e00f      	b.n	8003702 <UART_SetConfig+0x1a2>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e8:	e06d      	b.n	80037c6 <UART_SetConfig+0x266>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f0:	e069      	b.n	80037c6 <UART_SetConfig+0x266>
 80036f2:	2304      	movs	r3, #4
 80036f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f8:	e065      	b.n	80037c6 <UART_SetConfig+0x266>
 80036fa:	2308      	movs	r3, #8
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003700:	e061      	b.n	80037c6 <UART_SetConfig+0x266>
 8003702:	2310      	movs	r3, #16
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003708:	e05d      	b.n	80037c6 <UART_SetConfig+0x266>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a4b      	ldr	r2, [pc, #300]	; (800383c <UART_SetConfig+0x2dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d125      	bne.n	8003760 <UART_SetConfig+0x200>
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <UART_SetConfig+0x2d0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800371e:	2bc0      	cmp	r3, #192	; 0xc0
 8003720:	d016      	beq.n	8003750 <UART_SetConfig+0x1f0>
 8003722:	2bc0      	cmp	r3, #192	; 0xc0
 8003724:	d818      	bhi.n	8003758 <UART_SetConfig+0x1f8>
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d00a      	beq.n	8003740 <UART_SetConfig+0x1e0>
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d814      	bhi.n	8003758 <UART_SetConfig+0x1f8>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x1d8>
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d008      	beq.n	8003748 <UART_SetConfig+0x1e8>
 8003736:	e00f      	b.n	8003758 <UART_SetConfig+0x1f8>
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e042      	b.n	80037c6 <UART_SetConfig+0x266>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e03e      	b.n	80037c6 <UART_SetConfig+0x266>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e03a      	b.n	80037c6 <UART_SetConfig+0x266>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e036      	b.n	80037c6 <UART_SetConfig+0x266>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e032      	b.n	80037c6 <UART_SetConfig+0x266>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <UART_SetConfig+0x2c8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12a      	bne.n	80037c0 <UART_SetConfig+0x260>
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <UART_SetConfig+0x2d0>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003778:	d01a      	beq.n	80037b0 <UART_SetConfig+0x250>
 800377a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800377e:	d81b      	bhi.n	80037b8 <UART_SetConfig+0x258>
 8003780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003784:	d00c      	beq.n	80037a0 <UART_SetConfig+0x240>
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d815      	bhi.n	80037b8 <UART_SetConfig+0x258>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <UART_SetConfig+0x238>
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d008      	beq.n	80037a8 <UART_SetConfig+0x248>
 8003796:	e00f      	b.n	80037b8 <UART_SetConfig+0x258>
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e012      	b.n	80037c6 <UART_SetConfig+0x266>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e00e      	b.n	80037c6 <UART_SetConfig+0x266>
 80037a8:	2304      	movs	r3, #4
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e00a      	b.n	80037c6 <UART_SetConfig+0x266>
 80037b0:	2308      	movs	r3, #8
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e006      	b.n	80037c6 <UART_SetConfig+0x266>
 80037b8:	2310      	movs	r3, #16
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e002      	b.n	80037c6 <UART_SetConfig+0x266>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <UART_SetConfig+0x2c8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	f040 808b 	bne.w	80038e8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d834      	bhi.n	8003844 <UART_SetConfig+0x2e4>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x280>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003845 	.word	0x08003845
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	08003845 	.word	0x08003845
 80037f0:	08003813 	.word	0x08003813
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003845 	.word	0x08003845
 8003800:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7fe fd76 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003808:	61f8      	str	r0, [r7, #28]
        break;
 800380a:	e021      	b.n	8003850 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <UART_SetConfig+0x2e0>)
 800380e:	61fb      	str	r3, [r7, #28]
        break;
 8003810:	e01e      	b.n	8003850 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fcd7 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003816:	61f8      	str	r0, [r7, #28]
        break;
 8003818:	e01a      	b.n	8003850 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e016      	b.n	8003850 <UART_SetConfig+0x2f0>
 8003822:	bf00      	nop
 8003824:	efff69f3 	.word	0xefff69f3
 8003828:	40008000 	.word	0x40008000
 800382c:	40013800 	.word	0x40013800
 8003830:	40021000 	.word	0x40021000
 8003834:	40004400 	.word	0x40004400
 8003838:	40004800 	.word	0x40004800
 800383c:	40004c00 	.word	0x40004c00
 8003840:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800384e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80fa 	beq.w	8003a4c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	d305      	bcc.n	8003874 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	429a      	cmp	r2, r3
 8003872:	d903      	bls.n	800387c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800387a:	e0e7      	b.n	8003a4c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2200      	movs	r2, #0
 8003880:	461c      	mov	r4, r3
 8003882:	4615      	mov	r5, r2
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	022b      	lsls	r3, r5, #8
 800388e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003892:	0222      	lsls	r2, r4, #8
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	6849      	ldr	r1, [r1, #4]
 8003898:	0849      	lsrs	r1, r1, #1
 800389a:	2000      	movs	r0, #0
 800389c:	4688      	mov	r8, r1
 800389e:	4681      	mov	r9, r0
 80038a0:	eb12 0a08 	adds.w	sl, r2, r8
 80038a4:	eb43 0b09 	adc.w	fp, r3, r9
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b6:	4650      	mov	r0, sl
 80038b8:	4659      	mov	r1, fp
 80038ba:	f7fc fdb5 	bl	8000428 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4613      	mov	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038cc:	d308      	bcc.n	80038e0 <UART_SetConfig+0x380>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d4:	d204      	bcs.n	80038e0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	e0b5      	b.n	8003a4c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e6:	e0b1      	b.n	8003a4c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f0:	d15d      	bne.n	80039ae <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80038f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d827      	bhi.n	800394a <UART_SetConfig+0x3ea>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0x3a0>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003925 	.word	0x08003925
 8003904:	0800392d 	.word	0x0800392d
 8003908:	08003935 	.word	0x08003935
 800390c:	0800394b 	.word	0x0800394b
 8003910:	0800393b 	.word	0x0800393b
 8003914:	0800394b 	.word	0x0800394b
 8003918:	0800394b 	.word	0x0800394b
 800391c:	0800394b 	.word	0x0800394b
 8003920:	08003943 	.word	0x08003943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe fce6 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003928:	61f8      	str	r0, [r7, #28]
        break;
 800392a:	e014      	b.n	8003956 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7fe fcf8 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8003930:	61f8      	str	r0, [r7, #28]
        break;
 8003932:	e010      	b.n	8003956 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <UART_SetConfig+0x508>)
 8003936:	61fb      	str	r3, [r7, #28]
        break;
 8003938:	e00d      	b.n	8003956 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393a:	f7fe fc43 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800393e:	61f8      	str	r0, [r7, #28]
        break;
 8003940:	e009      	b.n	8003956 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003946:	61fb      	str	r3, [r7, #28]
        break;
 8003948:	e005      	b.n	8003956 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d077      	beq.n	8003a4c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005a      	lsls	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d916      	bls.n	80039a6 <UART_SetConfig+0x446>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d212      	bcs.n	80039a6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f023 030f 	bic.w	r3, r3, #15
 8003988:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	b29b      	uxth	r3, r3
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	b29a      	uxth	r2, r3
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	4313      	orrs	r3, r2
 800399a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	8afa      	ldrh	r2, [r7, #22]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e052      	b.n	8003a4c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039ac:	e04e      	b.n	8003a4c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d827      	bhi.n	8003a06 <UART_SetConfig+0x4a6>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x45c>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a07 	.word	0x08003a07
 80039cc:	080039f7 	.word	0x080039f7
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
 80039dc:	080039ff 	.word	0x080039ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fc88 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 80039e4:	61f8      	str	r0, [r7, #28]
        break;
 80039e6:	e014      	b.n	8003a12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7fe fc9a 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 80039ec:	61f8      	str	r0, [r7, #28]
        break;
 80039ee:	e010      	b.n	8003a12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <UART_SetConfig+0x508>)
 80039f2:	61fb      	str	r3, [r7, #28]
        break;
 80039f4:	e00d      	b.n	8003a12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f6:	f7fe fbe5 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80039fa:	61f8      	str	r0, [r7, #28]
        break;
 80039fc:	e009      	b.n	8003a12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a02:	61fb      	str	r3, [r7, #28]
        break;
 8003a04:	e005      	b.n	8003a12 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a10:	bf00      	nop
    }

    if (pclk != 0U)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	085a      	lsrs	r2, r3, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	441a      	add	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	d909      	bls.n	8003a46 <UART_SetConfig+0x4e6>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d205      	bcs.n	8003a46 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	e002      	b.n	8003a4c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a66:	bf00      	nop
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d10a      	bne.n	8003b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc0:	f7fd f9e2 	bl	8000f88 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d10e      	bne.n	8003bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f82d 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e023      	b.n	8003c3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d10e      	bne.n	8003c1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f817 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e00d      	b.n	8003c3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b09c      	sub	sp, #112	; 0x70
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	e0a5      	b.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	f000 80a1 	beq.w	8003da0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fd f993 	bl	8000f88 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d13e      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c88:	667b      	str	r3, [r7, #100]	; 0x64
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e6      	bne.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e067      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d04f      	beq.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0e:	d147      	bne.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d6c:	623a      	str	r2, [r7, #32]
 8003d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	69f9      	ldr	r1, [r7, #28]
 8003d72:	6a3a      	ldr	r2, [r7, #32]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e010      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4013      	ands	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f43f af4a 	beq.w	8003c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3770      	adds	r7, #112	; 0x70
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b096      	sub	sp, #88	; 0x58
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003dda:	2234      	movs	r2, #52	; 0x34
 8003ddc:	2100      	movs	r1, #0
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f002 fb2e 	bl	8006440 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1a3 0208 	sub.w	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2202      	movs	r2, #2
 8003e18:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3b04      	subs	r3, #4
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8003e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e38:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	3b04      	subs	r3, #4
 8003e3e:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <_tx_byte_pool_create+0x214>)
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8003e7a:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e7c:	b672      	cpsid	i
#endif
    return(int_posture);
 8003e7e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a57      	ldr	r2, [pc, #348]	; (8003fe4 <_tx_byte_pool_create+0x218>)
 8003e86:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <_tx_byte_pool_create+0x21c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003e90:	4a56      	ldr	r2, [pc, #344]	; (8003fec <_tx_byte_pool_create+0x220>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea2:	e011      	b.n	8003ec8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8003ea4:	4b51      	ldr	r3, [pc, #324]	; (8003fec <_tx_byte_pool_create+0x220>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8003ec8:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <_tx_byte_pool_create+0x21c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	4a46      	ldr	r2, [pc, #280]	; (8003fe8 <_tx_byte_pool_create+0x21c>)
 8003ed0:	6013      	str	r3, [r2, #0]
    
    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	2008      	movs	r0, #8
 8003ede:	f001 fea7 	bl	8005c30 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <_tx_byte_pool_create+0x224>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d06c      	beq.n	8003fc8 <_tx_byte_pool_create+0x1fc>
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <_tx_byte_pool_create+0x228>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d066      	beq.n	8003fc8 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003efa:	f3ef 8305 	mrs	r3, IPSR
 8003efe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <_tx_byte_pool_create+0x22c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <_tx_byte_pool_create+0x230>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <_tx_byte_pool_create+0x162>
 8003f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	e00e      	b.n	8003f4c <_tx_byte_pool_create+0x180>
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003f34:	d205      	bcs.n	8003f42 <_tx_byte_pool_create+0x176>
 8003f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f40:	e004      	b.n	8003f4c <_tx_byte_pool_create+0x180>
 8003f42:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2215      	movs	r2, #21
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <_tx_byte_pool_create+0x234>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	611a      	str	r2, [r3, #16]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	615a      	str	r2, [r3, #20]
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	619a      	str	r2, [r3, #24]
 8003f78:	f107 0214 	add.w	r2, r7, #20
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	61da      	str	r2, [r3, #28]
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	3320      	adds	r3, #32
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f86:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <_tx_byte_pool_create+0x238>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d314      	bcc.n	8003fba <_tx_byte_pool_create+0x1ee>
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <_tx_byte_pool_create+0x23c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f96:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <_tx_byte_pool_create+0x224>)
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <_tx_byte_pool_create+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa2:	621a      	str	r2, [r3, #32]
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <_tx_byte_pool_create+0x244>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <_tx_byte_pool_create+0x1fc>
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <_tx_byte_pool_create+0x244>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a16      	ldr	r2, [pc, #88]	; (800400c <_tx_byte_pool_create+0x240>)
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4798      	blx	r3
 8003fb8:	e006      	b.n	8003fc8 <_tx_byte_pool_create+0x1fc>
 8003fba:	4a0d      	ldr	r2, [pc, #52]	; (8003ff0 <_tx_byte_pool_create+0x224>)
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <_tx_byte_pool_create+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc6:	621a      	str	r2, [r3, #32]
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f383 8810 	msr	PRIMASK, r3
}
 8003fd2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3750      	adds	r7, #80	; 0x50
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	ffffeeee 	.word	0xffffeeee
 8003fe4:	42595445 	.word	0x42595445
 8003fe8:	200048ec 	.word	0x200048ec
 8003fec:	200048e8 	.word	0x200048e8
 8003ff0:	20004f14 	.word	0x20004f14
 8003ff4:	20004f18 	.word	0x20004f18
 8003ff8:	20003e8c 	.word	0x20003e8c
 8003ffc:	200048f8 	.word	0x200048f8
 8004000:	e0001004 	.word	0xe0001004
 8004004:	20004f10 	.word	0x20004f10
 8004008:	20004f0c 	.word	0x20004f0c
 800400c:	20004f00 	.word	0x20004f00
 8004010:	20004f1c 	.word	0x20004f1c

08004014 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8004018:	f001 fde4 	bl	8005be4 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800401c:	f000 f9ec 	bl	80043f8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004020:	f001 f898 	bl	8005154 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <_tx_initialize_high_level+0x5c>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <_tx_initialize_high_level+0x60>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <_tx_initialize_high_level+0x64>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <_tx_initialize_high_level+0x68>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_tx_initialize_high_level+0x6c>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <_tx_initialize_high_level+0x70>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <_tx_initialize_high_level+0x74>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <_tx_initialize_high_level+0x78>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <_tx_initialize_high_level+0x7c>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <_tx_initialize_high_level+0x80>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <_tx_initialize_high_level+0x84>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <_tx_initialize_high_level+0x88>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
#endif
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200048c0 	.word	0x200048c0
 8004074:	200048c4 	.word	0x200048c4
 8004078:	200048c8 	.word	0x200048c8
 800407c:	200048cc 	.word	0x200048cc
 8004080:	200048d0 	.word	0x200048d0
 8004084:	200048d4 	.word	0x200048d4
 8004088:	200048e0 	.word	0x200048e0
 800408c:	200048e4 	.word	0x200048e4
 8004090:	200048e8 	.word	0x200048e8
 8004094:	200048ec 	.word	0x200048ec
 8004098:	200048d8 	.word	0x200048d8
 800409c:	200048dc 	.word	0x200048dc

080040a0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <_tx_initialize_kernel_enter+0x48>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80040ac:	d00c      	beq.n	80040c8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <_tx_initialize_kernel_enter+0x48>)
 80040b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80040b4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80040b6:	f7fc f893 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80040ba:	f7ff ffab 	bl	8004014 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <_tx_initialize_kernel_enter+0x4c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <_tx_initialize_kernel_enter+0x4c>)
 80040c6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <_tx_initialize_kernel_enter+0x48>)
 80040ca:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80040ce:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <_tx_initialize_kernel_enter+0x50>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc fb29 	bl	800072c <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80040da:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <_tx_initialize_kernel_enter+0x48>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80040e0:	f7fc f8be 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20003e8c 	.word	0x20003e8c
 80040ec:	20004990 	.word	0x20004990
 80040f0:	200048f0 	.word	0x200048f0

080040f4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b09a      	sub	sp, #104	; 0x68
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004102:	2300      	movs	r3, #0
 8004104:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004106:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004108:	21ef      	movs	r1, #239	; 0xef
 800410a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800410c:	f002 f998 	bl	8006440 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004110:	22b0      	movs	r2, #176	; 0xb0
 8004112:	2100      	movs	r1, #0
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f002 f993 	bl	8006440 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004130:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004136:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004142:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800414a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004150:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800415a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	3b01      	subs	r3, #1
 8004162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004164:	4413      	add	r3, r2
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800416c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800416e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004172:	429a      	cmp	r2, r3
 8004174:	d007      	beq.n	8004186 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004184:	e006      	b.n	8004194 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004190:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2203      	movs	r2, #3
 8004198:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a86      	ldr	r2, [pc, #536]	; (80043b8 <_tx_thread_create+0x2c4>)
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80041a6:	4985      	ldr	r1, [pc, #532]	; (80043bc <_tx_thread_create+0x2c8>)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fc f8c1 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80041b8:	b672      	cpsid	i
    return(int_posture);
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a7f      	ldr	r2, [pc, #508]	; (80043c0 <_tx_thread_create+0x2cc>)
 80041c2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80041c4:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <_tx_thread_create+0x2d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80041cc:	4a7e      	ldr	r2, [pc, #504]	; (80043c8 <_tx_thread_create+0x2d4>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80041e2:	e016      	b.n	8004212 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80041e4:	4b78      	ldr	r3, [pc, #480]	; (80043c8 <_tx_thread_create+0x2d4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80041f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800420e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004212:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <_tx_thread_create+0x2d0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	4a6a      	ldr	r2, [pc, #424]	; (80043c4 <_tx_thread_create+0x2d0>)
 800421a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800421c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	2001      	movs	r0, #1
 800422a:	f001 fd01 	bl	8005c30 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <_tx_thread_create+0x2d8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d06b      	beq.n	8004312 <_tx_thread_create+0x21e>
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <_tx_thread_create+0x2dc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d065      	beq.n	8004312 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004246:	f3ef 8305 	mrs	r3, IPSR
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424e:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <_tx_thread_create+0x2e0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
 8004256:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <_tx_thread_create+0x2e4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <_tx_thread_create+0x186>
 8004262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	657b      	str	r3, [r7, #84]	; 0x54
 8004268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	041a      	lsls	r2, r3, #16
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	4313      	orrs	r3, r2
 8004272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
 8004278:	e00e      	b.n	8004298 <_tx_thread_create+0x1a4>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004280:	d205      	bcs.n	800428e <_tx_thread_create+0x19a>
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	657b      	str	r3, [r7, #84]	; 0x54
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	653b      	str	r3, [r7, #80]	; 0x50
 800428c:	e004      	b.n	8004298 <_tx_thread_create+0x1a4>
 800428e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004292:	653b      	str	r3, [r7, #80]	; 0x50
 8004294:	2300      	movs	r3, #0
 8004296:	657b      	str	r3, [r7, #84]	; 0x54
 8004298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a6:	2264      	movs	r2, #100	; 0x64
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <_tx_thread_create+0x2e8>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b6:	611a      	str	r2, [r3, #16]
 80042b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80042bc:	615a      	str	r2, [r3, #20]
 80042be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	619a      	str	r2, [r3, #24]
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042c8:	61da      	str	r2, [r3, #28]
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	3320      	adds	r3, #32
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <_tx_thread_create+0x2ec>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d314      	bcc.n	8004304 <_tx_thread_create+0x210>
 80042da:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <_tx_thread_create+0x2f0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <_tx_thread_create+0x2d8>)
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <_tx_thread_create+0x2f4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ec:	621a      	str	r2, [r3, #32]
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <_tx_thread_create+0x2f8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <_tx_thread_create+0x21e>
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <_tx_thread_create+0x2f8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <_tx_thread_create+0x2f4>)
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	4610      	mov	r0, r2
 8004300:	4798      	blx	r3
 8004302:	e006      	b.n	8004312 <_tx_thread_create+0x21e>
 8004304:	4a31      	ldr	r2, [pc, #196]	; (80043cc <_tx_thread_create+0x2d8>)
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <_tx_thread_create+0x2f4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004310:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <_tx_thread_create+0x2fc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4a35      	ldr	r2, [pc, #212]	; (80043f0 <_tx_thread_create+0x2fc>)
 800431a:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800431c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d129      	bne.n	8004376 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004322:	f3ef 8305 	mrs	r3, IPSR
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004328:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <_tx_thread_create+0x2e0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004334:	d30d      	bcc.n	8004352 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <_tx_thread_create+0x300>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800433c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <_tx_thread_create+0x262>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004350:	e001      	b.n	8004356 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	f383 8810 	msr	PRIMASK, r3
}
 8004360:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa0e 	bl	8004784 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01e      	beq.n	80043ac <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800436e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
 8004374:	e01a      	b.n	80043ac <_tx_thread_create+0x2b8>
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004382:	f3ef 8310 	mrs	r3, PRIMASK
 8004386:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004388:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800438a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800438c:	b672      	cpsid	i
    return(int_posture);
 800438e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004390:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <_tx_thread_create+0x2fc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <_tx_thread_create+0x2fc>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80043a8:	f000 f9b2 	bl	8004710 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3760      	adds	r7, #96	; 0x60
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	08005099 	.word	0x08005099
 80043bc:	08004475 	.word	0x08004475
 80043c0:	54485244 	.word	0x54485244
 80043c4:	20004904 	.word	0x20004904
 80043c8:	20004900 	.word	0x20004900
 80043cc:	20004f14 	.word	0x20004f14
 80043d0:	20004f18 	.word	0x20004f18
 80043d4:	20003e8c 	.word	0x20003e8c
 80043d8:	200048f8 	.word	0x200048f8
 80043dc:	e0001004 	.word	0xe0001004
 80043e0:	20004f10 	.word	0x20004f10
 80043e4:	20004f0c 	.word	0x20004f0c
 80043e8:	20004f00 	.word	0x20004f00
 80043ec:	20004f1c 	.word	0x20004f1c
 80043f0:	20004990 	.word	0x20004990
 80043f4:	200048fc 	.word	0x200048fc

080043f8 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <_tx_thread_initialize+0x54>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <_tx_thread_initialize+0x58>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <_tx_thread_initialize+0x5c>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <_tx_thread_initialize+0x60>)
 8004410:	2220      	movs	r2, #32
 8004412:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	2100      	movs	r1, #0
 8004418:	4810      	ldr	r0, [pc, #64]	; (800445c <_tx_thread_initialize+0x64>)
 800441a:	f002 f811 	bl	8006440 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <_tx_thread_initialize+0x68>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <_tx_thread_initialize+0x6c>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <_tx_thread_initialize+0x70>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <_tx_thread_initialize+0x74>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <_tx_thread_initialize+0x78>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800443e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <_tx_thread_initialize+0x78>)
 8004444:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200048f8 	.word	0x200048f8
 8004450:	200048fc 	.word	0x200048fc
 8004454:	20004908 	.word	0x20004908
 8004458:	2000490c 	.word	0x2000490c
 800445c:	20004910 	.word	0x20004910
 8004460:	20004900 	.word	0x20004900
 8004464:	20004904 	.word	0x20004904
 8004468:	20004990 	.word	0x20004990
 800446c:	20004994 	.word	0x20004994
 8004470:	20004998 	.word	0x20004998

08004474 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <_tx_thread_shell_entry+0x8c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004488:	4610      	mov	r0, r2
 800448a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <_tx_thread_shell_entry+0x90>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <_tx_thread_shell_entry+0x90>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69f8      	ldr	r0, [r7, #28]
 800449a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800449c:	f3ef 8310 	mrs	r3, PRIMASK
 80044a0:	607b      	str	r3, [r7, #4]
    return(posture);
 80044a2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80044a4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80044a6:	b672      	cpsid	i
    return(int_posture);
 80044a8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80044aa:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2201      	movs	r2, #1
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2201      	movs	r2, #1
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2200      	movs	r2, #0
 80044bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <_tx_thread_shell_entry+0x94>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a10      	ldr	r2, [pc, #64]	; (8004508 <_tx_thread_shell_entry+0x94>)
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80044d4:	f3ef 8314 	mrs	r3, CONTROL
 80044d8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80044da:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f383 8814 	msr	CONTROL, r3
}
 80044f0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80044f2:	69f8      	ldr	r0, [r7, #28]
 80044f4:	f000 fb00 	bl	8004af8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80044f8:	bf00      	nop
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200048f8 	.word	0x200048f8
 8004504:	20004994 	.word	0x20004994
 8004508:	20004990 	.word	0x20004990

0800450c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	; 0x50
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004514:	f3ef 8310 	mrs	r3, PRIMASK
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800451e:	b672      	cpsid	i
    return(int_posture);
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004522:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <_tx_thread_sleep+0x1d8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800452a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <_tx_thread_sleep+0x36>
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800453c:	2313      	movs	r3, #19
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e0ca      	b.n	80046d8 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004542:	f3ef 8305 	mrs	r3, IPSR
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004548:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800454a:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <_tx_thread_sleep+0x1dc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <_tx_thread_sleep+0x5a>
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004560:	2313      	movs	r3, #19
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e0b8      	b.n	80046d8 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	4a60      	ldr	r2, [pc, #384]	; (80046ec <_tx_thread_sleep+0x1e0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <_tx_thread_sleep+0x74>
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800457a:	2313      	movs	r3, #19
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e0ab      	b.n	80046d8 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <_tx_thread_sleep+0x8c>
 8004586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004588:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e09f      	b.n	80046d8 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004598:	4b55      	ldr	r3, [pc, #340]	; (80046f0 <_tx_thread_sleep+0x1e4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <_tx_thread_sleep+0xa6>
 80045a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80045ac:	2313      	movs	r3, #19
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e092      	b.n	80046d8 <_tx_thread_sleep+0x1cc>
        }
        else
        {
        
            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 80045b2:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <_tx_thread_sleep+0x1e8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d06d      	beq.n	800469a <_tx_thread_sleep+0x18e>
 80045be:	4b4e      	ldr	r3, [pc, #312]	; (80046f8 <_tx_thread_sleep+0x1ec>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d067      	beq.n	800469a <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <_tx_thread_sleep+0x1dc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045da:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <_tx_thread_sleep+0x1d8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <_tx_thread_sleep+0xf2>
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	041a      	lsls	r2, r3, #16
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	e00e      	b.n	800461c <_tx_thread_sleep+0x110>
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004604:	d205      	bcs.n	8004612 <_tx_thread_sleep+0x106>
 8004606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004610:	e004      	b.n	800461c <_tx_thread_sleep+0x110>
 8004612:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48
 8004618:	2300      	movs	r3, #0
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462a:	2270      	movs	r2, #112	; 0x70
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	4b33      	ldr	r3, [pc, #204]	; (80046fc <_tx_thread_sleep+0x1f0>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	611a      	str	r2, [r3, #16]
 800463c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004642:	615a      	str	r2, [r3, #20]
 8004644:	f107 020c 	add.w	r2, r7, #12
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	619a      	str	r2, [r3, #24]
 800464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004654:	3320      	adds	r3, #32
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <_tx_thread_sleep+0x1f4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800465e:	429a      	cmp	r2, r3
 8004660:	d314      	bcc.n	800468c <_tx_thread_sleep+0x180>
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <_tx_thread_sleep+0x1f8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004668:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <_tx_thread_sleep+0x1e8>)
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <_tx_thread_sleep+0x1fc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004674:	621a      	str	r2, [r3, #32]
 8004676:	4b25      	ldr	r3, [pc, #148]	; (800470c <_tx_thread_sleep+0x200>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <_tx_thread_sleep+0x18e>
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <_tx_thread_sleep+0x200>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a21      	ldr	r2, [pc, #132]	; (8004708 <_tx_thread_sleep+0x1fc>)
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4610      	mov	r0, r2
 8004688:	4798      	blx	r3
 800468a:	e006      	b.n	800469a <_tx_thread_sleep+0x18e>
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <_tx_thread_sleep+0x1e8>)
 800468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <_tx_thread_sleep+0x1fc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004698:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	2204      	movs	r2, #4
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	2201      	movs	r2, #1
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80046ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <_tx_thread_sleep+0x1e4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <_tx_thread_sleep+0x1e4>)
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80046ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046cc:	f000 fa14 	bl	8004af8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	60fb      	str	r3, [r7, #12]
        }
    }
    
    /* Return completion status.  */
    return(status);
 80046d8:	68fb      	ldr	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3750      	adds	r7, #80	; 0x50
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200048f8 	.word	0x200048f8
 80046e8:	20003e8c 	.word	0x20003e8c
 80046ec:	20004a40 	.word	0x20004a40
 80046f0:	20004990 	.word	0x20004990
 80046f4:	20004f14 	.word	0x20004f14
 80046f8:	20004f18 	.word	0x20004f18
 80046fc:	e0001004 	.word	0xe0001004
 8004700:	20004f10 	.word	0x20004f10
 8004704:	20004f0c 	.word	0x20004f0c
 8004708:	20004f00 	.word	0x20004f00
 800470c:	20004f1c 	.word	0x20004f1c

08004710 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004716:	4b17      	ldr	r3, [pc, #92]	; (8004774 <_tx_thread_system_preempt_check+0x64>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d121      	bne.n	8004766 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <_tx_thread_system_preempt_check+0x68>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <_tx_thread_system_preempt_check+0x6c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d017      	beq.n	8004766 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <_tx_thread_system_preempt_check+0x70>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004744:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800474a:	f3ef 8310 	mrs	r3, PRIMASK
 800474e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004750:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004752:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004754:	b662      	cpsie	i
}
 8004756:	bf00      	nop
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004764:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004766:	bf00      	nop
 8004768:	3724      	adds	r7, #36	; 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20004990 	.word	0x20004990
 8004778:	200048f8 	.word	0x200048f8
 800477c:	200048fc 	.word	0x200048fc
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b09e      	sub	sp, #120	; 0x78
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800478c:	2300      	movs	r3, #0
 800478e:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004790:	f3ef 8310 	mrs	r3, PRIMASK
 8004794:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800479a:	b672      	cpsid	i
    return(int_posture);
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	334c      	adds	r3, #76	; 0x4c
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fdaf 	bl	8005310 <_tx_timer_system_deactivate>
 80047b2:	e002      	b.n	80047ba <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 80047ba:	4b8b      	ldr	r3, [pc, #556]	; (80049e8 <_tx_thread_system_resume+0x264>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80047c0:	4b89      	ldr	r3, [pc, #548]	; (80049e8 <_tx_thread_system_resume+0x264>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	663b      	str	r3, [r7, #96]	; 0x60
 80047c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d06f      	beq.n	80048ac <_tx_thread_system_resume+0x128>
 80047cc:	4b87      	ldr	r3, [pc, #540]	; (80049ec <_tx_thread_system_resume+0x268>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d069      	beq.n	80048ac <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 80047de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047e0:	4b83      	ldr	r3, [pc, #524]	; (80049f0 <_tx_thread_system_resume+0x26c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e8:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <_tx_thread_system_resume+0x270>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <_tx_thread_system_resume+0x88>
 80047f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	673b      	str	r3, [r7, #112]	; 0x70
 80047fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	041a      	lsls	r2, r3, #16
 8004800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004808:	673b      	str	r3, [r7, #112]	; 0x70
 800480a:	e00e      	b.n	800482a <_tx_thread_system_resume+0xa6>
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004812:	d205      	bcs.n	8004820 <_tx_thread_system_resume+0x9c>
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	673b      	str	r3, [r7, #112]	; 0x70
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800481e:	e004      	b.n	800482a <_tx_thread_system_resume+0xa6>
 8004820:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004826:	2300      	movs	r3, #0
 8004828:	673b      	str	r3, [r7, #112]	; 0x70
 800482a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800482c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004838:	2201      	movs	r2, #1
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	4b6e      	ldr	r3, [pc, #440]	; (80049f8 <_tx_thread_system_resume+0x274>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004848:	611a      	str	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	f107 020c 	add.w	r2, r7, #12
 8004856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	4b68      	ldr	r3, [pc, #416]	; (80049fc <_tx_thread_system_resume+0x278>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004862:	61da      	str	r2, [r3, #28]
 8004864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004866:	3320      	adds	r3, #32
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <_tx_thread_system_resume+0x27c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004870:	429a      	cmp	r2, r3
 8004872:	d314      	bcc.n	800489e <_tx_thread_system_resume+0x11a>
 8004874:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <_tx_thread_system_resume+0x280>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	4a5b      	ldr	r2, [pc, #364]	; (80049e8 <_tx_thread_system_resume+0x264>)
 800487c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b61      	ldr	r3, [pc, #388]	; (8004a08 <_tx_thread_system_resume+0x284>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004886:	621a      	str	r2, [r3, #32]
 8004888:	4b60      	ldr	r3, [pc, #384]	; (8004a0c <_tx_thread_system_resume+0x288>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <_tx_thread_system_resume+0x128>
 8004890:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <_tx_thread_system_resume+0x288>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5c      	ldr	r2, [pc, #368]	; (8004a08 <_tx_thread_system_resume+0x284>)
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	4610      	mov	r0, r2
 800489a:	4798      	blx	r3
 800489c:	e006      	b.n	80048ac <_tx_thread_system_resume+0x128>
 800489e:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <_tx_thread_system_resume+0x264>)
 80048a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4b58      	ldr	r3, [pc, #352]	; (8004a08 <_tx_thread_system_resume+0x284>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048aa:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have 
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 80048ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 80048b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80048b8:	4b55      	ldr	r3, [pc, #340]	; (8004a10 <_tx_thread_system_resume+0x28c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <_tx_thread_system_resume+0x28c>)
 80048c0:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80b3 	bne.w	8004a32 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80c7 	beq.w	8004a64 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 80a2 	bne.w	8004a24 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80048ec:	4a49      	ldr	r2, [pc, #292]	; (8004a14 <_tx_thread_system_resume+0x290>)
 80048ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f4:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 80048f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d164      	bne.n	80049c6 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80048fc:	4945      	ldr	r1, [pc, #276]	; (8004a14 <_tx_thread_system_resume+0x290>)
 80048fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004912:	2201      	movs	r2, #1
 8004914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800491c:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <_tx_thread_system_resume+0x294>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004922:	4313      	orrs	r3, r2
 8004924:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <_tx_thread_system_resume+0x294>)
 8004926:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004928:	4b3c      	ldr	r3, [pc, #240]	; (8004a1c <_tx_thread_system_resume+0x298>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800492e:	429a      	cmp	r2, r3
 8004930:	f080 8098 	bcs.w	8004a64 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004934:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <_tx_thread_system_resume+0x298>)
 8004936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004938:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <_tx_thread_system_resume+0x278>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004946:	4a2d      	ldr	r2, [pc, #180]	; (80049fc <_tx_thread_system_resume+0x278>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e08a      	b.n	8004a64 <_tx_thread_system_resume+0x2e0>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004954:	429a      	cmp	r2, r3
 8004956:	f080 8085 	bcs.w	8004a64 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800495a:	4a28      	ldr	r2, [pc, #160]	; (80049fc <_tx_thread_system_resume+0x278>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <_tx_thread_system_resume+0x1f6>
                                {
    
                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800496c:	429a      	cmp	r2, r3
 800496e:	d104      	bne.n	800497a <_tx_thread_system_resume+0x1f6>
                                    {
        
                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004970:	4b22      	ldr	r3, [pc, #136]	; (80049fc <_tx_thread_system_resume+0x278>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004978:	61da      	str	r2, [r3, #28]
 800497a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <_tx_thread_system_resume+0x28c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80a1 	bne.w	8004ad6 <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <_tx_thread_system_resume+0x29c>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800499c:	f3ef 8305 	mrs	r3, IPSR
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 8098 	bne.w	8004ada <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 80049b4:	b662      	cpsie	i
}
 80049b6:	bf00      	nop
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	bf00      	nop
}
 80049c4:	e089      	b.n	8004ada <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80049c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80049cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049e2:	621a      	str	r2, [r3, #32]
 80049e4:	e03e      	b.n	8004a64 <_tx_thread_system_resume+0x2e0>
 80049e6:	bf00      	nop
 80049e8:	20004f14 	.word	0x20004f14
 80049ec:	20004f18 	.word	0x20004f18
 80049f0:	20003e8c 	.word	0x20003e8c
 80049f4:	200048f8 	.word	0x200048f8
 80049f8:	e0001004 	.word	0xe0001004
 80049fc:	200048fc 	.word	0x200048fc
 8004a00:	20004f10 	.word	0x20004f10
 8004a04:	20004f0c 	.word	0x20004f0c
 8004a08:	20004f00 	.word	0x20004f00
 8004a0c:	20004f1c 	.word	0x20004f1c
 8004a10:	20004990 	.word	0x20004990
 8004a14:	20004910 	.word	0x20004910
 8004a18:	20004908 	.word	0x20004908
 8004a1c:	2000490c 	.word	0x2000490c
 8004a20:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a30:	e018      	b.n	8004a64 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d014      	beq.n	8004a64 <_tx_thread_system_resume+0x2e0>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d010      	beq.n	8004a64 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
 8004a56:	e005      	b.n	8004a64 <_tx_thread_system_resume+0x2e0>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8004a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <_tx_thread_system_resume+0x2fa>
    {
    
        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d104      	bne.n	8004a7e <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <_tx_thread_system_resume+0x364>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7c:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <_tx_thread_system_resume+0x368>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
 8004a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	f383 8810 	msr	PRIMASK, r3
}
 8004a8e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <_tx_thread_system_resume+0x364>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d022      	beq.n	8004ae0 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <_tx_thread_system_resume+0x36c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8004aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11c      	bne.n	8004ae0 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <_tx_thread_system_resume+0x370>)
 8004aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aac:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aae:	f3ef 8305 	mrs	r3, IPSR
 8004ab2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d111      	bne.n	8004ade <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004aba:	f3ef 8310 	mrs	r3, PRIMASK
 8004abe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8004ac2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004ac4:	b662      	cpsie	i
}
 8004ac6:	bf00      	nop
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	bf00      	nop
}
 8004ad4:	e003      	b.n	8004ade <_tx_thread_system_resume+0x35a>
                                return;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <_tx_thread_system_resume+0x35c>
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <_tx_thread_system_resume+0x35c>
 8004ade:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004ae0:	3778      	adds	r7, #120	; 0x78
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200048fc 	.word	0x200048fc
 8004aec:	200048f8 	.word	0x200048f8
 8004af0:	20004990 	.word	0x20004990
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b0a4      	sub	sp, #144	; 0x90
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004b06:	4b98      	ldr	r3, [pc, #608]	; (8004d68 <_tx_thread_system_suspend+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8004b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b18:	b672      	cpsid	i
    return(int_posture);
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004b1c:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d112      	bne.n	8004b4e <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d004      	beq.n	8004b46 <_tx_thread_system_suspend+0x4e>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	334c      	adds	r3, #76	; 0x4c
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb83 	bl	800524c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4a88      	ldr	r2, [pc, #544]	; (8004d6c <_tx_thread_system_suspend+0x274>)
 8004b4c:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004b4e:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <_tx_thread_system_suspend+0x278>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4a86      	ldr	r2, [pc, #536]	; (8004d70 <_tx_thread_system_suspend+0x278>)
 8004b56:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	f040 817d 	bne.w	8004e5c <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8004b62:	4b84      	ldr	r3, [pc, #528]	; (8004d74 <_tx_thread_system_suspend+0x27c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8004b68:	4b82      	ldr	r3, [pc, #520]	; (8004d74 <_tx_thread_system_suspend+0x27c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d07c      	beq.n	8004c6e <_tx_thread_system_suspend+0x176>
 8004b74:	4b80      	ldr	r3, [pc, #512]	; (8004d78 <_tx_thread_system_suspend+0x280>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d076      	beq.n	8004c6e <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004b80:	f3ef 8305 	mrs	r3, IPSR
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8004b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b88:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <_tx_thread_system_suspend+0x284>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b90:	4b75      	ldr	r3, [pc, #468]	; (8004d68 <_tx_thread_system_suspend+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d110      	bne.n	8004bc0 <_tx_thread_system_suspend+0xc8>
 8004b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bbe:	e013      	b.n	8004be8 <_tx_thread_system_suspend+0xf0>
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004bc6:	d208      	bcs.n	8004bda <_tx_thread_system_suspend+0xe2>
 8004bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bd8:	e006      	b.n	8004be8 <_tx_thread_system_suspend+0xf0>
 8004bda:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <_tx_thread_system_suspend+0x288>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0a:	611a      	str	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c12:	615a      	str	r2, [r3, #20]
 8004c14:	f107 0208 	add.w	r2, r7, #8
 8004c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c1a:	619a      	str	r2, [r3, #24]
 8004c1c:	4b59      	ldr	r3, [pc, #356]	; (8004d84 <_tx_thread_system_suspend+0x28c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c28:	3320      	adds	r3, #32
 8004c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c2c:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <_tx_thread_system_suspend+0x290>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d314      	bcc.n	8004c60 <_tx_thread_system_suspend+0x168>
 8004c36:	4b55      	ldr	r3, [pc, #340]	; (8004d8c <_tx_thread_system_suspend+0x294>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c3c:	4a4d      	ldr	r2, [pc, #308]	; (8004d74 <_tx_thread_system_suspend+0x27c>)
 8004c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <_tx_thread_system_suspend+0x298>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <_tx_thread_system_suspend+0x29c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <_tx_thread_system_suspend+0x176>
 8004c52:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <_tx_thread_system_suspend+0x29c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a4e      	ldr	r2, [pc, #312]	; (8004d90 <_tx_thread_system_suspend+0x298>)
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4798      	blx	r3
 8004c5e:	e006      	b.n	8004c6e <_tx_thread_system_suspend+0x176>
 8004c60:	4a44      	ldr	r2, [pc, #272]	; (8004d74 <_tx_thread_system_suspend+0x27c>)
 8004c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <_tx_thread_system_suspend+0x298>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c6c:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have 
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8004c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004c8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d016      	beq.n	8004cc4 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a3b      	ldr	r2, [pc, #236]	; (8004d98 <_tx_thread_system_suspend+0x2a0>)
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	f040 8085 	bne.w	8004dc2 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4937      	ldr	r1, [pc, #220]	; (8004d98 <_tx_thread_system_suspend+0x2a0>)
 8004cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cc2:	e07e      	b.n	8004dc2 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a34      	ldr	r2, [pc, #208]	; (8004d98 <_tx_thread_system_suspend+0x2a0>)
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004cd8:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <_tx_thread_system_suspend+0x2a4>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	4a2e      	ldr	r2, [pc, #184]	; (8004d9c <_tx_thread_system_suspend+0x2a4>)
 8004ce4:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <_tx_thread_system_suspend+0x2a4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d158      	bne.n	8004da8 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <_tx_thread_system_suspend+0x2a8>)
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <_tx_thread_system_suspend+0x28c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8004d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <_tx_thread_system_suspend+0x222>
                {
            
                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d102      	bne.n	8004d1a <_tx_thread_system_suspend+0x222>
                    {
    
                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep 
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8004d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
 8004d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <_tx_thread_system_suspend+0x278>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8004d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 80bf 	bne.w	8004eb2 <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <_tx_thread_system_suspend+0x2ac>)
 8004d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d3c:	f3ef 8305 	mrs	r3, IPSR
 8004d40:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004d52:	b662      	cpsie	i
}
 8004d54:	bf00      	nop
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	bf00      	nop
}
 8004d62:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004d64:	e0a5      	b.n	8004eb2 <_tx_thread_system_suspend+0x3ba>
 8004d66:	bf00      	nop
 8004d68:	200048f8 	.word	0x200048f8
 8004d6c:	20004efc 	.word	0x20004efc
 8004d70:	20004990 	.word	0x20004990
 8004d74:	20004f14 	.word	0x20004f14
 8004d78:	20004f18 	.word	0x20004f18
 8004d7c:	20003e8c 	.word	0x20003e8c
 8004d80:	e0001004 	.word	0xe0001004
 8004d84:	200048fc 	.word	0x200048fc
 8004d88:	20004f10 	.word	0x20004f10
 8004d8c:	20004f0c 	.word	0x20004f0c
 8004d90:	20004f00 	.word	0x20004f00
 8004d94:	20004f1c 	.word	0x20004f1c
 8004d98:	20004910 	.word	0x20004910
 8004d9c:	20004908 	.word	0x20004908
 8004da0:	2000490c 	.word	0x2000490c
 8004da4:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbc:	4413      	add	r3, r2
 8004dbe:	4a41      	ldr	r2, [pc, #260]	; (8004ec4 <_tx_thread_system_suspend+0x3cc>)
 8004dc0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004dc2:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <_tx_thread_system_suspend+0x3d0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d139      	bne.n	8004e40 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004dcc:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <_tx_thread_system_suspend+0x3cc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3e      	ldr	r2, [pc, #248]	; (8004ecc <_tx_thread_system_suspend+0x3d4>)
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <_tx_thread_system_suspend+0x3d0>)
 8004dd8:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8004dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <_tx_thread_system_suspend+0x2fe>
            {
            
                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d104      	bne.n	8004df6 <_tx_thread_system_suspend+0x2fe>
                {
    
                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep 
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004dec:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <_tx_thread_system_suspend+0x3d0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df4:	61da      	str	r2, [r3, #28]
 8004df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004e02:	4b33      	ldr	r3, [pc, #204]	; (8004ed0 <_tx_thread_system_suspend+0x3d8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8004e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d153      	bne.n	8004eb6 <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <_tx_thread_system_suspend+0x3dc>)
 8004e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e14:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004e16:	f3ef 8305 	mrs	r3, IPSR
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e22:	f3ef 8310 	mrs	r3, PRIMASK
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004e2c:	b662      	cpsie	i
}
 8004e2e:	bf00      	nop
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f383 8810 	msr	PRIMASK, r3
}
 8004e3a:	bf00      	nop
}
 8004e3c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004e3e:	e03a      	b.n	8004eb6 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8004e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <_tx_thread_system_suspend+0x364>
         {
            
            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d104      	bne.n	8004e5c <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep 
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <_tx_thread_system_suspend+0x3d0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e5a:	61da      	str	r2, [r3, #28]
 8004e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e5e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004e68:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <_tx_thread_system_suspend+0x3d0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d022      	beq.n	8004eba <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <_tx_thread_system_suspend+0x3d8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8004e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11c      	bne.n	8004eba <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <_tx_thread_system_suspend+0x3dc>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e94:	f3ef 8310 	mrs	r3, PRIMASK
 8004e98:	617b      	str	r3, [r7, #20]
    return(posture);
 8004e9a:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004e9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004e9e:	b662      	cpsie	i
}
 8004ea0:	bf00      	nop
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	bf00      	nop
}
 8004eae:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004eb0:	e003      	b.n	8004eba <_tx_thread_system_suspend+0x3c2>
                return;
 8004eb2:	bf00      	nop
 8004eb4:	e002      	b.n	8004ebc <_tx_thread_system_suspend+0x3c4>
            return;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <_tx_thread_system_suspend+0x3c4>
    return;
 8004eba:	bf00      	nop
}
 8004ebc:	3790      	adds	r7, #144	; 0x90
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000490c 	.word	0x2000490c
 8004ec8:	200048fc 	.word	0x200048fc
 8004ecc:	20004910 	.word	0x20004910
 8004ed0:	20004990 	.word	0x20004990
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08e      	sub	sp, #56	; 0x38
 8004edc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004ede:	4b5f      	ldr	r3, [pc, #380]	; (800505c <_tx_thread_time_slice+0x184>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004eea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004eec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004eee:	b672      	cpsid	i
    return(int_posture);
 8004ef0:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004ef4:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <_tx_thread_time_slice+0x188>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d024      	beq.n	8004f4a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d120      	bne.n	8004f4a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69d2      	ldr	r2, [r2, #28]
 8004f0e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4a53      	ldr	r2, [pc, #332]	; (8005064 <_tx_thread_time_slice+0x18c>)
 8004f16:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d013      	beq.n	8004f4a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d10d      	bne.n	8004f4a <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	6a12      	ldr	r2, [r2, #32]
 8004f36:	494c      	ldr	r1, [pc, #304]	; (8005068 <_tx_thread_time_slice+0x190>)
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <_tx_thread_time_slice+0x194>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a49      	ldr	r2, [pc, #292]	; (8005068 <_tx_thread_time_slice+0x190>)
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	4a4a      	ldr	r2, [pc, #296]	; (8005070 <_tx_thread_time_slice+0x198>)
 8004f48:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f4a:	f3ef 8305 	mrs	r3, IPSR
 8004f4e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004f50:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8004f52:	4b48      	ldr	r3, [pc, #288]	; (8005074 <_tx_thread_time_slice+0x19c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8004f5a:	4b47      	ldr	r3, [pc, #284]	; (8005078 <_tx_thread_time_slice+0x1a0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
   
    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8004f60:	4b46      	ldr	r3, [pc, #280]	; (800507c <_tx_thread_time_slice+0x1a4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d06d      	beq.n	8005048 <_tx_thread_time_slice+0x170>
 8004f6c:	4b44      	ldr	r3, [pc, #272]	; (8005080 <_tx_thread_time_slice+0x1a8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d067      	beq.n	8005048 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f78:	f3ef 8305 	mrs	r3, IPSR
 8004f7c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <_tx_thread_time_slice+0x19c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <_tx_thread_time_slice+0x184>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <_tx_thread_time_slice+0xd4>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	041a      	lsls	r2, r3, #16
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	e00e      	b.n	8004fca <_tx_thread_time_slice+0xf2>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004fb2:	d205      	bcs.n	8004fc0 <_tx_thread_time_slice+0xe8>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbe:	e004      	b.n	8004fca <_tx_thread_time_slice+0xf2>
 8004fc0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	2205      	movs	r2, #5
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <_tx_thread_time_slice+0x1ac>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <_tx_thread_time_slice+0x198>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	611a      	str	r2, [r3, #16]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	615a      	str	r2, [r3, #20]
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	619a      	str	r2, [r3, #24]
 8004ffa:	1d3a      	adds	r2, r7, #4
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	61da      	str	r2, [r3, #28]
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	3320      	adds	r3, #32
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <_tx_thread_time_slice+0x1b0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	429a      	cmp	r2, r3
 800500e:	d314      	bcc.n	800503a <_tx_thread_time_slice+0x162>
 8005010:	4b1e      	ldr	r3, [pc, #120]	; (800508c <_tx_thread_time_slice+0x1b4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	4a19      	ldr	r2, [pc, #100]	; (800507c <_tx_thread_time_slice+0x1a4>)
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <_tx_thread_time_slice+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	621a      	str	r2, [r3, #32]
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <_tx_thread_time_slice+0x1bc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <_tx_thread_time_slice+0x170>
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <_tx_thread_time_slice+0x1bc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <_tx_thread_time_slice+0x1b8>)
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
 8005038:	e006      	b.n	8005048 <_tx_thread_time_slice+0x170>
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <_tx_thread_time_slice+0x1a4>)
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <_tx_thread_time_slice+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	621a      	str	r2, [r3, #32]
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8005054:	bf00      	nop
 8005056:	3738      	adds	r7, #56	; 0x38
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200048f8 	.word	0x200048f8
 8005060:	200049a0 	.word	0x200049a0
 8005064:	20004efc 	.word	0x20004efc
 8005068:	20004910 	.word	0x20004910
 800506c:	2000490c 	.word	0x2000490c
 8005070:	200048fc 	.word	0x200048fc
 8005074:	20003e8c 	.word	0x20003e8c
 8005078:	20004990 	.word	0x20004990
 800507c:	20004f14 	.word	0x20004f14
 8005080:	20004f18 	.word	0x20004f18
 8005084:	e0001004 	.word	0xe0001004
 8005088:	20004f10 	.word	0x20004f10
 800508c:	20004f0c 	.word	0x20004f0c
 8005090:	20004f00 	.word	0x20004f00
 8005094:	20004f1c 	.word	0x20004f1c

08005098 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	617b      	str	r3, [r7, #20]
    return(posture);
 80050aa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80050ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80050ae:	b672      	cpsid	i
    return(int_posture);
 80050b0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80050b2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d10e      	bne.n	80050da <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <_tx_thread_timeout+0x74>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <_tx_thread_timeout+0x74>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80050d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d4:	f7ff fb56 	bl	8004784 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80050d8:	e013      	b.n	8005102 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050de:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	69b9      	ldr	r1, [r7, #24]
 80050fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005100:	4798      	blx	r3
}
 8005102:	bf00      	nop
 8005104:	3728      	adds	r7, #40	; 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20004990 	.word	0x20004990

08005110 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005116:	f3ef 8310 	mrs	r3, PRIMASK
 800511a:	607b      	str	r3, [r7, #4]
    return(posture);
 800511c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800511e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005120:	b672      	cpsid	i
    return(int_posture);
 8005122:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005124:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <_tx_timer_expiration_process+0x3c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a07      	ldr	r2, [pc, #28]	; (800514c <_tx_timer_expiration_process+0x3c>)
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800513c:	4804      	ldr	r0, [pc, #16]	; (8005150 <_tx_timer_expiration_process+0x40>)
 800513e:	f7ff fb21 	bl	8004784 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20004990 	.word	0x20004990
 8005150:	20004a40 	.word	0x20004a40

08005154 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <_tx_timer_initialize+0xa8>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <_tx_timer_initialize+0xac>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <_tx_timer_initialize+0xb0>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800516c:	4b26      	ldr	r3, [pc, #152]	; (8005208 <_tx_timer_initialize+0xb4>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <_tx_timer_initialize+0xb8>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	2100      	movs	r1, #0
 800517c:	4824      	ldr	r0, [pc, #144]	; (8005210 <_tx_timer_initialize+0xbc>)
 800517e:	f001 f95f 	bl	8006440 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <_tx_timer_initialize+0xc0>)
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <_tx_timer_initialize+0xbc>)
 8005186:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <_tx_timer_initialize+0xc4>)
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <_tx_timer_initialize+0xbc>)
 800518c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <_tx_timer_initialize+0xc8>)
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <_tx_timer_initialize+0xcc>)
 8005192:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <_tx_timer_initialize+0xc8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3304      	adds	r3, #4
 800519a:	4a20      	ldr	r2, [pc, #128]	; (800521c <_tx_timer_initialize+0xc8>)
 800519c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <_tx_timer_initialize+0xd0>)
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <_tx_timer_initialize+0xd4>)
 80051a2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80051a4:	4b21      	ldr	r3, [pc, #132]	; (800522c <_tx_timer_initialize+0xd8>)
 80051a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <_tx_timer_initialize+0xdc>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <_tx_timer_initialize+0xd0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <_tx_timer_initialize+0xd8>)
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	491d      	ldr	r1, [pc, #116]	; (8005230 <_tx_timer_initialize+0xdc>)
 80051bc:	6809      	ldr	r1, [r1, #0]
 80051be:	481c      	ldr	r0, [pc, #112]	; (8005230 <_tx_timer_initialize+0xdc>)
 80051c0:	6800      	ldr	r0, [r0, #0]
 80051c2:	2400      	movs	r4, #0
 80051c4:	9405      	str	r4, [sp, #20]
 80051c6:	2400      	movs	r4, #0
 80051c8:	9404      	str	r4, [sp, #16]
 80051ca:	9003      	str	r0, [sp, #12]
 80051cc:	9102      	str	r1, [sp, #8]
 80051ce:	9201      	str	r2, [sp, #4]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <_tx_timer_initialize+0xe0>)
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <_tx_timer_initialize+0xe4>)
 80051d6:	4919      	ldr	r1, [pc, #100]	; (800523c <_tx_timer_initialize+0xe8>)
 80051d8:	4819      	ldr	r0, [pc, #100]	; (8005240 <_tx_timer_initialize+0xec>)
 80051da:	f7fe ff8b 	bl	80040f4 <_tx_thread_create>
 80051de:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80051e6:	4b17      	ldr	r3, [pc, #92]	; (8005244 <_tx_timer_initialize+0xf0>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <_tx_timer_initialize+0xf4>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd90      	pop	{r4, r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000499c 	.word	0x2000499c
 8005200:	20004efc 	.word	0x20004efc
 8005204:	200049a0 	.word	0x200049a0
 8005208:	20004a30 	.word	0x20004a30
 800520c:	20004a3c 	.word	0x20004a3c
 8005210:	200049a4 	.word	0x200049a4
 8005214:	20004a24 	.word	0x20004a24
 8005218:	20004a2c 	.word	0x20004a2c
 800521c:	20004a28 	.word	0x20004a28
 8005220:	20004a20 	.word	0x20004a20
 8005224:	20004af0 	.word	0x20004af0
 8005228:	20004afc 	.word	0x20004afc
 800522c:	20004af4 	.word	0x20004af4
 8005230:	20004af8 	.word	0x20004af8
 8005234:	4154494d 	.word	0x4154494d
 8005238:	08005381 	.word	0x08005381
 800523c:	0800648c 	.word	0x0800648c
 8005240:	20004a40 	.word	0x20004a40
 8005244:	20004a34 	.word	0x20004a34
 8005248:	20004a38 	.word	0x20004a38

0800524c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d04a      	beq.n	80052f6 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d046      	beq.n	80052f6 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d142      	bne.n	80052f6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b20      	cmp	r3, #32
 8005274:	d902      	bls.n	800527c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8005276:	231f      	movs	r3, #31
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e002      	b.n	8005282 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3b01      	subs	r3, #1
 8005280:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <_tx_timer_system_activate+0xb8>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <_tx_timer_system_activate+0xbc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d30b      	bcc.n	80052b0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <_tx_timer_system_activate+0xbc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	109b      	asrs	r3, r3, #2
 80052a2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <_tx_timer_system_activate+0xc0>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e011      	b.n	80052f0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80052f6:	bf00      	nop
 80052f8:	3724      	adds	r7, #36	; 0x24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20004a2c 	.word	0x20004a2c
 8005308:	20004a28 	.word	0x20004a28
 800530c:	20004a24 	.word	0x20004a24

08005310 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d026      	beq.n	8005372 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d108      	bne.n	8005344 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d117      	bne.n	800536c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e013      	b.n	800536c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d105      	bne.n	800536c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	619a      	str	r2, [r3, #24]
    }
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	; 0x60
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005388:	2300      	movs	r3, #0
 800538a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a73      	ldr	r2, [pc, #460]	; (800555c <_tx_timer_thread_entry+0x1dc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	f040 80de 	bne.w	8005552 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005396:	f3ef 8310 	mrs	r3, PRIMASK
 800539a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80053a0:	b672      	cpsid	i
    return(int_posture);
 80053a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80053a6:	4b6e      	ldr	r3, [pc, #440]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f107 020c 	add.w	r2, r7, #12
 80053ba:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80053bc:	4b68      	ldr	r3, [pc, #416]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4a65      	ldr	r2, [pc, #404]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053cc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80053ce:	4b64      	ldr	r3, [pc, #400]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b64      	ldr	r3, [pc, #400]	; (8005564 <_tx_timer_thread_entry+0x1e4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d103      	bne.n	80053e2 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80053da:	4b63      	ldr	r3, [pc, #396]	; (8005568 <_tx_timer_thread_entry+0x1e8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a60      	ldr	r2, [pc, #384]	; (8005560 <_tx_timer_thread_entry+0x1e0>)
 80053e0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80053e2:	4b62      	ldr	r3, [pc, #392]	; (800556c <_tx_timer_thread_entry+0x1ec>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053f4:	f3ef 8310 	mrs	r3, PRIMASK
 80053f8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80053fe:	b672      	cpsid	i
    return(int_posture);
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005402:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005404:	e07f      	b.n	8005506 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005418:	429a      	cmp	r2, r3
 800541a:	d102      	bne.n	8005422 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e00e      	b.n	8005440 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800542c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800542e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005432:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005436:	f107 020c 	add.w	r2, r7, #12
 800543a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b20      	cmp	r3, #32
 8005446:	d911      	bls.n	800546c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8005450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005452:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	f107 0208 	add.w	r2, r7, #8
 800545e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005464:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	e01a      	b.n	80054a2 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	f107 0208 	add.w	r2, r7, #8
 800548e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005494:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	e002      	b.n	80054a2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80054a2:	4a33      	ldr	r2, [pc, #204]	; (8005570 <_tx_timer_thread_entry+0x1f0>)
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80054b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80054ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80054be:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054c0:	f3ef 8310 	mrs	r3, PRIMASK
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80054ca:	b672      	cpsid	i
    return(int_posture);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80054ce:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <_tx_timer_thread_entry+0x1f0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d105      	bne.n	80054ea <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80054de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80054e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80054e6:	f7ff feb1 	bl	800524c <_tx_timer_system_activate>
 80054ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054f6:	f3ef 8310 	mrs	r3, PRIMASK
 80054fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80054fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80054fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005500:	b672      	cpsid	i
    return(int_posture);
 8005502:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f47f af7c 	bne.w	8005406 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800550e:	4b17      	ldr	r3, [pc, #92]	; (800556c <_tx_timer_thread_entry+0x1ec>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d116      	bne.n	8005544 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <_tx_timer_thread_entry+0x1f4>)
 8005518:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551c:	2203      	movs	r2, #3
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	2201      	movs	r2, #1
 8005524:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <_tx_timer_thread_entry+0x1f8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <_tx_timer_thread_entry+0x1f8>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005532:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800553c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800553e:	f7ff fadb 	bl	8004af8 <_tx_thread_system_suspend>
 8005542:	e728      	b.n	8005396 <_tx_timer_thread_entry+0x16>
 8005544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005546:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f383 8810 	msr	PRIMASK, r3
}
 800554e:	bf00      	nop
            TX_DISABLE
 8005550:	e721      	b.n	8005396 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005552:	bf00      	nop
 8005554:	3760      	adds	r7, #96	; 0x60
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	4154494d 	.word	0x4154494d
 8005560:	20004a2c 	.word	0x20004a2c
 8005564:	20004a28 	.word	0x20004a28
 8005568:	20004a24 	.word	0x20004a24
 800556c:	20004a30 	.word	0x20004a30
 8005570:	20004a3c 	.word	0x20004a3c
 8005574:	20004a40 	.word	0x20004a40
 8005578:	20004990 	.word	0x20004990

0800557c <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b0a6      	sub	sp, #152	; 0x98
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in 
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	3320      	adds	r3, #32
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d202      	bcs.n	80055a2 <_tx_trace_enable+0x26>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
 800559c:	2305      	movs	r3, #5
 800559e:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a0:	e309      	b.n	8005bb6 <_tx_trace_enable+0x63a>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
 80055a2:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <_tx_trace_enable+0x264>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <_tx_trace_enable+0x34>
    {
    
        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
 80055aa:	2320      	movs	r3, #32
 80055ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ae:	e302      	b.n	8005bb6 <_tx_trace_enable+0x63a>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 80055b0:	4b8c      	ldr	r3, [pc, #560]	; (80057e4 <_tx_trace_enable+0x268>)
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 80055bc:	4a8a      	ldr	r2, [pc, #552]	; (80057e8 <_tx_trace_enable+0x26c>)
 80055be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c0:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 80055c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c4:	3330      	adds	r3, #48	; 0x30
 80055c6:	657b      	str	r3, [r7, #84]	; 0x54

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80055c8:	4a88      	ldr	r2, [pc, #544]	; (80057ec <_tx_trace_enable+0x270>)
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	461a      	mov	r2, r3
 80055da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055dc:	4413      	add	r3, r2
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80055e0:	4a83      	ldr	r2, [pc, #524]	; (80057f0 <_tx_trace_enable+0x274>)
 80055e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e4:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ea:	e01f      	b.n	800562c <_tx_trace_enable+0xb0>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80055ec:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <_tx_trace_enable+0x270>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 80055f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	461a      	mov	r2, r3
 80055fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005600:	4413      	add	r3, r2
 8005602:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	2200      	movs	r2, #0
 8005612:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	2200      	movs	r2, #0
 8005618:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	2200      	movs	r2, #0
 800561e:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	3301      	adds	r3, #1
 800562a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800562c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d3db      	bcc.n	80055ec <_tx_trace_enable+0x70>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
 8005634:	4a6f      	ldr	r2, [pc, #444]	; (80057f4 <_tx_trace_enable+0x278>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
     
        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
 800563a:	4a6f      	ldr	r2, [pc, #444]	; (80057f8 <_tx_trace_enable+0x27c>)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6013      	str	r3, [r2, #0]
    
        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
 8005640:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <_tx_trace_enable+0x280>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 8005646:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <_tx_trace_enable+0x274>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	657b      	str	r3, [r7, #84]	; 0x54

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	3b30      	subs	r3, #48	; 0x30
 800565e:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8005660:	4a67      	ldr	r2, [pc, #412]	; (8005800 <_tx_trace_enable+0x284>)
 8005662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005664:	6013      	str	r3, [r2, #0]
        
        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
 8005666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005668:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 031f 	bic.w	r3, r3, #31
 8005670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005672:	4413      	add	r3, r2
 8005674:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8005676:	4a63      	ldr	r2, [pc, #396]	; (8005804 <_tx_trace_enable+0x288>)
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 800567c:	2300      	movs	r3, #0
 800567e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005680:	e00c      	b.n	800569c <_tx_trace_enable+0x120>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	015b      	lsls	r3, r3, #5
 8005686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005688:	4413      	add	r3, r2
 800568a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 800568c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568e:	63bb      	str	r3, [r7, #56]	; 0x38
          
            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	3301      	adds	r3, #1
 800569a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3ed      	bcc.n	8005682 <_tx_trace_enable+0x106>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 80056a6:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a57      	ldr	r2, [pc, #348]	; (8005808 <_tx_trace_enable+0x28c>)
 80056ac:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
 80056ae:	4b4e      	ldr	r3, [pc, #312]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295
 80056b6:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
 80056b8:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
 80056c0:	4b4a      	ldr	r3, [pc, #296]	; (80057ec <_tx_trace_enable+0x270>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b48      	ldr	r3, [pc, #288]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 80056ca:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
 80056d2:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
 80056da:	4b45      	ldr	r3, [pc, #276]	; (80057f0 <_tx_trace_enable+0x274>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 80056e4:	4b46      	ldr	r3, [pc, #280]	; (8005800 <_tx_trace_enable+0x284>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
 80056ee:	4b45      	ldr	r3, [pc, #276]	; (8005804 <_tx_trace_enable+0x288>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 80056f8:	4b41      	ldr	r3, [pc, #260]	; (8005800 <_tx_trace_enable+0x284>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <_tx_trace_enable+0x26c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 8005702:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <_tx_trace_enable+0x26c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800570a:	625a      	str	r2, [r3, #36]	; 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <_tx_trace_enable+0x26c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8005714:	629a      	str	r2, [r3, #40]	; 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 8005716:	4b34      	ldr	r3, [pc, #208]	; (80057e8 <_tx_trace_enable+0x26c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800572a:	b672      	cpsid	i
    return(int_posture);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
 8005730:	4b36      	ldr	r3, [pc, #216]	; (800580c <_tx_trace_enable+0x290>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	4a35      	ldr	r2, [pc, #212]	; (800580c <_tx_trace_enable+0x290>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <_tx_trace_enable+0x294>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        i =           _tx_thread_created_count;
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <_tx_trace_enable+0x298>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
 8005754:	e019      	b.n	800578a <_tx_trace_enable+0x20e>
        {

            /* Decrement the counter.  */
            i--;
 8005756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005758:	3b01      	subs	r3, #1
 800575a:	66fb      	str	r3, [r7, #108]	; 0x6c
          
            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 800575c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8005762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005766:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 8005768:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 800576a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576e:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	460b      	mov	r3, r1
 8005774:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005778:	2001      	movs	r0, #1
 800577a:	f000 fa59 	bl	8005c30 <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (i != ((ULONG) 0))
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e2      	bne.n	8005756 <_tx_trace_enable+0x1da>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <_tx_trace_enable+0x29c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        i =          _tx_timer_created_count;
 8005798:	4b20      	ldr	r3, [pc, #128]	; (800581c <_tx_trace_enable+0x2a0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
 800579e:	e014      	b.n	80057ca <_tx_trace_enable+0x24e>
        {

            /* Decrement the counter.  */
            i--;
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	3b01      	subs	r3, #1
 80057a4:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name, 
 80057a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80057ba:	2002      	movs	r0, #2
 80057bc:	f000 fa38 	bl	8005c30 <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 80057c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        while (i != ((ULONG) 0))
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e7      	bne.n	80057a0 <_tx_trace_enable+0x224>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <_tx_trace_enable+0x2a4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        i =                _tx_event_flags_created_count;
 80057d8:	4b12      	ldr	r3, [pc, #72]	; (8005824 <_tx_trace_enable+0x2a8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
 80057de:	e036      	b.n	800584e <_tx_trace_enable+0x2d2>
 80057e0:	20004f14 	.word	0x20004f14
 80057e4:	20004f18 	.word	0x20004f18
 80057e8:	20004f00 	.word	0x20004f00
 80057ec:	20004f04 	.word	0x20004f04
 80057f0:	20004f08 	.word	0x20004f08
 80057f4:	20004f20 	.word	0x20004f20
 80057f8:	20004f24 	.word	0x20004f24
 80057fc:	20004f28 	.word	0x20004f28
 8005800:	20004f0c 	.word	0x20004f0c
 8005804:	20004f10 	.word	0x20004f10
 8005808:	54585442 	.word	0x54585442
 800580c:	20004990 	.word	0x20004990
 8005810:	20004900 	.word	0x20004900
 8005814:	20004904 	.word	0x20004904
 8005818:	20004a34 	.word	0x20004a34
 800581c:	20004a38 	.word	0x20004a38
 8005820:	200048d0 	.word	0x200048d0
 8005824:	200048d4 	.word	0x200048d4
        {

            /* Decrement the counter.  */
            i--;
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	3b01      	subs	r3, #1
 800582c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
 800582e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	2300      	movs	r3, #0
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800583e:	2006      	movs	r0, #6
 8005840:	f000 f9f6 	bl	8005c30 <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 8005844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (i != ((ULONG) 0))
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e9      	bne.n	8005828 <_tx_trace_enable+0x2ac>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
 8005854:	4b82      	ldr	r3, [pc, #520]	; (8005a60 <_tx_trace_enable+0x4e4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        i =          _tx_queue_created_count;
 800585c:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <_tx_trace_enable+0x4e8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
 8005862:	e015      	b.n	8005890 <_tx_trace_enable+0x314>
        {

            /* Decrement the counter.  */
            i--;
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	3b01      	subs	r3, #1
 8005868:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
 800586a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800586e:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
 8005870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	009b      	lsls	r3, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
 8005878:	2100      	movs	r1, #0
 800587a:	9100      	str	r1, [sp, #0]
 800587c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005880:	2003      	movs	r0, #3
 8005882:	f000 f9d5 	bl	8005c30 <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 8005886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (i != ((ULONG) 0))
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <_tx_trace_enable+0x2e8>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
 8005896:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <_tx_trace_enable+0x4ec>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	67fb      	str	r3, [r7, #124]	; 0x7c
        i =              _tx_semaphore_created_count;
 800589c:	4b73      	ldr	r3, [pc, #460]	; (8005a6c <_tx_trace_enable+0x4f0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
 80058a2:	e00e      	b.n	80058c2 <_tx_trace_enable+0x346>
        {

            /* Decrement the counter.  */
            i--;
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	3b01      	subs	r3, #1
 80058a8:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
 80058aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058b6:	2004      	movs	r0, #4
 80058b8:	f000 f9ba 	bl	8005c30 <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 80058bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i != ((ULONG) 0))
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ed      	bne.n	80058a4 <_tx_trace_enable+0x328>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
 80058c8:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <_tx_trace_enable+0x4f4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	67bb      	str	r3, [r7, #120]	; 0x78
        i =          _tx_mutex_created_count;
 80058ce:	4b69      	ldr	r3, [pc, #420]	; (8005a74 <_tx_trace_enable+0x4f8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
 80058d4:	e00f      	b.n	80058f6 <_tx_trace_enable+0x37a>
        {

            /* Decrement the counter.  */
            i--;
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	3b01      	subs	r3, #1
 80058da:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
 80058dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058de:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
 80058e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e2:	691b      	ldr	r3, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
 80058e4:	2100      	movs	r1, #0
 80058e6:	9100      	str	r1, [sp, #0]
 80058e8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80058ea:	2005      	movs	r0, #5
 80058ec:	f000 f9a0 	bl	8005c30 <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 80058f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	67bb      	str	r3, [r7, #120]	; 0x78
        while (i != ((ULONG) 0))
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ec      	bne.n	80058d6 <_tx_trace_enable+0x35a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
 80058fc:	4b5e      	ldr	r3, [pc, #376]	; (8005a78 <_tx_trace_enable+0x4fc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	677b      	str	r3, [r7, #116]	; 0x74
        i =               _tx_block_pool_created_count;
 8005902:	4b5e      	ldr	r3, [pc, #376]	; (8005a7c <_tx_trace_enable+0x500>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
 8005908:	e00f      	b.n	800592a <_tx_trace_enable+0x3ae>
        {

             /* Decrement the counter.  */
            i--;
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	3b01      	subs	r3, #1
 800590e:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name, 
 8005910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2100      	movs	r1, #0
 800591a:	9100      	str	r1, [sp, #0]
 800591c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800591e:	2007      	movs	r0, #7
 8005920:	f000 f986 	bl	8005c30 <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8005924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	677b      	str	r3, [r7, #116]	; 0x74
        while (i != ((ULONG) 0))
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ec      	bne.n	800590a <_tx_trace_enable+0x38e>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <_tx_trace_enable+0x504>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
        i =              _tx_byte_pool_created_count;
 8005936:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <_tx_trace_enable+0x508>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
 800593c:	e00f      	b.n	800595e <_tx_trace_enable+0x3e2>
        {

            /* Decrement the counter.  */
            i--;
 800593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005940:	3b01      	subs	r3, #1
 8005942:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name, 
 8005944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2100      	movs	r1, #0
 800594e:	9100      	str	r1, [sp, #0]
 8005950:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005952:	2008      	movs	r0, #8
 8005954:	f000 f96c 	bl	8005c30 <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 8005958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	673b      	str	r3, [r7, #112]	; 0x70
        while (i != ((ULONG) 0))
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ec      	bne.n	800593e <_tx_trace_enable+0x3c2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005964:	f3ef 8310 	mrs	r3, PRIMASK
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800596c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800596e:	b672      	cpsid	i
    return(int_posture);
 8005970:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
 8005974:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <_tx_trace_enable+0x50c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3b01      	subs	r3, #1
 800597a:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <_tx_trace_enable+0x50c>)
 800597c:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 800597e:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <_tx_trace_enable+0x510>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a43      	ldr	r2, [pc, #268]	; (8005a90 <_tx_trace_enable+0x514>)
 8005984:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8005986:	4b42      	ldr	r3, [pc, #264]	; (8005a90 <_tx_trace_enable+0x514>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
 800598c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8095 	beq.w	8005abe <_tx_trace_enable+0x542>
 8005994:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <_tx_trace_enable+0x518>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 808e 	beq.w	8005abe <_tx_trace_enable+0x542>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059a2:	f3ef 8305 	mrs	r3, IPSR
 80059a6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <_tx_trace_enable+0x51c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
 80059b2:	4b3a      	ldr	r3, [pc, #232]	; (8005a9c <_tx_trace_enable+0x520>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	663b      	str	r3, [r7, #96]	; 0x60
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <_tx_trace_enable+0x45a>
 80059be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	667b      	str	r3, [r7, #100]	; 0x64
 80059c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	041a      	lsls	r2, r3, #16
 80059ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059d2:	667b      	str	r3, [r7, #100]	; 0x64
 80059d4:	e00e      	b.n	80059f4 <_tx_trace_enable+0x478>
 80059d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80059dc:	d205      	bcs.n	80059ea <_tx_trace_enable+0x46e>
 80059de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e0:	667b      	str	r3, [r7, #100]	; 0x64
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	663b      	str	r3, [r7, #96]	; 0x60
 80059e8:	e004      	b.n	80059f4 <_tx_trace_enable+0x478>
 80059ea:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80059ee:	663b      	str	r3, [r7, #96]	; 0x60
 80059f0:	2300      	movs	r3, #0
 80059f2:	667b      	str	r3, [r7, #100]	; 0x64
 80059f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	2206      	movs	r2, #6
 8005a04:	609a      	str	r2, [r3, #8]
 8005a06:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <_tx_trace_enable+0x524>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a10:	2200      	movs	r2, #0
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	2200      	movs	r2, #0
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	2200      	movs	r2, #0
 8005a24:	61da      	str	r2, [r3, #28]
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	3320      	adds	r3, #32
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <_tx_trace_enable+0x528>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d33c      	bcc.n	8005ab0 <_tx_trace_enable+0x534>
 8005a36:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <_tx_trace_enable+0x510>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <_tx_trace_enable+0x514>)
 8005a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <_tx_trace_enable+0x52c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a48:	621a      	str	r2, [r3, #32]
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <_tx_trace_enable+0x530>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d035      	beq.n	8005abe <_tx_trace_enable+0x542>
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <_tx_trace_enable+0x530>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <_tx_trace_enable+0x52c>)
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
 8005a5e:	e02e      	b.n	8005abe <_tx_trace_enable+0x542>
 8005a60:	200048c8 	.word	0x200048c8
 8005a64:	200048cc 	.word	0x200048cc
 8005a68:	200048c0 	.word	0x200048c0
 8005a6c:	200048c4 	.word	0x200048c4
 8005a70:	200048d8 	.word	0x200048d8
 8005a74:	200048dc 	.word	0x200048dc
 8005a78:	200048e0 	.word	0x200048e0
 8005a7c:	200048e4 	.word	0x200048e4
 8005a80:	200048e8 	.word	0x200048e8
 8005a84:	200048ec 	.word	0x200048ec
 8005a88:	20004990 	.word	0x20004990
 8005a8c:	20004f0c 	.word	0x20004f0c
 8005a90:	20004f14 	.word	0x20004f14
 8005a94:	20004f18 	.word	0x20004f18
 8005a98:	20003e8c 	.word	0x20003e8c
 8005a9c:	200048f8 	.word	0x200048f8
 8005aa0:	e0001004 	.word	0xe0001004
 8005aa4:	20004f10 	.word	0x20004f10
 8005aa8:	20004f00 	.word	0x20004f00
 8005aac:	20004f1c 	.word	0x20004f1c
 8005ab0:	4a43      	ldr	r2, [pc, #268]	; (8005bc0 <_tx_trace_enable+0x644>)
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <_tx_trace_enable+0x648>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005abc:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8005abe:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <_tx_trace_enable+0x644>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d06b      	beq.n	8005ba2 <_tx_trace_enable+0x626>
 8005aca:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <_tx_trace_enable+0x64c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d065      	beq.n	8005ba2 <_tx_trace_enable+0x626>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ad6:	f3ef 8305 	mrs	r3, IPSR
 8005ada:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <_tx_trace_enable+0x650>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	4b3a      	ldr	r3, [pc, #232]	; (8005bd0 <_tx_trace_enable+0x654>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <_tx_trace_enable+0x58e>
 8005af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	041a      	lsls	r2, r3, #16
 8005afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b08:	e00e      	b.n	8005b28 <_tx_trace_enable+0x5ac>
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005b10:	d205      	bcs.n	8005b1e <_tx_trace_enable+0x5a2>
 8005b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b1c:	e004      	b.n	8005b28 <_tx_trace_enable+0x5ac>
 8005b1e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8005b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b24:	2300      	movs	r3, #0
 8005b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	2206      	movs	r2, #6
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <_tx_trace_enable+0x658>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b44:	2200      	movs	r2, #0
 8005b46:	611a      	str	r2, [r3, #16]
 8005b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	615a      	str	r2, [r3, #20]
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b50:	2200      	movs	r2, #0
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	3320      	adds	r3, #32
 8005b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b60:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <_tx_trace_enable+0x65c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d314      	bcc.n	8005b94 <_tx_trace_enable+0x618>
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <_tx_trace_enable+0x660>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <_tx_trace_enable+0x644>)
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <_tx_trace_enable+0x648>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b7c:	621a      	str	r2, [r3, #32]
 8005b7e:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <_tx_trace_enable+0x664>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <_tx_trace_enable+0x626>
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <_tx_trace_enable+0x664>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a0e      	ldr	r2, [pc, #56]	; (8005bc4 <_tx_trace_enable+0x648>)
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4798      	blx	r3
 8005b92:	e006      	b.n	8005ba2 <_tx_trace_enable+0x626>
 8005b94:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <_tx_trace_enable+0x644>)
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <_tx_trace_enable+0x648>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba0:	621a      	str	r2, [r3, #32]
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005bae:	f7fe fdaf 	bl	8004710 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    
    /* Return completion status.  */
    return(status);
 8005bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    }

    /* Return completion status.  */
    return(status);
#endif
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3790      	adds	r7, #144	; 0x90
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20004f14 	.word	0x20004f14
 8005bc4:	20004f00 	.word	0x20004f00
 8005bc8:	20004f18 	.word	0x20004f18
 8005bcc:	20003e8c 	.word	0x20003e8c
 8005bd0:	200048f8 	.word	0x200048f8
 8005bd4:	e0001004 	.word	0xe0001004
 8005bd8:	20004f10 	.word	0x20004f10
 8005bdc:	20004f0c 	.word	0x20004f0c
 8005be0:	20004f1c 	.word	0x20004f1c

08005be4 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <_tx_trace_initialize+0x34>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <_tx_trace_initialize+0x38>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <_tx_trace_initialize+0x3c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <_tx_trace_initialize+0x40>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <_tx_trace_initialize+0x44>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <_tx_trace_initialize+0x48>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8005c0c:	bf00      	nop
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20004f00 	.word	0x20004f00
 8005c1c:	20004f04 	.word	0x20004f04
 8005c20:	20004f08 	.word	0x20004f08
 8005c24:	20004f0c 	.word	0x20004f0c
 8005c28:	20004f10 	.word	0x20004f10
 8005c2c:	20004f14 	.word	0x20004f14

08005c30 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b08d      	sub	sp, #52	; 0x34
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8005c40:	4b6d      	ldr	r3, [pc, #436]	; (8005df8 <_tx_trace_object_register+0x1c8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80d0 	beq.w	8005dea <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 8005c4a:	4b6c      	ldr	r3, [pc, #432]	; (8005dfc <_tx_trace_object_register+0x1cc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8005c50:	4b6b      	ldr	r3, [pc, #428]	; (8005e00 <_tx_trace_object_register+0x1d0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80c8 	beq.w	8005dea <_tx_trace_object_register+0x1ba>
        {
    
            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8005c62:	4b68      	ldr	r3, [pc, #416]	; (8005e04 <_tx_trace_object_register+0x1d4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005c68:	4b63      	ldr	r3, [pc, #396]	; (8005df8 <_tx_trace_object_register+0x1c8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8005c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the 
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d103      	bne.n	8005ca6 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
                }
                
                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d02d      	beq.n	8005d08 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d11a      	bne.n	8005cea <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8005cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d102      	bne.n	8005cc2 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc0:	e013      	b.n	8005cea <_tx_trace_object_register+0xba>
                    }
                    else
                    {
                    
                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <_tx_trace_object_register+0x1c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	61bb      	str	r3, [r7, #24]
                
                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }
        
                /* Move to the next entry.  */
                i++;
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	3301      	adds	r3, #1
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        
                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8005cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d301      	bcc.n	8005cfc <_tx_trace_object_register+0xcc>
                {
        
                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
        
            } while (i != _tx_trace_registry_search_start);
 8005cfc:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <_tx_trace_object_register+0x1d4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d1b0      	bne.n	8005c68 <_tx_trace_object_register+0x38>
 8005d06:	e000      	b.n	8005d0a <_tx_trace_object_register+0xda>
                    break;
 8005d08:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 8005d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d26b      	bcs.n	8005dea <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8005d12:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <_tx_trace_object_register+0x1d0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a39      	ldr	r2, [pc, #228]	; (8005e00 <_tx_trace_object_register+0x1d0>)
 8005d1a:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	3301      	adds	r3, #1
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d904      	bls.n	8005d30 <_tx_trace_object_register+0x100>
                {
                    
                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	3301      	adds	r3, #1
 8005d2a:	4a36      	ldr	r2, [pc, #216]	; (8005e04 <_tx_trace_object_register+0x1d4>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e002      	b.n	8005d36 <_tx_trace_object_register+0x106>
                }
                else
                {
                
                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8005d30:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <_tx_trace_object_register+0x1d4>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
                }
        
                /* Yes, an entry has been found...  */
                
                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005d36:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <_tx_trace_object_register+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	461a      	mov	r2, r3
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	61bb      	str	r3, [r7, #24]
                
                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d6e:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d74:	e014      	b.n	8005da0 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	4413      	add	r3, r2
 8005d80:	61fb      	str	r3, [r7, #28]
                  
                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	460a      	mov	r2, r1
 8005d90:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2b1e      	cmp	r3, #30
 8005da4:	d9e7      	bls.n	8005d76 <_tx_trace_object_register+0x146>
 8005da6:	e000      	b.n	8005daa <_tx_trace_object_register+0x17a>
                    {
                        break;
 8005da8:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	4413      	add	r3, r2
 8005db0:	3310      	adds	r3, #16
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d110      	bne.n	8005dde <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */
            
                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	617b      	str	r3, [r7, #20]
            
                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8005ddc:	e005      	b.n	8005dea <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2200      	movs	r2, #0
 8005de2:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2200      	movs	r2, #0
 8005de8:	70da      	strb	r2, [r3, #3]
}
 8005dea:	bf00      	nop
 8005dec:	3734      	adds	r7, #52	; 0x34
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20004f04 	.word	0x20004f04
 8005dfc:	20004f20 	.word	0x20004f20
 8005e00:	20004f24 	.word	0x20004f24
 8005e04:	20004f28 	.word	0x20004f28

08005e08 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b092      	sub	sp, #72	; 0x48
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005e16:	2300      	movs	r3, #0
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005e20:	2302      	movs	r3, #2
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
 8005e24:	e075      	b.n	8005f12 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e28:	2b34      	cmp	r3, #52	; 0x34
 8005e2a:	d002      	beq.n	8005e32 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	e06f      	b.n	8005f12 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e32:	f3ef 8310 	mrs	r3, PRIMASK
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e3c:	b672      	cpsid	i
    return(int_posture);
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005e42:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <_txe_byte_pool_create+0x128>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	4a39      	ldr	r2, [pc, #228]	; (8005f30 <_txe_byte_pool_create+0x128>)
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f383 8810 	msr	PRIMASK, r3
}
 8005e56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <_txe_byte_pool_create+0x12c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	643b      	str	r3, [r7, #64]	; 0x40
 8005e62:	e009      	b.n	8005e78 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d00b      	beq.n	8005e84 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	3301      	adds	r3, #1
 8005e76:	643b      	str	r3, [r7, #64]	; 0x40
 8005e78:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <_txe_byte_pool_create+0x130>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3f0      	bcc.n	8005e64 <_txe_byte_pool_create+0x5c>
 8005e82:	e000      	b.n	8005e86 <_txe_byte_pool_create+0x7e>
                break;
 8005e84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e86:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8a:	623b      	str	r3, [r7, #32]
    return(posture);
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005e8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e90:	b672      	cpsid	i
    return(int_posture);
 8005e92:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005e96:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <_txe_byte_pool_create+0x128>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <_txe_byte_pool_create+0x128>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005eac:	f7fe fc30 	bl	8004710 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d102      	bne.n	8005ebe <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e029      	b.n	8005f12 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec8:	e023      	b.n	8005f12 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b63      	cmp	r3, #99	; 0x63
 8005ece:	d802      	bhi.n	8005ed6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005ed0:	2305      	movs	r3, #5
 8005ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed4:	e01d      	b.n	8005f12 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005ed6:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <_txe_byte_pool_create+0x134>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <_txe_byte_pool_create+0x138>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d101      	bne.n	8005ee8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005ee4:	2313      	movs	r3, #19
 8005ee6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ee8:	f3ef 8305 	mrs	r3, IPSR
 8005eec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005eee:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <_txe_byte_pool_create+0x13c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005efa:	f3ef 8305 	mrs	r3, IPSR
 8005efe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005f00:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <_txe_byte_pool_create+0x13c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005f0c:	d201      	bcs.n	8005f12 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005f0e:	2313      	movs	r3, #19
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7fd ff54 	bl	8003dcc <_tx_byte_pool_create>
 8005f24:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3748      	adds	r7, #72	; 0x48
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20004990 	.word	0x20004990
 8005f34:	200048e8 	.word	0x200048e8
 8005f38:	200048ec 	.word	0x200048ec
 8005f3c:	200048f8 	.word	0x200048f8
 8005f40:	20004a40 	.word	0x20004a40
 8005f44:	20003e8c 	.word	0x20003e8c

08005f48 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b09a      	sub	sp, #104	; 0x68
 8005f4c:	af06      	add	r7, sp, #24
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005f56:	2300      	movs	r3, #0
 8005f58:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005f60:	230e      	movs	r3, #14
 8005f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f64:	e0bb      	b.n	80060de <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8005f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f68:	2bb0      	cmp	r3, #176	; 0xb0
 8005f6a:	d002      	beq.n	8005f72 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005f6c:	230e      	movs	r3, #14
 8005f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f70:	e0b5      	b.n	80060de <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f72:	f3ef 8310 	mrs	r3, PRIMASK
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f7c:	b672      	cpsid	i
    return(int_posture);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005f82:	4b64      	ldr	r3, [pc, #400]	; (8006114 <_txe_thread_create+0x1cc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a62      	ldr	r2, [pc, #392]	; (8006114 <_txe_thread_create+0x1cc>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	f383 8810 	msr	PRIMASK, r3
}
 8005f96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8005f9c:	4b5e      	ldr	r3, [pc, #376]	; (8006118 <_txe_thread_create+0x1d0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fac:	4413      	add	r3, r2
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb8:	e02b      	b.n	8006012 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d101      	bne.n	8005fc6 <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d028      	beq.n	800601e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d308      	bcc.n	8005fe8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d203      	bcs.n	8005fe8 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d308      	bcc.n	8006004 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d203      	bcs.n	8006004 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	3301      	adds	r3, #1
 8006010:	647b      	str	r3, [r7, #68]	; 0x44
 8006012:	4b42      	ldr	r3, [pc, #264]	; (800611c <_txe_thread_create+0x1d4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006018:	429a      	cmp	r2, r3
 800601a:	d3ce      	bcc.n	8005fba <_txe_thread_create+0x72>
 800601c:	e000      	b.n	8006020 <_txe_thread_create+0xd8>
                break;
 800601e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006020:	f3ef 8310 	mrs	r3, PRIMASK
 8006024:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006026:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006028:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800602a:	b672      	cpsid	i
    return(int_posture);
 800602c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006030:	4b38      	ldr	r3, [pc, #224]	; (8006114 <_txe_thread_create+0x1cc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	4a37      	ldr	r2, [pc, #220]	; (8006114 <_txe_thread_create+0x1cc>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006046:	f7fe fb63 	bl	8004710 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	429a      	cmp	r2, r3
 8006050:	d102      	bne.n	8006058 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8006052:	230e      	movs	r3, #14
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006056:	e042      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8006058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800605e:	2303      	movs	r3, #3
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006062:	e03c      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800606a:	2303      	movs	r3, #3
 800606c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606e:	e036      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8006070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006072:	2bc7      	cmp	r3, #199	; 0xc7
 8006074:	d802      	bhi.n	800607c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8006076:	2305      	movs	r3, #5
 8006078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607a:	e030      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800607c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607e:	2b1f      	cmp	r3, #31
 8006080:	d902      	bls.n	8006088 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8006082:	230f      	movs	r3, #15
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006086:	e02a      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8006088:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800608a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8006090:	2318      	movs	r3, #24
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006094:	e023      	b.n	80060de <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d902      	bls.n	80060a2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800609c:	2310      	movs	r3, #16
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a0:	e01d      	b.n	80060de <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <_txe_thread_create+0x1d8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <_txe_thread_create+0x1dc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80060b0:	2313      	movs	r3, #19
 80060b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060b4:	f3ef 8305 	mrs	r3, IPSR
 80060b8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80060ba:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <_txe_thread_create+0x1e0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80060cc:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <_txe_thread_create+0x1e0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80060d8:	d201      	bcs.n	80060de <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80060da:	2313      	movs	r3, #19
 80060dc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80060de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d112      	bne.n	800610a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f2:	9302      	str	r3, [sp, #8]
 80060f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7fd fff6 	bl	80040f4 <_tx_thread_create>
 8006108:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800610c:	4618      	mov	r0, r3
 800610e:	3750      	adds	r7, #80	; 0x50
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20004990 	.word	0x20004990
 8006118:	20004900 	.word	0x20004900
 800611c:	20004904 	.word	0x20004904
 8006120:	200048f8 	.word	0x200048f8
 8006124:	20004a40 	.word	0x20004a40
 8006128:	20003e8c 	.word	0x20003e8c

0800612c <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006138:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800613a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800613c:	b672      	cpsid	i
    return(int_posture);
 800613e:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8006140:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 8006142:	463b      	mov	r3, r7
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f83d 	bl	80061c4 <tx_timer_get_next>
 800614a:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d103      	bne.n	800616a <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7fa fb3b 	bl	80007e0 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <tx_low_power_enter+0x5c>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800617c:	f7fa fb3a 	bl	80007f4 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 8006180:	bf00      	nop
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20004f2c 	.word	0x20004f2c

0800618c <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <tx_low_power_exit+0x34>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <tx_low_power_exit+0x34>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 80061a0:	f7fa fb2f 	bl	8000802 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 80061a4:	f7fa fb34 	bl	8000810 <App_ThreadX_LowPower_Timer_Adjust>
 80061a8:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f86f 	bl	8006294 <tx_time_increment>
        }
    }
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20004f2c 	.word	0x20004f2c

080061c4 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b08d      	sub	sp, #52	; 0x34
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
 80061d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	617b      	str	r3, [r7, #20]
    return(posture);
 80061d8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80061da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80061dc:	b672      	cpsid	i
    return(int_posture);
 80061de:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 80061e0:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 80061e2:	4b29      	ldr	r3, [pc, #164]	; (8006288 <tx_timer_get_next+0xc4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 80061e8:	2300      	movs	r3, #0
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	e02f      	b.n	800624e <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01d      	beq.n	8006232 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b20      	cmp	r3, #32
 8006202:	d906      	bls.n	8006212 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	4413      	add	r3, r2
 800620c:	3b20      	subs	r3, #32
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	e001      	b.n	8006216 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	429a      	cmp	r2, r3
 800621c:	d901      	bls.n	8006222 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622e:	429a      	cmp	r2, r3
 8006230:	d1e4      	bne.n	80061fc <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	3304      	adds	r3, #4
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <tx_timer_get_next+0xc8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d302      	bcc.n	8006248 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <tx_timer_get_next+0xcc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	2b1f      	cmp	r3, #31
 8006252:	d9cc      	bls.n	80061ee <tx_timer_get_next+0x2a>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f383 8810 	msr	PRIMASK, r3
}
 800625e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d004      	beq.n	8006272 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800626e:	2301      	movs	r3, #1
 8006270:	e003      	b.n	800627a <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 8006278:	2300      	movs	r3, #0
    }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3734      	adds	r7, #52	; 0x34
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20004a2c 	.word	0x20004a2c
 800628c:	20004a28 	.word	0x20004a28
 8006290:	20004a24 	.word	0x20004a24

08006294 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 809b 	beq.w	80063da <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062a4:	f3ef 8310 	mrs	r3, PRIMASK
 80062a8:	613b      	str	r3, [r7, #16]
    return(posture);
 80062aa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80062ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80062ae:	b672      	cpsid	i
    return(int_posture);
 80062b0:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80062b2:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <tx_time_increment+0x150>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	4a49      	ldr	r2, [pc, #292]	; (80063e4 <tx_time_increment+0x150>)
 80062be:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 80062c0:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <tx_time_increment+0x154>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00e      	beq.n	80062e6 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 80062c8:	4b47      	ldr	r3, [pc, #284]	; (80063e8 <tx_time_increment+0x154>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d206      	bcs.n	80062e0 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 80062d2:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <tx_time_increment+0x154>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	4a43      	ldr	r2, [pc, #268]	; (80063e8 <tx_time_increment+0x154>)
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e002      	b.n	80062e6 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 80062e0:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <tx_time_increment+0x154>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 80062e6:	4b41      	ldr	r3, [pc, #260]	; (80063ec <tx_time_increment+0x158>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	e046      	b.n	8006384 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d034      	beq.n	8006368 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b20      	cmp	r3, #32
 800630a:	d908      	bls.n	800631e <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	4413      	add	r3, r2
 8006314:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e003      	b.n	8006326 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	429a      	cmp	r2, r3
 8006334:	d1e6      	bne.n	8006304 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	e009      	b.n	8006362 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	3304      	adds	r3, #4
 800636c:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <tx_time_increment+0x15c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a3a      	ldr	r2, [r7, #32]
 8006374:	429a      	cmp	r2, r3
 8006376:	d302      	bcc.n	800637e <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <tx_time_increment+0x160>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	3301      	adds	r3, #1
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	2b1f      	cmp	r3, #31
 8006388:	d9b5      	bls.n	80062f6 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800638a:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <tx_time_increment+0x160>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <tx_time_increment+0x158>)
 8006390:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8006392:	e019      	b.n	80063c8 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d206      	bcs.n	80063b6 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	1ad2      	subs	r2, r2, r3
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e002      	b.n	80063bc <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2200      	movs	r2, #0
 80063c0:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 80063c2:	69f8      	ldr	r0, [r7, #28]
 80063c4:	f7fe ff42 	bl	800524c <_tx_timer_system_activate>
    while (temp_list_head)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e2      	bne.n	8006394 <tx_time_increment+0x100>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f383 8810 	msr	PRIMASK, r3
}
 80063d8:	e000      	b.n	80063dc <tx_time_increment+0x148>
        return;
 80063da:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	2000499c 	.word	0x2000499c
 80063e8:	20004efc 	.word	0x20004efc
 80063ec:	20004a2c 	.word	0x20004a2c
 80063f0:	20004a28 	.word	0x20004a28
 80063f4:	20004a24 	.word	0x20004a24

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4d0d      	ldr	r5, [pc, #52]	; (8006430 <__libc_init_array+0x38>)
 80063fc:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 80063fe:	1b64      	subs	r4, r4, r5
 8006400:	10a4      	asrs	r4, r4, #2
 8006402:	2600      	movs	r6, #0
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	4d0b      	ldr	r5, [pc, #44]	; (8006438 <__libc_init_array+0x40>)
 800640a:	4c0c      	ldr	r4, [pc, #48]	; (800643c <__libc_init_array+0x44>)
 800640c:	f000 f820 	bl	8006450 <_init>
 8006410:	1b64      	subs	r4, r4, r5
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	2600      	movs	r6, #0
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	080064f0 	.word	0x080064f0
 8006434:	080064f0 	.word	0x080064f0
 8006438:	080064f0 	.word	0x080064f0
 800643c:	080064f4 	.word	0x080064f4

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
