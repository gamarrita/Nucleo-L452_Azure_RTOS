
02_tracex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  00020fb0  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  00020fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .trace        00000fa0  20000000  20000000  00030000  2**2
                  ALLOC
  9 .data         00000010  20000fa0  0800592c  00020fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001040  20000fb0  0800593c  00020fb0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ff0  0800593c  00021ff0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020fb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acfe  00000000  00000000  00020fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004367  00000000  00000000  0003bcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00040048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  000411f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aaa  00000000  00000000  00042110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3cc  00000000  00000000  00067bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df6d3  00000000  00000000  00081f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  001616ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000fb0 	.word	0x20000fb0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005888 	.word	0x08005888

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000fb4 	.word	0x20000fb4
 80001dc:	08005888 	.word	0x08005888

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f891 	bl	8000360 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	200019b8 	.word	0x200019b8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	000c34ff 	.word	0x000c34ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2a      	ldr	r2, [pc, #168]	; (8000310 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4821      	ldr	r0, [pc, #132]	; (8000314 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1b      	ldr	r4, [pc, #108]	; (800031c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c14      	ldr	r4, [pc, #80]	; (800031c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b909      	cbnz	r1, 80002fe <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80002fa:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80002fc:	e7f9      	b.n	80002f2 <__tx_ts_wait>

080002fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80002fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000302:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000306:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800030c:	e7dc      	b.n	80002c8 <__tx_ts_restore>

0800030e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800030e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000310:	20001a54 	.word	0x20001a54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000314:	200019bc 	.word	0x200019bc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000318:	200019c0 	.word	0x200019c0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800031c:	20001fc0 	.word	0x20001fc0

08000320 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000320:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000322:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000326:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800032a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800032e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000330:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000334:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000336:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000338:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800033a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800033c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800033e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000340:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000342:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000344:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000346:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000348:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800034c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000352:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000354:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800035a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800035c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800035e:	4770      	bx	lr

08000360 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000360:	4922      	ldr	r1, [pc, #136]	; (80003ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000362:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000364:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000368:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800036c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800036e:	b13a      	cbz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000370:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000374:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000376:	b91a      	cbnz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800037a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800037e:	6018      	str	r0, [r3, #0]

08000380 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000380:	491d      	ldr	r1, [pc, #116]	; (80003f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000382:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000384:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000386:	b122      	cbz	r2, 8000392 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800038a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800038e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000390:	e008      	b.n	80003a4 <__tx_timer_done>

08000392 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000392:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000398:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800039a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800039c:	d101      	bne.n	80003a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003a0:	6818      	ldr	r0, [r3, #0]

080003a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003a2:	6008      	str	r0, [r1, #0]

080003a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003a8:	b912      	cbnz	r2, 80003b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003aa:	4914      	ldr	r1, [pc, #80]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ae:	b1d0      	cbz	r0, 80003e6 <__tx_timer_nothing_expired>

080003b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003b4:	4911      	ldr	r1, [pc, #68]	; (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003b8:	b108      	cbz	r0, 80003be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ba:	f004 fa2b 	bl	8004814 <_tx_timer_expiration_process>

080003be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003c2:	b172      	cbz	r2, 80003e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003c4:	f004 f90a 	bl	80045dc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003cc:	b949      	cbnz	r1, 80003e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003d2:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003d6:	480f      	ldr	r0, [pc, #60]	; (8000414 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003de:	d000      	beq.n	80003e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003e0:	6002      	str	r2, [r0, #0]

080003e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003ec:	20001a60 	.word	0x20001a60
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003f0:	20001fc0 	.word	0x20001fc0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003f4:	20001a64 	.word	0x20001a64
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003f8:	20001af0 	.word	0x20001af0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003fc:	20001af4 	.word	0x20001af4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000400:	20001aec 	.word	0x20001aec
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000404:	20001ae8 	.word	0x20001ae8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	20001a54 	.word	0x20001a54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040c:	200019bc 	.word	0x200019bc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000410:	200019c0 	.word	0x200019c0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04

08000418 <__aeabi_uldivmod>:
 8000418:	b953      	cbnz	r3, 8000430 <__aeabi_uldivmod+0x18>
 800041a:	b94a      	cbnz	r2, 8000430 <__aeabi_uldivmod+0x18>
 800041c:	2900      	cmp	r1, #0
 800041e:	bf08      	it	eq
 8000420:	2800      	cmpeq	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	f04f 31ff 	movne.w	r1, #4294967295
 8000428:	f04f 30ff 	movne.w	r0, #4294967295
 800042c:	f000 b974 	b.w	8000718 <__aeabi_idiv0>
 8000430:	f1ad 0c08 	sub.w	ip, sp, #8
 8000434:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000444:	b004      	add	sp, #16
 8000446:	4770      	bx	lr

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468e      	mov	lr, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d14d      	bne.n	80004f2 <__udivmoddi4+0xaa>
 8000456:	428a      	cmp	r2, r1
 8000458:	4694      	mov	ip, r2
 800045a:	d969      	bls.n	8000530 <__udivmoddi4+0xe8>
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	b152      	cbz	r2, 8000478 <__udivmoddi4+0x30>
 8000462:	fa01 f302 	lsl.w	r3, r1, r2
 8000466:	f1c2 0120 	rsb	r1, r2, #32
 800046a:	fa20 f101 	lsr.w	r1, r0, r1
 800046e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000472:	ea41 0e03 	orr.w	lr, r1, r3
 8000476:	4094      	lsls	r4, r2
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	0c21      	lsrs	r1, r4, #16
 800047e:	fbbe f6f8 	udiv	r6, lr, r8
 8000482:	fa1f f78c 	uxth.w	r7, ip
 8000486:	fb08 e316 	mls	r3, r8, r6, lr
 800048a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048e:	fb06 f107 	mul.w	r1, r6, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d90a      	bls.n	80004ac <__udivmoddi4+0x64>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f106 30ff 	add.w	r0, r6, #4294967295
 800049e:	f080 811f 	bcs.w	80006e0 <__udivmoddi4+0x298>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 811c 	bls.w	80006e0 <__udivmoddi4+0x298>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3310 	mls	r3, r8, r0, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb00 f707 	mul.w	r7, r0, r7
 80004c0:	42a7      	cmp	r7, r4
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x92>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004cc:	f080 810a 	bcs.w	80006e4 <__udivmoddi4+0x29c>
 80004d0:	42a7      	cmp	r7, r4
 80004d2:	f240 8107 	bls.w	80006e4 <__udivmoddi4+0x29c>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	1be4      	subs	r4, r4, r7
 80004e0:	2600      	movs	r6, #0
 80004e2:	b11d      	cbz	r5, 80004ec <__udivmoddi4+0xa4>
 80004e4:	40d4      	lsrs	r4, r2
 80004e6:	2300      	movs	r3, #0
 80004e8:	e9c5 4300 	strd	r4, r3, [r5]
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d909      	bls.n	800050a <__udivmoddi4+0xc2>
 80004f6:	2d00      	cmp	r5, #0
 80004f8:	f000 80ef 	beq.w	80006da <__udivmoddi4+0x292>
 80004fc:	2600      	movs	r6, #0
 80004fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000502:	4630      	mov	r0, r6
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	fab3 f683 	clz	r6, r3
 800050e:	2e00      	cmp	r6, #0
 8000510:	d14a      	bne.n	80005a8 <__udivmoddi4+0x160>
 8000512:	428b      	cmp	r3, r1
 8000514:	d302      	bcc.n	800051c <__udivmoddi4+0xd4>
 8000516:	4282      	cmp	r2, r0
 8000518:	f200 80f9 	bhi.w	800070e <__udivmoddi4+0x2c6>
 800051c:	1a84      	subs	r4, r0, r2
 800051e:	eb61 0303 	sbc.w	r3, r1, r3
 8000522:	2001      	movs	r0, #1
 8000524:	469e      	mov	lr, r3
 8000526:	2d00      	cmp	r5, #0
 8000528:	d0e0      	beq.n	80004ec <__udivmoddi4+0xa4>
 800052a:	e9c5 4e00 	strd	r4, lr, [r5]
 800052e:	e7dd      	b.n	80004ec <__udivmoddi4+0xa4>
 8000530:	b902      	cbnz	r2, 8000534 <__udivmoddi4+0xec>
 8000532:	deff      	udf	#255	; 0xff
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	2a00      	cmp	r2, #0
 800053a:	f040 8092 	bne.w	8000662 <__udivmoddi4+0x21a>
 800053e:	eba1 010c 	sub.w	r1, r1, ip
 8000542:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000546:	fa1f fe8c 	uxth.w	lr, ip
 800054a:	2601      	movs	r6, #1
 800054c:	0c20      	lsrs	r0, r4, #16
 800054e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000552:	fb07 1113 	mls	r1, r7, r3, r1
 8000556:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800055a:	fb0e f003 	mul.w	r0, lr, r3
 800055e:	4288      	cmp	r0, r1
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x12c>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f103 38ff 	add.w	r8, r3, #4294967295
 800056a:	d202      	bcs.n	8000572 <__udivmoddi4+0x12a>
 800056c:	4288      	cmp	r0, r1
 800056e:	f200 80cb 	bhi.w	8000708 <__udivmoddi4+0x2c0>
 8000572:	4643      	mov	r3, r8
 8000574:	1a09      	subs	r1, r1, r0
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1110 	mls	r1, r7, r0, r1
 8000580:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000584:	fb0e fe00 	mul.w	lr, lr, r0
 8000588:	45a6      	cmp	lr, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x156>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 31ff 	add.w	r1, r0, #4294967295
 8000594:	d202      	bcs.n	800059c <__udivmoddi4+0x154>
 8000596:	45a6      	cmp	lr, r4
 8000598:	f200 80bb 	bhi.w	8000712 <__udivmoddi4+0x2ca>
 800059c:	4608      	mov	r0, r1
 800059e:	eba4 040e 	sub.w	r4, r4, lr
 80005a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x9a>
 80005a8:	f1c6 0720 	rsb	r7, r6, #32
 80005ac:	40b3      	lsls	r3, r6
 80005ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80005b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b6:	fa20 f407 	lsr.w	r4, r0, r7
 80005ba:	fa01 f306 	lsl.w	r3, r1, r6
 80005be:	431c      	orrs	r4, r3
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c6:	fa00 f306 	lsl.w	r3, r0, r6
 80005ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ce:	0c20      	lsrs	r0, r4, #16
 80005d0:	fa1f fe8c 	uxth.w	lr, ip
 80005d4:	fb09 1118 	mls	r1, r9, r8, r1
 80005d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005dc:	fb08 f00e 	mul.w	r0, r8, lr
 80005e0:	4288      	cmp	r0, r1
 80005e2:	fa02 f206 	lsl.w	r2, r2, r6
 80005e6:	d90b      	bls.n	8000600 <__udivmoddi4+0x1b8>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80005f0:	f080 8088 	bcs.w	8000704 <__udivmoddi4+0x2bc>
 80005f4:	4288      	cmp	r0, r1
 80005f6:	f240 8085 	bls.w	8000704 <__udivmoddi4+0x2bc>
 80005fa:	f1a8 0802 	sub.w	r8, r8, #2
 80005fe:	4461      	add	r1, ip
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	b2a4      	uxth	r4, r4
 8000604:	fbb1 f0f9 	udiv	r0, r1, r9
 8000608:	fb09 1110 	mls	r1, r9, r0, r1
 800060c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000610:	fb00 fe0e 	mul.w	lr, r0, lr
 8000614:	458e      	cmp	lr, r1
 8000616:	d908      	bls.n	800062a <__udivmoddi4+0x1e2>
 8000618:	eb1c 0101 	adds.w	r1, ip, r1
 800061c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000620:	d26c      	bcs.n	80006fc <__udivmoddi4+0x2b4>
 8000622:	458e      	cmp	lr, r1
 8000624:	d96a      	bls.n	80006fc <__udivmoddi4+0x2b4>
 8000626:	3802      	subs	r0, #2
 8000628:	4461      	add	r1, ip
 800062a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062e:	fba0 9402 	umull	r9, r4, r0, r2
 8000632:	eba1 010e 	sub.w	r1, r1, lr
 8000636:	42a1      	cmp	r1, r4
 8000638:	46c8      	mov	r8, r9
 800063a:	46a6      	mov	lr, r4
 800063c:	d356      	bcc.n	80006ec <__udivmoddi4+0x2a4>
 800063e:	d053      	beq.n	80006e8 <__udivmoddi4+0x2a0>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x212>
 8000642:	ebb3 0208 	subs.w	r2, r3, r8
 8000646:	eb61 010e 	sbc.w	r1, r1, lr
 800064a:	fa01 f707 	lsl.w	r7, r1, r7
 800064e:	fa22 f306 	lsr.w	r3, r2, r6
 8000652:	40f1      	lsrs	r1, r6
 8000654:	431f      	orrs	r7, r3
 8000656:	e9c5 7100 	strd	r7, r1, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	f1c2 0320 	rsb	r3, r2, #32
 8000666:	40d8      	lsrs	r0, r3
 8000668:	fa0c fc02 	lsl.w	ip, ip, r2
 800066c:	fa21 f303 	lsr.w	r3, r1, r3
 8000670:	4091      	lsls	r1, r2
 8000672:	4301      	orrs	r1, r0
 8000674:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000678:	fa1f fe8c 	uxth.w	lr, ip
 800067c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000680:	fb07 3610 	mls	r6, r7, r0, r3
 8000684:	0c0b      	lsrs	r3, r1, #16
 8000686:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800068a:	fb00 f60e 	mul.w	r6, r0, lr
 800068e:	429e      	cmp	r6, r3
 8000690:	fa04 f402 	lsl.w	r4, r4, r2
 8000694:	d908      	bls.n	80006a8 <__udivmoddi4+0x260>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 38ff 	add.w	r8, r0, #4294967295
 800069e:	d22f      	bcs.n	8000700 <__udivmoddi4+0x2b8>
 80006a0:	429e      	cmp	r6, r3
 80006a2:	d92d      	bls.n	8000700 <__udivmoddi4+0x2b8>
 80006a4:	3802      	subs	r0, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	1b9b      	subs	r3, r3, r6
 80006aa:	b289      	uxth	r1, r1
 80006ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80006b0:	fb07 3316 	mls	r3, r7, r6, r3
 80006b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b8:	fb06 f30e 	mul.w	r3, r6, lr
 80006bc:	428b      	cmp	r3, r1
 80006be:	d908      	bls.n	80006d2 <__udivmoddi4+0x28a>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c8:	d216      	bcs.n	80006f8 <__udivmoddi4+0x2b0>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d914      	bls.n	80006f8 <__udivmoddi4+0x2b0>
 80006ce:	3e02      	subs	r6, #2
 80006d0:	4461      	add	r1, ip
 80006d2:	1ac9      	subs	r1, r1, r3
 80006d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d8:	e738      	b.n	800054c <__udivmoddi4+0x104>
 80006da:	462e      	mov	r6, r5
 80006dc:	4628      	mov	r0, r5
 80006de:	e705      	b.n	80004ec <__udivmoddi4+0xa4>
 80006e0:	4606      	mov	r6, r0
 80006e2:	e6e3      	b.n	80004ac <__udivmoddi4+0x64>
 80006e4:	4618      	mov	r0, r3
 80006e6:	e6f8      	b.n	80004da <__udivmoddi4+0x92>
 80006e8:	454b      	cmp	r3, r9
 80006ea:	d2a9      	bcs.n	8000640 <__udivmoddi4+0x1f8>
 80006ec:	ebb9 0802 	subs.w	r8, r9, r2
 80006f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f4:	3801      	subs	r0, #1
 80006f6:	e7a3      	b.n	8000640 <__udivmoddi4+0x1f8>
 80006f8:	4646      	mov	r6, r8
 80006fa:	e7ea      	b.n	80006d2 <__udivmoddi4+0x28a>
 80006fc:	4620      	mov	r0, r4
 80006fe:	e794      	b.n	800062a <__udivmoddi4+0x1e2>
 8000700:	4640      	mov	r0, r8
 8000702:	e7d1      	b.n	80006a8 <__udivmoddi4+0x260>
 8000704:	46d0      	mov	r8, sl
 8000706:	e77b      	b.n	8000600 <__udivmoddi4+0x1b8>
 8000708:	3b02      	subs	r3, #2
 800070a:	4461      	add	r1, ip
 800070c:	e732      	b.n	8000574 <__udivmoddi4+0x12c>
 800070e:	4630      	mov	r0, r6
 8000710:	e709      	b.n	8000526 <__udivmoddi4+0xde>
 8000712:	4464      	add	r4, ip
 8000714:	3802      	subs	r0, #2
 8000716:	e742      	b.n	800059e <__udivmoddi4+0x156>

08000718 <__aeabi_idiv0>:
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000724:	2334      	movs	r3, #52	; 0x34
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	4a08      	ldr	r2, [pc, #32]	; (8000750 <tx_application_define+0x34>)
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <tx_application_define+0x38>)
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <tx_application_define+0x3c>)
 8000732:	f004 feeb 	bl	800550c <_txe_byte_pool_create>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d104      	bne.n	8000746 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <tx_application_define+0x3c>)
 800073e:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f000 f80b 	bl	800075c <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000fcc 	.word	0x20000fcc
 8000754:	080058a0 	.word	0x080058a0
 8000758:	200013cc 	.word	0x200013cc

0800075c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af08      	add	r7, sp, #32
 8000762:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;

  tx_thread_create(&led_thread, "led_thread", led_thread_entry, 0x1234,
 800076c:	23b0      	movs	r3, #176	; 0xb0
 800076e:	9306      	str	r3, [sp, #24]
 8000770:	2301      	movs	r3, #1
 8000772:	9305      	str	r3, [sp, #20]
 8000774:	2301      	movs	r3, #1
 8000776:	9304      	str	r3, [sp, #16]
 8000778:	230f      	movs	r3, #15
 800077a:	9303      	str	r3, [sp, #12]
 800077c:	230f      	movs	r3, #15
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <App_ThreadX_Init+0x54>)
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	f241 2334 	movw	r3, #4660	; 0x1234
 800078e:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <App_ThreadX_Init+0x58>)
 8000790:	4909      	ldr	r1, [pc, #36]	; (80007b8 <App_ThreadX_Init+0x5c>)
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <App_ThreadX_Init+0x60>)
 8000794:	f004 ff5a 	bl	800564c <_txe_thread_create>
  		  led_thread_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
 8000798:	221e      	movs	r2, #30
 800079a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <App_ThreadX_Init+0x64>)
 80007a0:	f004 fa6e 	bl	8004c80 <_tx_trace_enable>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007a4:	68fb      	ldr	r3, [r7, #12]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20001400 	.word	0x20001400
 80007b4:	080007d1 	.word	0x080007d1
 80007b8:	080058b4 	.word	0x080058b4
 80007bc:	20001800 	.word	0x20001800
 80007c0:	20000000 	.word	0x20000000

080007c4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80007c8:	f002 ffec 	bl	80037a4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <led_thread_entry>:

/* USER CODE BEGIN 1 */

VOID led_thread_entry(ULONG initial_input)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80007d8:	2120      	movs	r1, #32
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f000 fd1b 	bl	8001218 <HAL_GPIO_TogglePin>
		tx_thread_sleep(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f003 fa14 	bl	8003c10 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80007e8:	e7f6      	b.n	80007d8 <led_thread_entry+0x8>

080007ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fa5f 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f807 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f887 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007fa:	f000 f855 	bl	80008a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80007fe:	f7ff ffe1 	bl	80007c4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000802:	e7fe      	b.n	8000802 <main+0x18>

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b096      	sub	sp, #88	; 0x58
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2244      	movs	r2, #68	; 0x44
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 f830 	bl	8005878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800082a:	f000 fd1d 	bl	8001268 <HAL_PWREx_ControlVoltageScaling>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000834:	f000 f8e0 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	2302      	movs	r3, #2
 800084c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000852:	230a      	movs	r3, #10
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000856:	2307      	movs	r3, #7
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fd54 	bl	8001314 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000872:	f000 f8c1 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2104      	movs	r1, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f954 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089a:	f000 f8ad 	bl	80009f8 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3758      	adds	r7, #88	; 0x58
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	f002 f96c 	bl	8002bc8 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f87f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200018b0 	.word	0x200018b0
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a2a      	ldr	r2, [pc, #168]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_GPIO_Init+0xc4>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_GPIO_Init+0xc4>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 fc2f 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0xc8>)
 80009a2:	f000 faa7 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 fa98 	bl	8000ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000800 	.word	0x48000800

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f983 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40001000 	.word	0x40001000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0a4      	sub	sp, #144	; 0x90
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2268      	movs	r2, #104	; 0x68
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 ff03 	bl	8005878 <memset>
  if(huart->Instance==USART2)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <HAL_UART_MspInit+0xb0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d13a      	bne.n	8000af2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 faad 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f7ff ffb0 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f000 fa01 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3790      	adds	r7, #144	; 0x90
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_InitTick+0xe0>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <HAL_InitTick+0xe0>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <HAL_InitTick+0xe0>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2a:	f107 0210 	add.w	r2, r7, #16
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f9c5 	bl	8001ec4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b44:	f001 f992 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000b48:	6378      	str	r0, [r7, #52]	; 0x34
 8000b4a:	e004      	b.n	8000b56 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4c:	f001 f98e 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000b50:	4603      	mov	r3, r0
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_InitTick+0xe4>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3b01      	subs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_InitTick+0xe8>)
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_InitTick+0xe8>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xe8>)
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_InitTick+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_InitTick+0xe8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <HAL_InitTick+0xe8>)
 8000b8c:	f001 fd8a 	bl	80026a4 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <HAL_InitTick+0xe8>)
 8000ba0:	f001 fde2 	bl	8002768 <HAL_TIM_Base_Start_IT>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d111      	bne.n	8000bd6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb2:	2036      	movs	r0, #54	; 0x36
 8000bb4:	f000 f990 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d808      	bhi.n	8000bd0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	2036      	movs	r0, #54	; 0x36
 8000bc4:	f000 f96c 	bl	8000ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0xf0>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e002      	b.n	8000bd6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	20001934 	.word	0x20001934
 8000bf0:	40001000 	.word	0x40001000
 8000bf4:	20000fa4 	.word	0x20000fa4

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f001 fdf9 	bl	8002820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20001934 	.word	0x20001934

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f004 fdd1 	bl	8005830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fdac 	bl	80007ea <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000c98:	20000fa0 	.word	0x20000fa0
  ldr r1, =_edata
 8000c9c:	20000fb0 	.word	0x20000fb0
  ldr r2, =_sidata
 8000ca0:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 8000ca4:	20000fb0 	.word	0x20000fb0
  ldr r4, =_ebss
 8000ca8:	20001ff0 	.word	0x20001ff0

08000cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_Init+0x3c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_Init+0x3c>)
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f000 f8df 	bl	8000e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ccc:	200f      	movs	r0, #15
 8000cce:	f7ff ff19 	bl	8000b04 <HAL_InitTick>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	e001      	b.n	8000ce2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cde:	f7ff fe91 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000fa8 	.word	0x20000fa8
 8000d14:	20001980 	.word	0x20001980

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20001980 	.word	0x20001980

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4c 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff61 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb1 	bl	8000e24 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff80 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff54 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e154      	b.n	80011ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8146 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80a0 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6613      	str	r3, [r2, #96]	; 0x60
 8001074:	4b55      	ldr	r3, [pc, #340]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a53      	ldr	r2, [pc, #332]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1e8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2e8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <HAL_GPIO_Init+0x2ec>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e008      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aea3 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43d9      	mvns	r1, r3
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	400b      	ands	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_PWREx_GetVoltageRange+0x18>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001276:	d130      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001284:	d038      	beq.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001294:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2232      	movs	r2, #50	; 0x32
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	3301      	adds	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ac:	e002      	b.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c0:	d102      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f2      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	d110      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e00f      	b.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d007      	beq.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000
 800130c:	20000fa0 	.word	0x20000fa0
 8001310:	431bde83 	.word	0x431bde83

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f000 bc02 	b.w	8001b2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001328:	4b96      	ldr	r3, [pc, #600]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001332:	4b94      	ldr	r3, [pc, #592]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80e4 	beq.w	8001512 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <HAL_RCC_OscConfig+0x4c>
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	f040 808b 	bne.w	800146e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b01      	cmp	r3, #1
 800135c:	f040 8087 	bne.w	800146e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001360:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_OscConfig+0x64>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e3d9      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_RCC_OscConfig+0x7e>
 8001388:	4b7e      	ldr	r3, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001390:	e005      	b.n	800139e <HAL_RCC_OscConfig+0x8a>
 8001392:	4b7c      	ldr	r3, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139e:	4293      	cmp	r3, r2
 80013a0:	d223      	bcs.n	80013ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fdbe 	bl	8001f28 <RCC_SetFlashLatencyFromMSIRange>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e3ba      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b6:	4b73      	ldr	r3, [pc, #460]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a72      	ldr	r2, [pc, #456]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b70      	ldr	r3, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	496d      	ldr	r1, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d4:	4b6b      	ldr	r3, [pc, #428]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4968      	ldr	r1, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e025      	b.n	8001436 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a65      	ldr	r2, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4960      	ldr	r1, [pc, #384]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001408:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	495b      	ldr	r1, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fd7e 	bl	8001f28 <RCC_SetFlashLatencyFromMSIRange>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e37a      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001436:	f000 fc81 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 800143a:	4602      	mov	r2, r0
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	4950      	ldr	r1, [pc, #320]	; (8001588 <HAL_RCC_OscConfig+0x274>)
 8001448:	5ccb      	ldrb	r3, [r1, r3]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	4a4e      	ldr	r2, [pc, #312]	; (800158c <HAL_RCC_OscConfig+0x278>)
 8001454:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <HAL_RCC_OscConfig+0x27c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb52 	bl	8000b04 <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d052      	beq.n	8001510 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	e35e      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d032      	beq.n	80014dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a42      	ldr	r2, [pc, #264]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001482:	f7ff fc49 	bl	8000d18 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800148a:	f7ff fc45 	bl	8000d18 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e347      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a35      	ldr	r2, [pc, #212]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4930      	ldr	r1, [pc, #192]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	492b      	ldr	r1, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
 80014da:	e01a      	b.n	8001512 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc16 	bl	8000d18 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc12 	bl	8000d18 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e314      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1dc>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d073      	beq.n	8001606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b08      	cmp	r3, #8
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x21c>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d10e      	bne.n	8001548 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d10b      	bne.n	8001548 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d063      	beq.n	8001604 <HAL_RCC_OscConfig+0x2f0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d15f      	bne.n	8001604 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e2f1      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x24c>
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e025      	b.n	80015ac <HAL_RCC_OscConfig+0x298>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d114      	bne.n	8001594 <HAL_RCC_OscConfig+0x280>
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a02      	ldr	r2, [pc, #8]	; (8001584 <HAL_RCC_OscConfig+0x270>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e013      	b.n	80015ac <HAL_RCC_OscConfig+0x298>
 8001584:	40021000 	.word	0x40021000
 8001588:	080058d4 	.word	0x080058d4
 800158c:	20000fa0 	.word	0x20000fa0
 8001590:	20000fa4 	.word	0x20000fa4
 8001594:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a9f      	ldr	r2, [pc, #636]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800159a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b9d      	ldr	r3, [pc, #628]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a9c      	ldr	r2, [pc, #624]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbb0 	bl	8000d18 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbac 	bl	8000d18 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e2ae      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ce:	4b92      	ldr	r3, [pc, #584]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x2a8>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb9c 	bl	8000d18 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb98 	bl	8000d18 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e29a      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2d0>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d060      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x310>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d119      	bne.n	8001652 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d116      	bne.n	8001652 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x328>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e277      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	4973      	ldr	r1, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001650:	e040      	b.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d023      	beq.n	80016a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165a:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff fb57 	bl	8000d18 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fb53 	bl	8000d18 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e255      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b62      	ldr	r3, [pc, #392]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	495f      	ldr	r1, [pc, #380]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e018      	b.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80016a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb33 	bl	8000d18 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb2f 	bl	8000d18 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e231      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d03c      	beq.n	800175a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01c      	beq.n	8001722 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e8:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb0e 	bl	8000d18 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fb0a 	bl	8000d18 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e20c      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x3ec>
 8001720:	e01b      	b.n	800175a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001728:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff faf1 	bl	8000d18 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff faed 	bl	8000d18 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1ef      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ef      	bne.n	800173a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a6 	beq.w	80018b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001790:	2301      	movs	r3, #1
 8001792:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_OscConfig+0x508>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d118      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_RCC_OscConfig+0x508>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x508>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fab4 	bl	8000d18 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7ff fab0 	bl	8000d18 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1b2      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_RCC_OscConfig+0x508>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_RCC_OscConfig+0x4d8>
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ea:	e029      	b.n	8001840 <HAL_RCC_OscConfig+0x52c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d115      	bne.n	8001820 <HAL_RCC_OscConfig+0x50c>
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_RCC_OscConfig+0x504>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x52c>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40007000 	.word	0x40007000
 8001820:	4b9a      	ldr	r3, [pc, #616]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001826:	4a99      	ldr	r2, [pc, #612]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001830:	4b96      	ldr	r3, [pc, #600]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d016      	beq.n	8001876 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fa66 	bl	8000d18 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fa62 	bl	8000d18 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e162      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ed      	beq.n	8001850 <HAL_RCC_OscConfig+0x53c>
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fa4f 	bl	8000d18 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fa4b 	bl	8000d18 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e14b      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001894:	4b7d      	ldr	r3, [pc, #500]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ed      	bne.n	800187e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a77      	ldr	r2, [pc, #476]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c8:	4b70      	ldr	r3, [pc, #448]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80018ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ce:	4a6f      	ldr	r2, [pc, #444]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa1e 	bl	8000d18 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e0:	f7ff fa1a 	bl	8000d18 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e11c      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f2:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80018f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x5cc>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001902:	4b62      	ldr	r3, [pc, #392]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001908:	4a60      	ldr	r2, [pc, #384]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fa01 	bl	8000d18 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191a:	f7ff f9fd 	bl	8000d18 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0ff      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80f3 	beq.w	8001b2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 80c9 	bne.w	8001ae0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800194e:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0203 	and.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	429a      	cmp	r2, r3
 8001960:	d12c      	bne.n	80019bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	3b01      	subs	r3, #1
 800196e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d123      	bne.n	80019bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d11b      	bne.n	80019bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d113      	bne.n	80019bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d109      	bne.n	80019bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d06b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d062      	beq.n	8001a88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0ac      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019de:	f7ff f99b 	bl	8000d18 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f997 	bl	8000d18 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e099      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a14:	3a01      	subs	r2, #1
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0552      	lsls	r2, r2, #21
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a32:	0852      	lsrs	r2, r2, #1
 8001a34:	3a01      	subs	r2, #1
 8001a36:	0652      	lsls	r2, r2, #25
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a3e:	06d2      	lsls	r2, r2, #27
 8001a40:	430a      	orrs	r2, r1
 8001a42:	4912      	ldr	r1, [pc, #72]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a60:	f7ff f95a 	bl	8000d18 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f956 	bl	8000d18 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e058      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_RCC_OscConfig+0x778>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a86:	e050      	b.n	8001b2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e04f      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d144      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab8:	f7ff f92e 	bl	8000d18 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f92a 	bl	8000d18 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e02c      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x7ac>
 8001ade:	e024      	b.n	8001b2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d01f      	beq.n	8001b26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f911 	bl	8000d18 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f90d 	bl	8000d18 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4905      	ldr	r1, [pc, #20]	; (8001b34 <HAL_RCC_OscConfig+0x820>)
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_OscConfig+0x824>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
 8001b24:	e001      	b.n	8001b2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	feeefffc 	.word	0xfeeefffc

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0e7      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4970      	ldr	r1, [pc, #448]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b6e      	ldr	r3, [pc, #440]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0cf      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4960      	ldr	r1, [pc, #384]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04c      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d121      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0a6      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e09a      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e08e      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e086      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4943      	ldr	r1, [pc, #268]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c24:	f7ff f878 	bl	8000d18 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff f874 	bl	8000d18 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e06e      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d208      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	492b      	ldr	r1, [pc, #172]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d210      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 0207 	bic.w	r2, r3, #7
 8001c98:	4923      	ldr	r1, [pc, #140]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e036      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4918      	ldr	r1, [pc, #96]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4910      	ldr	r1, [pc, #64]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf0:	f000 f824 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	490b      	ldr	r1, [pc, #44]	; (8001d30 <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1fc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fef5 	bl	8000b04 <HAL_InitTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	080058d4 	.word	0x080058d4
 8001d34:	20000fa0 	.word	0x20000fa0
 8001d38:	20000fa4 	.word	0x20000fa4

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d121      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11e      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d98:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e004      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d134      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xac>
 8001de0:	e005      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001de4:	617b      	str	r3, [r7, #20]
      break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e002      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	3301      	adds	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	fb03 f202 	mul.w	r2, r3, r2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	0e5b      	lsrs	r3, r3, #25
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	3301      	adds	r3, #1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e34:	69bb      	ldr	r3, [r7, #24]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080058ec 	.word	0x080058ec
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200

08001e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000fa0 	.word	0x20000fa0

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4904      	ldr	r1, [pc, #16]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080058e4 	.word	0x080058e4

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e9c:	f7ff ffda 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080058e4 	.word	0x080058e4

08001ec4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_RCC_GetClockConfig+0x60>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0207 	and.w	r2, r3, #7
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40022000 	.word	0x40022000

08001f28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f40:	f7ff f984 	bl	800124c <HAL_PWREx_GetVoltageRange>
 8001f44:	6178      	str	r0, [r7, #20]
 8001f46:	e014      	b.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6593      	str	r3, [r2, #88]	; 0x58
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f60:	f7ff f974 	bl	800124c <HAL_PWREx_GetVoltageRange>
 8001f64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f78:	d10b      	bne.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d919      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2ba0      	cmp	r3, #160	; 0xa0
 8001f84:	d902      	bls.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e013      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e010      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d902      	bls.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f98:	2303      	movs	r3, #3
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e00a      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d102      	bne.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e004      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b70      	cmp	r3, #112	; 0x70
 8001fae:	d101      	bne.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002000:	2b00      	cmp	r3, #0
 8002002:	d031      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800200c:	d01a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800200e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002012:	d814      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800201c:	d10f      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4a5c      	ldr	r2, [pc, #368]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fa44 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800204c:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	494e      	ldr	r1, [pc, #312]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 809e 	beq.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	4a3f      	ldr	r2, [pc, #252]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	; 0x58
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a39      	ldr	r2, [pc, #228]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fe2e 	bl	8000d18 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe fe2a 	bl	8000d18 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d902      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	74fb      	strb	r3, [r7, #19]
        break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d15a      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01e      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d019      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d016      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fdea 	bl	8000d18 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	e00b      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fde6 	bl	8000d18 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d902      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	74fb      	strb	r3, [r7, #19]
            break;
 800215e:	e006      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ec      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002182:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800218a:	e009      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	74bb      	strb	r3, [r7, #18]
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a0:	7c7b      	ldrb	r3, [r7, #17]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a9d      	ldr	r2, [pc, #628]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f023 0203 	bic.w	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4994      	ldr	r1, [pc, #592]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 020c 	bic.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	498c      	ldr	r1, [pc, #560]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002202:	4b87      	ldr	r3, [pc, #540]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	4983      	ldr	r1, [pc, #524]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	497b      	ldr	r1, [pc, #492]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4972      	ldr	r1, [pc, #456]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	496a      	ldr	r1, [pc, #424]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	4961      	ldr	r1, [pc, #388]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ac:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	4959      	ldr	r1, [pc, #356]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	4950      	ldr	r1, [pc, #320]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	4948      	ldr	r1, [pc, #288]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002318:	f023 0203 	bic.w	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	493f      	ldr	r1, [pc, #252]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d028      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002352:	d106      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235e:	60d3      	str	r3, [r2, #12]
 8002360:	e011      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236a:	d10c      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	2101      	movs	r1, #1
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f8a4 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d028      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	491f      	ldr	r1, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023bc:	60d3      	str	r3, [r2, #12]
 80023be:	e011      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f875 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02b      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240e:	d109      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	60d3      	str	r3, [r2, #12]
 800241c:	e014      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800242c:	d10c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f843 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002472:	d10c      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f820 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000

080024c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ce:	4b74      	ldr	r3, [pc, #464]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d018      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024da:	4b71      	ldr	r3, [pc, #452]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
       ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024f2:	4b6b      	ldr	r3, [pc, #428]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
       ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d047      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e044      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d018      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0x86>
 8002514:	2b03      	cmp	r3, #3
 8002516:	d825      	bhi.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d002      	beq.n	8002522 <RCCEx_PLLSAI1_Config+0x62>
 800251c:	2b02      	cmp	r3, #2
 800251e:	d009      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x74>
 8002520:	e020      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11d      	bne.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002532:	e01a      	b.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002534:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e013      	b.n	800256e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002546:	4b56      	ldr	r3, [pc, #344]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002552:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002562:	e006      	b.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e004      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002572:	bf00      	nop
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	430b      	orrs	r3, r1
 8002590:	4943      	ldr	r1, [pc, #268]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d17c      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3f      	ldr	r2, [pc, #252]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fbb6 	bl	8000d18 <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ae:	e009      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b0:	f7fe fbb2 	bl	8000d18 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	73fb      	strb	r3, [r7, #15]
        break;
 80025c2:	e005      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ef      	bne.n	80025b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15f      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d110      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	0211      	lsls	r1, r2, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	06d2      	lsls	r2, r2, #27
 80025f4:	430a      	orrs	r2, r1
 80025f6:	492a      	ldr	r1, [pc, #168]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	610b      	str	r3, [r1, #16]
 80025fc:	e027      	b.n	800264e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d112      	bne.n	800262a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800260c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6892      	ldr	r2, [r2, #8]
 8002614:	0211      	lsls	r1, r2, #8
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6912      	ldr	r2, [r2, #16]
 800261a:	0852      	lsrs	r2, r2, #1
 800261c:	3a01      	subs	r2, #1
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]
 8002628:	e011      	b.n	800264e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	0211      	lsls	r1, r2, #8
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6952      	ldr	r2, [r2, #20]
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	3a01      	subs	r2, #1
 8002644:	0652      	lsls	r2, r2, #25
 8002646:	430a      	orrs	r2, r1
 8002648:	4915      	ldr	r1, [pc, #84]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002658:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fb5d 	bl	8000d18 <HAL_GetTick>
 800265e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002660:	e009      	b.n	8002676 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002662:	f7fe fb59 	bl	8000d18 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d902      	bls.n	8002676 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	73fb      	strb	r3, [r7, #15]
          break;
 8002674:	e005      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ef      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e049      	b.n	800274a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f841 	bl	8002752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f000 f9e4 	bl	8002ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e040      	b.n	8002802 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_TIM_Base_Start_IT+0xa8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d009      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_TIM_Base_Start_IT+0xac>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_TIM_Base_Start_IT+0xb0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d115      	bne.n	80027ec <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_TIM_Base_Start_IT+0xb4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d015      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x96>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d011      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	e008      	b.n	80027fe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e000      	b.n	8002800 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400
 8002818:	40014000 	.word	0x40014000
 800281c:	00010007 	.word	0x00010007

08002820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b02      	cmp	r3, #2
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b02      	cmp	r3, #2
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0202 	mvn.w	r2, #2
 800284c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f905 	bl	8002a72 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8f7 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f908 	bl	8002a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b04      	cmp	r3, #4
 8002888:	d122      	bne.n	80028d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d11b      	bne.n	80028d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0204 	mvn.w	r2, #4
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8db 	bl	8002a72 <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8cd 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8de 	bl	8002a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d122      	bne.n	8002924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d11b      	bne.n	8002924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0208 	mvn.w	r2, #8
 80028f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8b1 	bl	8002a72 <HAL_TIM_IC_CaptureCallback>
 8002910:	e005      	b.n	800291e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8a3 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f8b4 	bl	8002a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b10      	cmp	r3, #16
 8002930:	d122      	bne.n	8002978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d11b      	bne.n	8002978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f887 	bl	8002a72 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f879 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f88a 	bl	8002a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0201 	mvn.w	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f818 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8e8 	bl	8002ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d10e      	bne.n	80029fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d107      	bne.n	80029fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8db 	bl	8002bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d10e      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d107      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f838 	bl	8002a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d10e      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0220 	mvn.w	r2, #32
 8002a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f89b 	bl	8002b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <TIM_Base_SetConfig+0xcc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x28>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x28>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	; (8002b80 <TIM_Base_SetConfig+0xd0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <TIM_Base_SetConfig+0xcc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <TIM_Base_SetConfig+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <TIM_Base_SetConfig+0xd4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <TIM_Base_SetConfig+0xd8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <TIM_Base_SetConfig+0xcc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <TIM_Base_SetConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <TIM_Base_SetConfig+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <TIM_Base_SetConfig+0xd8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400

08002b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e040      	b.n	8002c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd ff2e 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f82c 	bl	8002c64 <UART_SetConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 faa6 	bl	8003170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb2d 	bl	80032b4 <UART_CheckIdleState>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4ba5      	ldr	r3, [pc, #660]	; (8002f28 <UART_SetConfig+0x2c4>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a9a      	ldr	r2, [pc, #616]	; (8002f2c <UART_SetConfig+0x2c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a91      	ldr	r2, [pc, #580]	; (8002f30 <UART_SetConfig+0x2cc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d126      	bne.n	8002d3c <UART_SetConfig+0xd8>
 8002cee:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <UART_SetConfig+0x2d0>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d81b      	bhi.n	8002d34 <UART_SetConfig+0xd0>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0xa0>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d25 	.word	0x08002d25
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d2d 	.word	0x08002d2d
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1a:	e0d6      	b.n	8002eca <UART_SetConfig+0x266>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d22:	e0d2      	b.n	8002eca <UART_SetConfig+0x266>
 8002d24:	2304      	movs	r3, #4
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2a:	e0ce      	b.n	8002eca <UART_SetConfig+0x266>
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d32:	e0ca      	b.n	8002eca <UART_SetConfig+0x266>
 8002d34:	2310      	movs	r3, #16
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3a:	e0c6      	b.n	8002eca <UART_SetConfig+0x266>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <UART_SetConfig+0x2d4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d138      	bne.n	8002db8 <UART_SetConfig+0x154>
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <UART_SetConfig+0x2d0>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d82d      	bhi.n	8002db0 <UART_SetConfig+0x14c>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0xf8>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002db1 	.word	0x08002db1
 8002d64:	08002db1 	.word	0x08002db1
 8002d68:	08002db1 	.word	0x08002db1
 8002d6c:	08002da1 	.word	0x08002da1
 8002d70:	08002db1 	.word	0x08002db1
 8002d74:	08002db1 	.word	0x08002db1
 8002d78:	08002db1 	.word	0x08002db1
 8002d7c:	08002d99 	.word	0x08002d99
 8002d80:	08002db1 	.word	0x08002db1
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08002db1 	.word	0x08002db1
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e098      	b.n	8002eca <UART_SetConfig+0x266>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	e094      	b.n	8002eca <UART_SetConfig+0x266>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e090      	b.n	8002eca <UART_SetConfig+0x266>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dae:	e08c      	b.n	8002eca <UART_SetConfig+0x266>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e088      	b.n	8002eca <UART_SetConfig+0x266>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5f      	ldr	r2, [pc, #380]	; (8002f3c <UART_SetConfig+0x2d8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d125      	bne.n	8002e0e <UART_SetConfig+0x1aa>
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <UART_SetConfig+0x2d0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d016      	beq.n	8002dfe <UART_SetConfig+0x19a>
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d818      	bhi.n	8002e06 <UART_SetConfig+0x1a2>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d00a      	beq.n	8002dee <UART_SetConfig+0x18a>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d814      	bhi.n	8002e06 <UART_SetConfig+0x1a2>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <UART_SetConfig+0x182>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d008      	beq.n	8002df6 <UART_SetConfig+0x192>
 8002de4:	e00f      	b.n	8002e06 <UART_SetConfig+0x1a2>
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dec:	e06d      	b.n	8002eca <UART_SetConfig+0x266>
 8002dee:	2302      	movs	r3, #2
 8002df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df4:	e069      	b.n	8002eca <UART_SetConfig+0x266>
 8002df6:	2304      	movs	r3, #4
 8002df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfc:	e065      	b.n	8002eca <UART_SetConfig+0x266>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e04:	e061      	b.n	8002eca <UART_SetConfig+0x266>
 8002e06:	2310      	movs	r3, #16
 8002e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0c:	e05d      	b.n	8002eca <UART_SetConfig+0x266>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <UART_SetConfig+0x2dc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d125      	bne.n	8002e64 <UART_SetConfig+0x200>
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <UART_SetConfig+0x2d0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e22:	2bc0      	cmp	r3, #192	; 0xc0
 8002e24:	d016      	beq.n	8002e54 <UART_SetConfig+0x1f0>
 8002e26:	2bc0      	cmp	r3, #192	; 0xc0
 8002e28:	d818      	bhi.n	8002e5c <UART_SetConfig+0x1f8>
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d00a      	beq.n	8002e44 <UART_SetConfig+0x1e0>
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d814      	bhi.n	8002e5c <UART_SetConfig+0x1f8>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <UART_SetConfig+0x1d8>
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d008      	beq.n	8002e4c <UART_SetConfig+0x1e8>
 8002e3a:	e00f      	b.n	8002e5c <UART_SetConfig+0x1f8>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e42:	e042      	b.n	8002eca <UART_SetConfig+0x266>
 8002e44:	2302      	movs	r3, #2
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4a:	e03e      	b.n	8002eca <UART_SetConfig+0x266>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e52:	e03a      	b.n	8002eca <UART_SetConfig+0x266>
 8002e54:	2308      	movs	r3, #8
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5a:	e036      	b.n	8002eca <UART_SetConfig+0x266>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e62:	e032      	b.n	8002eca <UART_SetConfig+0x266>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <UART_SetConfig+0x2c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d12a      	bne.n	8002ec4 <UART_SetConfig+0x260>
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <UART_SetConfig+0x2d0>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7c:	d01a      	beq.n	8002eb4 <UART_SetConfig+0x250>
 8002e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e82:	d81b      	bhi.n	8002ebc <UART_SetConfig+0x258>
 8002e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e88:	d00c      	beq.n	8002ea4 <UART_SetConfig+0x240>
 8002e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8e:	d815      	bhi.n	8002ebc <UART_SetConfig+0x258>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <UART_SetConfig+0x238>
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d008      	beq.n	8002eac <UART_SetConfig+0x248>
 8002e9a:	e00f      	b.n	8002ebc <UART_SetConfig+0x258>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e012      	b.n	8002eca <UART_SetConfig+0x266>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e00e      	b.n	8002eca <UART_SetConfig+0x266>
 8002eac:	2304      	movs	r3, #4
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb2:	e00a      	b.n	8002eca <UART_SetConfig+0x266>
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eba:	e006      	b.n	8002eca <UART_SetConfig+0x266>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec2:	e002      	b.n	8002eca <UART_SetConfig+0x266>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <UART_SetConfig+0x2c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f040 808b 	bne.w	8002fec <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d834      	bhi.n	8002f48 <UART_SetConfig+0x2e4>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x280>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f49 	.word	0x08002f49
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f49 	.word	0x08002f49
 8002ef4:	08002f17 	.word	0x08002f17
 8002ef8:	08002f49 	.word	0x08002f49
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f49 	.word	0x08002f49
 8002f04:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7fe ffb0 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002f0c:	61f8      	str	r0, [r7, #28]
        break;
 8002f0e:	e021      	b.n	8002f54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <UART_SetConfig+0x2e0>)
 8002f12:	61fb      	str	r3, [r7, #28]
        break;
 8002f14:	e01e      	b.n	8002f54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7fe ff11 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8002f1a:	61f8      	str	r0, [r7, #28]
        break;
 8002f1c:	e01a      	b.n	8002f54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	61fb      	str	r3, [r7, #28]
        break;
 8002f24:	e016      	b.n	8002f54 <UART_SetConfig+0x2f0>
 8002f26:	bf00      	nop
 8002f28:	efff69f3 	.word	0xefff69f3
 8002f2c:	40008000 	.word	0x40008000
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	40004800 	.word	0x40004800
 8002f40:	40004c00 	.word	0x40004c00
 8002f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80fa 	beq.w	8003150 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d305      	bcc.n	8002f78 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d903      	bls.n	8002f80 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f7e:	e0e7      	b.n	8003150 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2200      	movs	r2, #0
 8002f84:	461c      	mov	r4, r3
 8002f86:	4615      	mov	r5, r2
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	022b      	lsls	r3, r5, #8
 8002f92:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f96:	0222      	lsls	r2, r4, #8
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	6849      	ldr	r1, [r1, #4]
 8002f9c:	0849      	lsrs	r1, r1, #1
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	4688      	mov	r8, r1
 8002fa2:	4681      	mov	r9, r0
 8002fa4:	eb12 0a08 	adds.w	sl, r2, r8
 8002fa8:	eb43 0b09 	adc.w	fp, r3, r9
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fba:	4650      	mov	r0, sl
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	f7fd fa2b 	bl	8000418 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd0:	d308      	bcc.n	8002fe4 <UART_SetConfig+0x380>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd8:	d204      	bcs.n	8002fe4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e0b5      	b.n	8003150 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fea:	e0b1      	b.n	8003150 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff4:	d15d      	bne.n	80030b2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d827      	bhi.n	800304e <UART_SetConfig+0x3ea>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0x3a0>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003029 	.word	0x08003029
 8003008:	08003031 	.word	0x08003031
 800300c:	08003039 	.word	0x08003039
 8003010:	0800304f 	.word	0x0800304f
 8003014:	0800303f 	.word	0x0800303f
 8003018:	0800304f 	.word	0x0800304f
 800301c:	0800304f 	.word	0x0800304f
 8003020:	0800304f 	.word	0x0800304f
 8003024:	08003047 	.word	0x08003047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003028:	f7fe ff20 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 800302c:	61f8      	str	r0, [r7, #28]
        break;
 800302e:	e014      	b.n	800305a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003030:	f7fe ff32 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8003034:	61f8      	str	r0, [r7, #28]
        break;
 8003036:	e010      	b.n	800305a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <UART_SetConfig+0x508>)
 800303a:	61fb      	str	r3, [r7, #28]
        break;
 800303c:	e00d      	b.n	800305a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303e:	f7fe fe7d 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003042:	61f8      	str	r0, [r7, #28]
        break;
 8003044:	e009      	b.n	800305a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304a:	61fb      	str	r3, [r7, #28]
        break;
 800304c:	e005      	b.n	800305a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d077      	beq.n	8003150 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005a      	lsls	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	441a      	add	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d916      	bls.n	80030aa <UART_SetConfig+0x446>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d212      	bcs.n	80030aa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f023 030f 	bic.w	r3, r3, #15
 800308c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	b29a      	uxth	r2, r3
 800309a:	8afb      	ldrh	r3, [r7, #22]
 800309c:	4313      	orrs	r3, r2
 800309e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	8afa      	ldrh	r2, [r7, #22]
 80030a6:	60da      	str	r2, [r3, #12]
 80030a8:	e052      	b.n	8003150 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030b0:	e04e      	b.n	8003150 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d827      	bhi.n	800310a <UART_SetConfig+0x4a6>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <UART_SetConfig+0x45c>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	080030ed 	.word	0x080030ed
 80030c8:	080030f5 	.word	0x080030f5
 80030cc:	0800310b 	.word	0x0800310b
 80030d0:	080030fb 	.word	0x080030fb
 80030d4:	0800310b 	.word	0x0800310b
 80030d8:	0800310b 	.word	0x0800310b
 80030dc:	0800310b 	.word	0x0800310b
 80030e0:	08003103 	.word	0x08003103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e4:	f7fe fec2 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 80030e8:	61f8      	str	r0, [r7, #28]
        break;
 80030ea:	e014      	b.n	8003116 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7fe fed4 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 80030f0:	61f8      	str	r0, [r7, #28]
        break;
 80030f2:	e010      	b.n	8003116 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <UART_SetConfig+0x508>)
 80030f6:	61fb      	str	r3, [r7, #28]
        break;
 80030f8:	e00d      	b.n	8003116 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fa:	f7fe fe1f 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80030fe:	61f8      	str	r0, [r7, #28]
        break;
 8003100:	e009      	b.n	8003116 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003106:	61fb      	str	r3, [r7, #28]
        break;
 8003108:	e005      	b.n	8003116 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003114:	bf00      	nop
    }

    if (pclk != 0U)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d019      	beq.n	8003150 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	085a      	lsrs	r2, r3, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	441a      	add	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0f      	cmp	r3, #15
 8003134:	d909      	bls.n	800314a <UART_SetConfig+0x4e6>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d205      	bcs.n	800314a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	e002      	b.n	8003150 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800315c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316a:	bf00      	nop
 800316c:	00f42400 	.word	0x00f42400

08003170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01a      	beq.n	8003286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326e:	d10a      	bne.n	8003286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032c4:	f7fd fd28 	bl	8000d18 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d10e      	bne.n	80032f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f82d 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e023      	b.n	800333e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d10e      	bne.n	8003322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f817 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00d      	b.n	800333e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b09c      	sub	sp, #112	; 0x70
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	e0a5      	b.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	f000 80a1 	beq.w	80034a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fd fcd9 	bl	8000d18 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <UART_WaitOnFlagUntilTimeout+0x32>
 8003372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13e      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338c:	667b      	str	r3, [r7, #100]	; 0x64
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003398:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800339c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e6      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e067      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d04f      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d147      	bne.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800341c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
 800343e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	613b      	str	r3, [r7, #16]
   return(result);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	66bb      	str	r3, [r7, #104]	; 0x68
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003470:	623a      	str	r2, [r7, #32]
 8003472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69f9      	ldr	r1, [r7, #28]
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	61bb      	str	r3, [r7, #24]
   return(result);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e010      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	429a      	cmp	r2, r3
 80034c0:	f43f af4a 	beq.w	8003358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3770      	adds	r7, #112	; 0x70
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b096      	sub	sp, #88	; 0x58
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80034de:	2234      	movs	r2, #52	; 0x34
 80034e0:	2100      	movs	r1, #0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f002 f9c8 	bl	8005878 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f1a3 0208 	sub.w	r2, r3, #8
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2202      	movs	r2, #2
 800351c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4413      	add	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3b04      	subs	r3, #4
 800352e:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800353c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3b04      	subs	r3, #4
 8003542:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8003552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003554:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3304      	adds	r3, #4
 8003564:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <_tx_byte_pool_create+0x214>)
 800356e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003576:	f3ef 8310 	mrs	r3, PRIMASK
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800357e:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003580:	b672      	cpsid	i
#endif
    return(int_posture);
 8003582:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <_tx_byte_pool_create+0x218>)
 800358a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800358c:	4b57      	ldr	r3, [pc, #348]	; (80036ec <_tx_byte_pool_create+0x21c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003594:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <_tx_byte_pool_create+0x220>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
 80035a6:	e011      	b.n	80035cc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80035a8:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <_tx_byte_pool_create+0x220>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <_tx_byte_pool_create+0x21c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a46      	ldr	r2, [pc, #280]	; (80036ec <_tx_byte_pool_create+0x21c>)
 80035d4:	6013      	str	r3, [r2, #0]
    
    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	2008      	movs	r0, #8
 80035e2:	f001 fea7 	bl	8005334 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80035e6:	4b43      	ldr	r3, [pc, #268]	; (80036f4 <_tx_byte_pool_create+0x224>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06c      	beq.n	80036cc <_tx_byte_pool_create+0x1fc>
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <_tx_byte_pool_create+0x228>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d066      	beq.n	80036cc <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80035fe:	f3ef 8305 	mrs	r3, IPSR
 8003602:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <_tx_byte_pool_create+0x22c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <_tx_byte_pool_create+0x230>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <_tx_byte_pool_create+0x162>
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	4313      	orrs	r3, r2
 800362a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	e00e      	b.n	8003650 <_tx_byte_pool_create+0x180>
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003638:	d205      	bcs.n	8003646 <_tx_byte_pool_create+0x176>
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
 8003644:	e004      	b.n	8003650 <_tx_byte_pool_create+0x180>
 8003646:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	2215      	movs	r2, #21
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <_tx_byte_pool_create+0x234>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	611a      	str	r2, [r3, #16]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	619a      	str	r2, [r3, #24]
 800367c:	f107 0214 	add.w	r2, r7, #20
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	61da      	str	r2, [r3, #28]
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	3320      	adds	r3, #32
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <_tx_byte_pool_create+0x238>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d314      	bcc.n	80036be <_tx_byte_pool_create+0x1ee>
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <_tx_byte_pool_create+0x23c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <_tx_byte_pool_create+0x224>)
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <_tx_byte_pool_create+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a6:	621a      	str	r2, [r3, #32]
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <_tx_byte_pool_create+0x244>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <_tx_byte_pool_create+0x1fc>
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <_tx_byte_pool_create+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a16      	ldr	r2, [pc, #88]	; (8003710 <_tx_byte_pool_create+0x240>)
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
 80036bc:	e006      	b.n	80036cc <_tx_byte_pool_create+0x1fc>
 80036be:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <_tx_byte_pool_create+0x224>)
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <_tx_byte_pool_create+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	621a      	str	r2, [r3, #32]
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3750      	adds	r7, #80	; 0x50
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	ffffeeee 	.word	0xffffeeee
 80036e8:	42595445 	.word	0x42595445
 80036ec:	200019b0 	.word	0x200019b0
 80036f0:	200019ac 	.word	0x200019ac
 80036f4:	20001fd8 	.word	0x20001fd8
 80036f8:	20001fdc 	.word	0x20001fdc
 80036fc:	20000fac 	.word	0x20000fac
 8003700:	200019bc 	.word	0x200019bc
 8003704:	e0001004 	.word	0xe0001004
 8003708:	20001fd4 	.word	0x20001fd4
 800370c:	20001fd0 	.word	0x20001fd0
 8003710:	20001fc4 	.word	0x20001fc4
 8003714:	20001fe0 	.word	0x20001fe0

08003718 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800371c:	f001 fde4 	bl	80052e8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8003720:	f000 f9ec 	bl	8003afc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8003724:	f001 f898 	bl	8004858 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <_tx_initialize_high_level+0x5c>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <_tx_initialize_high_level+0x60>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <_tx_initialize_high_level+0x64>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <_tx_initialize_high_level+0x68>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <_tx_initialize_high_level+0x6c>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <_tx_initialize_high_level+0x70>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <_tx_initialize_high_level+0x74>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <_tx_initialize_high_level+0x78>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <_tx_initialize_high_level+0x7c>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <_tx_initialize_high_level+0x80>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <_tx_initialize_high_level+0x84>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <_tx_initialize_high_level+0x88>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
#endif
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20001984 	.word	0x20001984
 8003778:	20001988 	.word	0x20001988
 800377c:	2000198c 	.word	0x2000198c
 8003780:	20001990 	.word	0x20001990
 8003784:	20001994 	.word	0x20001994
 8003788:	20001998 	.word	0x20001998
 800378c:	200019a4 	.word	0x200019a4
 8003790:	200019a8 	.word	0x200019a8
 8003794:	200019ac 	.word	0x200019ac
 8003798:	200019b0 	.word	0x200019b0
 800379c:	2000199c 	.word	0x2000199c
 80037a0:	200019a0 	.word	0x200019a0

080037a4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <_tx_initialize_kernel_enter+0x48>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80037b0:	d00c      	beq.n	80037cc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <_tx_initialize_kernel_enter+0x48>)
 80037b4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80037b8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80037ba:	f7fc fd11 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80037be:	f7ff ffab 	bl	8003718 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <_tx_initialize_kernel_enter+0x4c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <_tx_initialize_kernel_enter+0x4c>)
 80037ca:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <_tx_initialize_kernel_enter+0x48>)
 80037ce:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80037d2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <_tx_initialize_kernel_enter+0x50>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fc ff9f 	bl	800071c <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80037de:	4b03      	ldr	r3, [pc, #12]	; (80037ec <_tx_initialize_kernel_enter+0x48>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80037e4:	f7fc fd3c 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000fac 	.word	0x20000fac
 80037f0:	20001a54 	.word	0x20001a54
 80037f4:	200019b4 	.word	0x200019b4

080037f8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b09a      	sub	sp, #104	; 0x68
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8003806:	2300      	movs	r3, #0
 8003808:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800380a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800380c:	21ef      	movs	r1, #239	; 0xef
 800380e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003810:	f002 f832 	bl	8005878 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8003814:	22b0      	movs	r2, #176	; 0xb0
 8003816:	2100      	movs	r1, #0
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f002 f82d 	bl	8005878 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003834:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800383a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003846:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800384e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003854:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800385e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	3b01      	subs	r3, #1
 8003866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003868:	4413      	add	r3, r2
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003870:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8003872:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003876:	429a      	cmp	r2, r3
 8003878:	d007      	beq.n	800388a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003888:	e006      	b.n	8003898 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003894:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2203      	movs	r2, #3
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a86      	ldr	r2, [pc, #536]	; (8003abc <_tx_thread_create+0x2c4>)
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80038aa:	4985      	ldr	r1, [pc, #532]	; (8003ac0 <_tx_thread_create+0x2c8>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f7fc fd37 	bl	8000320 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038b2:	f3ef 8310 	mrs	r3, PRIMASK
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80038bc:	b672      	cpsid	i
    return(int_posture);
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a7f      	ldr	r2, [pc, #508]	; (8003ac4 <_tx_thread_create+0x2cc>)
 80038c6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80038c8:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <_tx_thread_create+0x2d0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80038d0:	4a7e      	ldr	r2, [pc, #504]	; (8003acc <_tx_thread_create+0x2d4>)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80038e6:	e016      	b.n	8003916 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80038e8:	4b78      	ldr	r3, [pc, #480]	; (8003acc <_tx_thread_create+0x2d4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 80038ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80038fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800390a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8003916:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <_tx_thread_create+0x2d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <_tx_thread_create+0x2d0>)
 800391e:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8003920:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	2001      	movs	r0, #1
 800392e:	f001 fd01 	bl	8005334 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <_tx_thread_create+0x2d8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06b      	beq.n	8003a16 <_tx_thread_create+0x21e>
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <_tx_thread_create+0x2dc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d065      	beq.n	8003a16 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800394a:	f3ef 8305 	mrs	r3, IPSR
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003952:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <_tx_thread_create+0x2e0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
 800395a:	4b60      	ldr	r3, [pc, #384]	; (8003adc <_tx_thread_create+0x2e4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	653b      	str	r3, [r7, #80]	; 0x50
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <_tx_thread_create+0x186>
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	657b      	str	r3, [r7, #84]	; 0x54
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003974:	4313      	orrs	r3, r2
 8003976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
 800397c:	e00e      	b.n	800399c <_tx_thread_create+0x1a4>
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003984:	d205      	bcs.n	8003992 <_tx_thread_create+0x19a>
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	657b      	str	r3, [r7, #84]	; 0x54
 800398a:	f04f 33ff 	mov.w	r3, #4294967295
 800398e:	653b      	str	r3, [r7, #80]	; 0x50
 8003990:	e004      	b.n	800399c <_tx_thread_create+0x1a4>
 8003992:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003996:	653b      	str	r3, [r7, #80]	; 0x50
 8003998:	2300      	movs	r3, #0
 800399a:	657b      	str	r3, [r7, #84]	; 0x54
 800399c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	2264      	movs	r2, #100	; 0x64
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <_tx_thread_create+0x2e8>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ba:	611a      	str	r2, [r3, #16]
 80039bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039c0:	615a      	str	r2, [r3, #20]
 80039c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039cc:	61da      	str	r2, [r3, #28]
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	3320      	adds	r3, #32
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <_tx_thread_create+0x2ec>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039da:	429a      	cmp	r2, r3
 80039dc:	d314      	bcc.n	8003a08 <_tx_thread_create+0x210>
 80039de:	4b42      	ldr	r3, [pc, #264]	; (8003ae8 <_tx_thread_create+0x2f0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e4:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <_tx_thread_create+0x2d8>)
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <_tx_thread_create+0x2f4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f0:	621a      	str	r2, [r3, #32]
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <_tx_thread_create+0x2f8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <_tx_thread_create+0x21e>
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <_tx_thread_create+0x2f8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <_tx_thread_create+0x2f4>)
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
 8003a06:	e006      	b.n	8003a16 <_tx_thread_create+0x21e>
 8003a08:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <_tx_thread_create+0x2d8>)
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <_tx_thread_create+0x2f4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a14:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <_tx_thread_create+0x2fc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <_tx_thread_create+0x2fc>)
 8003a1e:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8003a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d129      	bne.n	8003a7a <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003a26:	f3ef 8305 	mrs	r3, IPSR
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8003a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <_tx_thread_create+0x2e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003a38:	d30d      	bcc.n	8003a56 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <_tx_thread_create+0x300>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8003a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <_tx_thread_create+0x262>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8003a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a54:	e001      	b.n	8003a5a <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa0e 	bl	8003e88 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01e      	beq.n	8003ab0 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8003a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a78:	e01a      	b.n	8003ab0 <_tx_thread_create+0x2b8>
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003a8e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a90:	b672      	cpsid	i
    return(int_posture);
 8003a92:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8003a94:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <_tx_thread_create+0x2fc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <_tx_thread_create+0x2fc>)
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003aac:	f000 f9b2 	bl	8003e14 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3760      	adds	r7, #96	; 0x60
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	0800479d 	.word	0x0800479d
 8003ac0:	08003b79 	.word	0x08003b79
 8003ac4:	54485244 	.word	0x54485244
 8003ac8:	200019c8 	.word	0x200019c8
 8003acc:	200019c4 	.word	0x200019c4
 8003ad0:	20001fd8 	.word	0x20001fd8
 8003ad4:	20001fdc 	.word	0x20001fdc
 8003ad8:	20000fac 	.word	0x20000fac
 8003adc:	200019bc 	.word	0x200019bc
 8003ae0:	e0001004 	.word	0xe0001004
 8003ae4:	20001fd4 	.word	0x20001fd4
 8003ae8:	20001fd0 	.word	0x20001fd0
 8003aec:	20001fc4 	.word	0x20001fc4
 8003af0:	20001fe0 	.word	0x20001fe0
 8003af4:	20001a54 	.word	0x20001a54
 8003af8:	200019c0 	.word	0x200019c0

08003afc <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <_tx_thread_initialize+0x54>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <_tx_thread_initialize+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <_tx_thread_initialize+0x5c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <_tx_thread_initialize+0x60>)
 8003b14:	2220      	movs	r2, #32
 8003b16:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4810      	ldr	r0, [pc, #64]	; (8003b60 <_tx_thread_initialize+0x64>)
 8003b1e:	f001 feab 	bl	8005878 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_tx_thread_initialize+0x68>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <_tx_thread_initialize+0x6c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <_tx_thread_initialize+0x70>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <_tx_thread_initialize+0x74>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <_tx_thread_initialize+0x78>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 8003b42:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <_tx_thread_initialize+0x78>)
 8003b48:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200019bc 	.word	0x200019bc
 8003b54:	200019c0 	.word	0x200019c0
 8003b58:	200019cc 	.word	0x200019cc
 8003b5c:	200019d0 	.word	0x200019d0
 8003b60:	200019d4 	.word	0x200019d4
 8003b64:	200019c4 	.word	0x200019c4
 8003b68:	200019c8 	.word	0x200019c8
 8003b6c:	20001a54 	.word	0x20001a54
 8003b70:	20001a58 	.word	0x20001a58
 8003b74:	20001a5c 	.word	0x20001a5c

08003b78 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <_tx_thread_shell_entry+0x8c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <_tx_thread_shell_entry+0x90>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <_tx_thread_shell_entry+0x90>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69f8      	ldr	r0, [r7, #28]
 8003b9e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba4:	607b      	str	r3, [r7, #4]
    return(posture);
 8003ba6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003ba8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003baa:	b672      	cpsid	i
    return(int_posture);
 8003bac:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8003bae:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <_tx_thread_shell_entry+0x94>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <_tx_thread_shell_entry+0x94>)
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8003bd8:	f3ef 8314 	mrs	r3, CONTROL
 8003bdc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8003bde:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f383 8814 	msr	CONTROL, r3
}
 8003bf4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8003bf6:	69f8      	ldr	r0, [r7, #28]
 8003bf8:	f000 fb00 	bl	80041fc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003bfc:	bf00      	nop
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200019bc 	.word	0x200019bc
 8003c08:	20001a58 	.word	0x20001a58
 8003c0c:	20001a54 	.word	0x20001a54

08003c10 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b094      	sub	sp, #80	; 0x50
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c22:	b672      	cpsid	i
    return(int_posture);
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <_tx_thread_sleep+0x1d8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <_tx_thread_sleep+0x36>
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	f383 8810 	msr	PRIMASK, r3
}
 8003c3e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003c40:	2313      	movs	r3, #19
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e0ca      	b.n	8003ddc <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003c46:	f3ef 8305 	mrs	r3, IPSR
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8003c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003c4e:	4b67      	ldr	r3, [pc, #412]	; (8003dec <_tx_thread_sleep+0x1dc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <_tx_thread_sleep+0x5a>
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003c64:	2313      	movs	r3, #19
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e0b8      	b.n	8003ddc <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	4a60      	ldr	r2, [pc, #384]	; (8003df0 <_tx_thread_sleep+0x1e0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <_tx_thread_sleep+0x74>
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003c7e:	2313      	movs	r3, #19
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e0ab      	b.n	8003ddc <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <_tx_thread_sleep+0x8c>
 8003c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e09f      	b.n	8003ddc <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8003c9c:	4b55      	ldr	r3, [pc, #340]	; (8003df4 <_tx_thread_sleep+0x1e4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <_tx_thread_sleep+0xa6>
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8003cb0:	2313      	movs	r3, #19
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e092      	b.n	8003ddc <_tx_thread_sleep+0x1cc>
        }
        else
        {
        
            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <_tx_thread_sleep+0x1e8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d06d      	beq.n	8003d9e <_tx_thread_sleep+0x18e>
 8003cc2:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <_tx_thread_sleep+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d067      	beq.n	8003d9e <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003cce:	f3ef 8305 	mrs	r3, IPSR
 8003cd2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4b45      	ldr	r3, [pc, #276]	; (8003dec <_tx_thread_sleep+0x1dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cde:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <_tx_thread_sleep+0x1d8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <_tx_thread_sleep+0xf2>
 8003cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	041a      	lsls	r2, r3, #16
 8003cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	e00e      	b.n	8003d20 <_tx_thread_sleep+0x110>
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003d08:	d205      	bcs.n	8003d16 <_tx_thread_sleep+0x106>
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d14:	e004      	b.n	8003d20 <_tx_thread_sleep+0x110>
 8003d16:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	2270      	movs	r2, #112	; 0x70
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <_tx_thread_sleep+0x1f0>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	615a      	str	r2, [r3, #20]
 8003d48:	f107 020c 	add.w	r2, r7, #12
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	619a      	str	r2, [r3, #24]
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	2200      	movs	r2, #0
 8003d54:	61da      	str	r2, [r3, #28]
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	3320      	adds	r3, #32
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <_tx_thread_sleep+0x1f4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d314      	bcc.n	8003d90 <_tx_thread_sleep+0x180>
 8003d66:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <_tx_thread_sleep+0x1f8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <_tx_thread_sleep+0x1e8>)
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <_tx_thread_sleep+0x1fc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d78:	621a      	str	r2, [r3, #32]
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <_tx_thread_sleep+0x200>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <_tx_thread_sleep+0x18e>
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <_tx_thread_sleep+0x200>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <_tx_thread_sleep+0x1fc>)
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4798      	blx	r3
 8003d8e:	e006      	b.n	8003d9e <_tx_thread_sleep+0x18e>
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <_tx_thread_sleep+0x1e8>)
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <_tx_thread_sleep+0x1fc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9c:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8003d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da0:	2204      	movs	r2, #4
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da6:	2201      	movs	r2, #1
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <_tx_thread_sleep+0x1e4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <_tx_thread_sleep+0x1e4>)
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8003dce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dd0:	f000 fa14 	bl	80041fc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	60fb      	str	r3, [r7, #12]
        }
    }
    
    /* Return completion status.  */
    return(status);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3750      	adds	r7, #80	; 0x50
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200019bc 	.word	0x200019bc
 8003dec:	20000fac 	.word	0x20000fac
 8003df0:	20001b04 	.word	0x20001b04
 8003df4:	20001a54 	.word	0x20001a54
 8003df8:	20001fd8 	.word	0x20001fd8
 8003dfc:	20001fdc 	.word	0x20001fdc
 8003e00:	e0001004 	.word	0xe0001004
 8003e04:	20001fd4 	.word	0x20001fd4
 8003e08:	20001fd0 	.word	0x20001fd0
 8003e0c:	20001fc4 	.word	0x20001fc4
 8003e10:	20001fe0 	.word	0x20001fe0

08003e14 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <_tx_thread_system_preempt_check+0x64>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d121      	bne.n	8003e6a <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <_tx_thread_system_preempt_check+0x68>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <_tx_thread_system_preempt_check+0x6c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d017      	beq.n	8003e6a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <_tx_thread_system_preempt_check+0x70>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003e42:	f3ef 8305 	mrs	r3, IPSR
 8003e46:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003e48:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e52:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003e54:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8003e56:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003e58:	b662      	cpsie	i
}
 8003e5a:	bf00      	nop
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8003e68:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20001a54 	.word	0x20001a54
 8003e7c:	200019bc 	.word	0x200019bc
 8003e80:	200019c0 	.word	0x200019c0
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b09e      	sub	sp, #120	; 0x78
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8003e90:	2300      	movs	r3, #0
 8003e92:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e94:	f3ef 8310 	mrs	r3, PRIMASK
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e9e:	b672      	cpsid	i
    return(int_posture);
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003ea2:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	334c      	adds	r3, #76	; 0x4c
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fdaf 	bl	8004a14 <_tx_timer_system_deactivate>
 8003eb6:	e002      	b.n	8003ebe <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 8003ebe:	4b8b      	ldr	r3, [pc, #556]	; (80040ec <_tx_thread_system_resume+0x264>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8003ec4:	4b89      	ldr	r3, [pc, #548]	; (80040ec <_tx_thread_system_resume+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d06f      	beq.n	8003fb0 <_tx_thread_system_resume+0x128>
 8003ed0:	4b87      	ldr	r3, [pc, #540]	; (80040f0 <_tx_thread_system_resume+0x268>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d069      	beq.n	8003fb0 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003edc:	f3ef 8305 	mrs	r3, IPSR
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 8003ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <_tx_thread_system_resume+0x26c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eec:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <_tx_thread_system_resume+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <_tx_thread_system_resume+0x88>
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	673b      	str	r3, [r7, #112]	; 0x70
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	041a      	lsls	r2, r3, #16
 8003f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8003f0e:	e00e      	b.n	8003f2e <_tx_thread_system_resume+0xa6>
 8003f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f12:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003f16:	d205      	bcs.n	8003f24 <_tx_thread_system_resume+0x9c>
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f22:	e004      	b.n	8003f2e <_tx_thread_system_resume+0xa6>
 8003f24:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003f2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	4b6e      	ldr	r3, [pc, #440]	; (80040fc <_tx_thread_system_resume+0x274>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f54:	615a      	str	r2, [r3, #20]
 8003f56:	f107 020c 	add.w	r2, r7, #12
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5c:	619a      	str	r2, [r3, #24]
 8003f5e:	4b68      	ldr	r3, [pc, #416]	; (8004100 <_tx_thread_system_resume+0x278>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f66:	61da      	str	r2, [r3, #28]
 8003f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f6a:	3320      	adds	r3, #32
 8003f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f6e:	4b65      	ldr	r3, [pc, #404]	; (8004104 <_tx_thread_system_resume+0x27c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d314      	bcc.n	8003fa2 <_tx_thread_system_resume+0x11a>
 8003f78:	4b63      	ldr	r3, [pc, #396]	; (8004108 <_tx_thread_system_resume+0x280>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7e:	4a5b      	ldr	r2, [pc, #364]	; (80040ec <_tx_thread_system_resume+0x264>)
 8003f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b61      	ldr	r3, [pc, #388]	; (800410c <_tx_thread_system_resume+0x284>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	4b60      	ldr	r3, [pc, #384]	; (8004110 <_tx_thread_system_resume+0x288>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <_tx_thread_system_resume+0x128>
 8003f94:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <_tx_thread_system_resume+0x288>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a5c      	ldr	r2, [pc, #368]	; (800410c <_tx_thread_system_resume+0x284>)
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
 8003fa0:	e006      	b.n	8003fb0 <_tx_thread_system_resume+0x128>
 8003fa2:	4a52      	ldr	r2, [pc, #328]	; (80040ec <_tx_thread_system_resume+0x264>)
 8003fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b58      	ldr	r3, [pc, #352]	; (800410c <_tx_thread_system_resume+0x284>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fae:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have 
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8003fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003fbc:	4b55      	ldr	r3, [pc, #340]	; (8004114 <_tx_thread_system_resume+0x28c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	4a54      	ldr	r2, [pc, #336]	; (8004114 <_tx_thread_system_resume+0x28c>)
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80b3 	bne.w	8004136 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80c7 	beq.w	8004168 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 80a2 	bne.w	8004128 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <_tx_thread_system_resume+0x290>)
 8003ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d164      	bne.n	80040ca <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004000:	4945      	ldr	r1, [pc, #276]	; (8004118 <_tx_thread_system_resume+0x290>)
 8004002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004016:	2201      	movs	r2, #1
 8004018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <_tx_thread_system_resume+0x294>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	4313      	orrs	r3, r2
 8004028:	4a3c      	ldr	r2, [pc, #240]	; (800411c <_tx_thread_system_resume+0x294>)
 800402a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800402c:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <_tx_thread_system_resume+0x298>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004032:	429a      	cmp	r2, r3
 8004034:	f080 8098 	bcs.w	8004168 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004038:	4a39      	ldr	r2, [pc, #228]	; (8004120 <_tx_thread_system_resume+0x298>)
 800403a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403c:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800403e:	4b30      	ldr	r3, [pc, #192]	; (8004100 <_tx_thread_system_resume+0x278>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800404a:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <_tx_thread_system_resume+0x278>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e08a      	b.n	8004168 <_tx_thread_system_resume+0x2e0>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004058:	429a      	cmp	r2, r3
 800405a:	f080 8085 	bcs.w	8004168 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <_tx_thread_system_resume+0x278>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8004064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <_tx_thread_system_resume+0x1f6>
                                {
    
                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800406a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004070:	429a      	cmp	r2, r3
 8004072:	d104      	bne.n	800407e <_tx_thread_system_resume+0x1f6>
                                    {
        
                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <_tx_thread_system_resume+0x278>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800407c:	61da      	str	r2, [r3, #28]
 800407e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <_tx_thread_system_resume+0x28c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8004090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80a1 	bne.w	80041da <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <_tx_thread_system_resume+0x29c>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80040a0:	f3ef 8305 	mrs	r3, IPSR
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 8098 	bne.w	80041de <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 80040b8:	b662      	cpsie	i
}
 80040ba:	bf00      	nop
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	bf00      	nop
}
 80040c8:	e089      	b.n	80041de <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040e6:	621a      	str	r2, [r3, #32]
 80040e8:	e03e      	b.n	8004168 <_tx_thread_system_resume+0x2e0>
 80040ea:	bf00      	nop
 80040ec:	20001fd8 	.word	0x20001fd8
 80040f0:	20001fdc 	.word	0x20001fdc
 80040f4:	20000fac 	.word	0x20000fac
 80040f8:	200019bc 	.word	0x200019bc
 80040fc:	e0001004 	.word	0xe0001004
 8004100:	200019c0 	.word	0x200019c0
 8004104:	20001fd4 	.word	0x20001fd4
 8004108:	20001fd0 	.word	0x20001fd0
 800410c:	20001fc4 	.word	0x20001fc4
 8004110:	20001fe0 	.word	0x20001fe0
 8004114:	20001a54 	.word	0x20001a54
 8004118:	200019d4 	.word	0x200019d4
 800411c:	200019cc 	.word	0x200019cc
 8004120:	200019d0 	.word	0x200019d0
 8004124:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
 8004134:	e018      	b.n	8004168 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	2b01      	cmp	r3, #1
 800413c:	d014      	beq.n	8004168 <_tx_thread_system_resume+0x2e0>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	2b02      	cmp	r3, #2
 8004144:	d010      	beq.n	8004168 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
 800415a:	e005      	b.n	8004168 <_tx_thread_system_resume+0x2e0>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2203      	movs	r2, #3
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8004168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <_tx_thread_system_resume+0x2fa>
    {
    
        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800416e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <_tx_thread_system_resume+0x364>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004180:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004182:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <_tx_thread_system_resume+0x368>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800418a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f383 8810 	msr	PRIMASK, r3
}
 8004192:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <_tx_thread_system_resume+0x364>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	429a      	cmp	r2, r3
 800419c:	d022      	beq.n	80041e4 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <_tx_thread_system_resume+0x36c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 80041a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11c      	bne.n	80041e4 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <_tx_thread_system_resume+0x370>)
 80041ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80041b2:	f3ef 8305 	mrs	r3, IPSR
 80041b6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80041b8:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d111      	bne.n	80041e2 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80041be:	f3ef 8310 	mrs	r3, PRIMASK
 80041c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80041c4:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 80041c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80041c8:	b662      	cpsie	i
}
 80041ca:	bf00      	nop
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	bf00      	nop
}
 80041d8:	e003      	b.n	80041e2 <_tx_thread_system_resume+0x35a>
                                return;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <_tx_thread_system_resume+0x35c>
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <_tx_thread_system_resume+0x35c>
 80041e2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80041e4:	3778      	adds	r7, #120	; 0x78
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200019c0 	.word	0x200019c0
 80041f0:	200019bc 	.word	0x200019bc
 80041f4:	20001a54 	.word	0x20001a54
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0a4      	sub	sp, #144	; 0x90
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800420a:	4b98      	ldr	r3, [pc, #608]	; (800446c <_tx_thread_system_suspend+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004212:	f3ef 8310 	mrs	r3, PRIMASK
 8004216:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8004218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800421c:	b672      	cpsid	i
    return(int_posture);
 800421e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004220:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004228:	429a      	cmp	r2, r3
 800422a:	d112      	bne.n	8004252 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d004      	beq.n	800424a <_tx_thread_system_suspend+0x4e>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	334c      	adds	r3, #76	; 0x4c
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb83 	bl	8004950 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4a88      	ldr	r2, [pc, #544]	; (8004470 <_tx_thread_system_suspend+0x274>)
 8004250:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <_tx_thread_system_suspend+0x278>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a86      	ldr	r2, [pc, #536]	; (8004474 <_tx_thread_system_suspend+0x278>)
 800425a:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 817d 	bne.w	8004560 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8004266:	4b84      	ldr	r3, [pc, #528]	; (8004478 <_tx_thread_system_suspend+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800426c:	4b82      	ldr	r3, [pc, #520]	; (8004478 <_tx_thread_system_suspend+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	673b      	str	r3, [r7, #112]	; 0x70
 8004272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004274:	2b00      	cmp	r3, #0
 8004276:	d07c      	beq.n	8004372 <_tx_thread_system_suspend+0x176>
 8004278:	4b80      	ldr	r3, [pc, #512]	; (800447c <_tx_thread_system_suspend+0x280>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d076      	beq.n	8004372 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004284:	f3ef 8305 	mrs	r3, IPSR
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800428a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800428c:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <_tx_thread_system_suspend+0x284>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004294:	4b75      	ldr	r3, [pc, #468]	; (800446c <_tx_thread_system_suspend+0x270>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <_tx_thread_system_suspend+0xc8>
 80042a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	041a      	lsls	r2, r3, #16
 80042b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c2:	e013      	b.n	80042ec <_tx_thread_system_suspend+0xf0>
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80042ca:	d208      	bcs.n	80042de <_tx_thread_system_suspend+0xe2>
 80042cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
 80042d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042dc:	e006      	b.n	80042ec <_tx_thread_system_suspend+0xf0>
 80042de:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80042e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fe:	2202      	movs	r2, #2
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	4b60      	ldr	r3, [pc, #384]	; (8004484 <_tx_thread_system_suspend+0x288>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430e:	611a      	str	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004316:	615a      	str	r2, [r3, #20]
 8004318:	f107 0208 	add.w	r2, r7, #8
 800431c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	4b59      	ldr	r3, [pc, #356]	; (8004488 <_tx_thread_system_suspend+0x28c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004328:	61da      	str	r2, [r3, #28]
 800432a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432c:	3320      	adds	r3, #32
 800432e:	673b      	str	r3, [r7, #112]	; 0x70
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <_tx_thread_system_suspend+0x290>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004336:	429a      	cmp	r2, r3
 8004338:	d314      	bcc.n	8004364 <_tx_thread_system_suspend+0x168>
 800433a:	4b55      	ldr	r3, [pc, #340]	; (8004490 <_tx_thread_system_suspend+0x294>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	673b      	str	r3, [r7, #112]	; 0x70
 8004340:	4a4d      	ldr	r2, [pc, #308]	; (8004478 <_tx_thread_system_suspend+0x27c>)
 8004342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <_tx_thread_system_suspend+0x298>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	4b52      	ldr	r3, [pc, #328]	; (8004498 <_tx_thread_system_suspend+0x29c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <_tx_thread_system_suspend+0x176>
 8004356:	4b50      	ldr	r3, [pc, #320]	; (8004498 <_tx_thread_system_suspend+0x29c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <_tx_thread_system_suspend+0x298>)
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4610      	mov	r0, r2
 8004360:	4798      	blx	r3
 8004362:	e006      	b.n	8004372 <_tx_thread_system_suspend+0x176>
 8004364:	4a44      	ldr	r2, [pc, #272]	; (8004478 <_tx_thread_system_suspend+0x27c>)
 8004366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <_tx_thread_system_suspend+0x298>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004370:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have 
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8004372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8004378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d016      	beq.n	80043c8 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80043a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043aa:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	; (800449c <_tx_thread_system_suspend+0x2a0>)
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f040 8085 	bne.w	80044c6 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4937      	ldr	r1, [pc, #220]	; (800449c <_tx_thread_system_suspend+0x2a0>)
 80043c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043c6:	e07e      	b.n	80044c6 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a34      	ldr	r2, [pc, #208]	; (800449c <_tx_thread_system_suspend+0x2a0>)
 80043cc:	2100      	movs	r1, #0
 80043ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2201      	movs	r2, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80043dc:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <_tx_thread_system_suspend+0x2a4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	43db      	mvns	r3, r3
 80043e4:	4013      	ands	r3, r2
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <_tx_thread_system_suspend+0x2a4>)
 80043e8:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80043ea:	2300      	movs	r3, #0
 80043ec:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <_tx_thread_system_suspend+0x2a4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d158      	bne.n	80044ac <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <_tx_thread_system_suspend+0x2a8>)
 80043fc:	2220      	movs	r2, #32
 80043fe:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <_tx_thread_system_suspend+0x28c>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <_tx_thread_system_suspend+0x222>
                {
            
                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800440c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004414:	429a      	cmp	r2, r3
 8004416:	d102      	bne.n	800441e <_tx_thread_system_suspend+0x222>
                    {
    
                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep 
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8004418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800441a:	2200      	movs	r2, #0
 800441c:	61da      	str	r2, [r3, #28]
 800441e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <_tx_thread_system_suspend+0x278>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8004430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80bf 	bne.w	80045b6 <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <_tx_thread_system_suspend+0x2ac>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004440:	f3ef 8305 	mrs	r3, IPSR
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10c      	bne.n	8004466 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800444c:	f3ef 8310 	mrs	r3, PRIMASK
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004456:	b662      	cpsie	i
}
 8004458:	bf00      	nop
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	f383 8810 	msr	PRIMASK, r3
}
 8004464:	bf00      	nop
}
 8004466:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004468:	e0a5      	b.n	80045b6 <_tx_thread_system_suspend+0x3ba>
 800446a:	bf00      	nop
 800446c:	200019bc 	.word	0x200019bc
 8004470:	20001fc0 	.word	0x20001fc0
 8004474:	20001a54 	.word	0x20001a54
 8004478:	20001fd8 	.word	0x20001fd8
 800447c:	20001fdc 	.word	0x20001fdc
 8004480:	20000fac 	.word	0x20000fac
 8004484:	e0001004 	.word	0xe0001004
 8004488:	200019c0 	.word	0x200019c0
 800448c:	20001fd4 	.word	0x20001fd4
 8004490:	20001fd0 	.word	0x20001fd0
 8004494:	20001fc4 	.word	0x20001fc4
 8004498:	20001fe0 	.word	0x20001fe0
 800449c:	200019d4 	.word	0x200019d4
 80044a0:	200019cc 	.word	0x200019cc
 80044a4:	200019d0 	.word	0x200019d0
 80044a8:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80044ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80044bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c0:	4413      	add	r3, r2
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <_tx_thread_system_suspend+0x3cc>)
 80044c4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <_tx_thread_system_suspend+0x3d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d139      	bne.n	8004544 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80044d0:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <_tx_thread_system_suspend+0x3cc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <_tx_thread_system_suspend+0x3d4>)
 80044d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <_tx_thread_system_suspend+0x3d0>)
 80044dc:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 80044de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <_tx_thread_system_suspend+0x2fe>
            {
            
                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80044e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d104      	bne.n	80044fa <_tx_thread_system_suspend+0x2fe>
                {
    
                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep 
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <_tx_thread_system_suspend+0x3d0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f8:	61da      	str	r2, [r3, #28]
 80044fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <_tx_thread_system_suspend+0x3d8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800450c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450e:	2b00      	cmp	r3, #0
 8004510:	d153      	bne.n	80045ba <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <_tx_thread_system_suspend+0x3dc>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800451a:	f3ef 8305 	mrs	r3, IPSR
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004526:	f3ef 8310 	mrs	r3, PRIMASK
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004530:	b662      	cpsie	i
}
 8004532:	bf00      	nop
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f383 8810 	msr	PRIMASK, r3
}
 800453e:	bf00      	nop
}
 8004540:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004542:	e03a      	b.n	80045ba <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8004544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <_tx_thread_system_suspend+0x364>
         {
            
            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800454a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004552:	429a      	cmp	r2, r3
 8004554:	d104      	bne.n	8004560 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep 
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <_tx_thread_system_suspend+0x3d0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455e:	61da      	str	r2, [r3, #28]
 8004560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004562:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <_tx_thread_system_suspend+0x3d0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004574:	429a      	cmp	r2, r3
 8004576:	d022      	beq.n	80045be <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <_tx_thread_system_suspend+0x3d8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800457e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11c      	bne.n	80045be <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <_tx_thread_system_suspend+0x3dc>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800458c:	f3ef 8305 	mrs	r3, IPSR
 8004590:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004592:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10c      	bne.n	80045b2 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	617b      	str	r3, [r7, #20]
    return(posture);
 800459e:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80045a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80045a2:	b662      	cpsie	i
}
 80045a4:	bf00      	nop
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	bf00      	nop
}
 80045b2:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80045b4:	e003      	b.n	80045be <_tx_thread_system_suspend+0x3c2>
                return;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <_tx_thread_system_suspend+0x3c4>
            return;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <_tx_thread_system_suspend+0x3c4>
    return;
 80045be:	bf00      	nop
}
 80045c0:	3790      	adds	r7, #144	; 0x90
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200019d0 	.word	0x200019d0
 80045cc:	200019c0 	.word	0x200019c0
 80045d0:	200019d4 	.word	0x200019d4
 80045d4:	20001a54 	.word	0x20001a54
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80045e2:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <_tx_thread_time_slice+0x184>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045e8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ec:	61bb      	str	r3, [r7, #24]
    return(posture);
 80045ee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80045f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80045f2:	b672      	cpsid	i
    return(int_posture);
 80045f4:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80045f8:	4b5a      	ldr	r3, [pc, #360]	; (8004764 <_tx_thread_time_slice+0x188>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d024      	beq.n	800464e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	2b00      	cmp	r3, #0
 800460a:	d120      	bne.n	800464e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69d2      	ldr	r2, [r2, #28]
 8004612:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a53      	ldr	r2, [pc, #332]	; (8004768 <_tx_thread_time_slice+0x18c>)
 800461a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	429a      	cmp	r2, r3
 8004624:	d013      	beq.n	800464e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	429a      	cmp	r2, r3
 8004630:	d10d      	bne.n	800464e <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	6a12      	ldr	r2, [r2, #32]
 800463a:	494c      	ldr	r1, [pc, #304]	; (800476c <_tx_thread_time_slice+0x190>)
 800463c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <_tx_thread_time_slice+0x194>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a49      	ldr	r2, [pc, #292]	; (800476c <_tx_thread_time_slice+0x190>)
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	4a4a      	ldr	r2, [pc, #296]	; (8004774 <_tx_thread_time_slice+0x198>)
 800464c:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004654:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8004656:	4b48      	ldr	r3, [pc, #288]	; (8004778 <_tx_thread_time_slice+0x19c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <_tx_thread_time_slice+0x1a0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
   
    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <_tx_thread_time_slice+0x1a4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d06d      	beq.n	800474c <_tx_thread_time_slice+0x170>
 8004670:	4b44      	ldr	r3, [pc, #272]	; (8004784 <_tx_thread_time_slice+0x1a8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d067      	beq.n	800474c <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800467c:	f3ef 8305 	mrs	r3, IPSR
 8004680:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <_tx_thread_time_slice+0x19c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <_tx_thread_time_slice+0x184>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <_tx_thread_time_slice+0xd4>
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	041a      	lsls	r2, r3, #16
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	e00e      	b.n	80046ce <_tx_thread_time_slice+0xf2>
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80046b6:	d205      	bcs.n	80046c4 <_tx_thread_time_slice+0xe8>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
 80046c2:	e004      	b.n	80046ce <_tx_thread_time_slice+0xf2>
 80046c4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2205      	movs	r2, #5
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <_tx_thread_time_slice+0x1ac>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <_tx_thread_time_slice+0x198>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f6:	615a      	str	r2, [r3, #20]
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fc:	619a      	str	r2, [r3, #24]
 80046fe:	1d3a      	adds	r2, r7, #4
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	61da      	str	r2, [r3, #28]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	3320      	adds	r3, #32
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <_tx_thread_time_slice+0x1b0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	429a      	cmp	r2, r3
 8004712:	d314      	bcc.n	800473e <_tx_thread_time_slice+0x162>
 8004714:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <_tx_thread_time_slice+0x1b4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	4a19      	ldr	r2, [pc, #100]	; (8004780 <_tx_thread_time_slice+0x1a4>)
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <_tx_thread_time_slice+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a3a      	ldr	r2, [r7, #32]
 8004726:	621a      	str	r2, [r3, #32]
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <_tx_thread_time_slice+0x1bc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <_tx_thread_time_slice+0x170>
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <_tx_thread_time_slice+0x1bc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a17      	ldr	r2, [pc, #92]	; (8004794 <_tx_thread_time_slice+0x1b8>)
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	4610      	mov	r0, r2
 800473a:	4798      	blx	r3
 800473c:	e006      	b.n	800474c <_tx_thread_time_slice+0x170>
 800473e:	4a10      	ldr	r2, [pc, #64]	; (8004780 <_tx_thread_time_slice+0x1a4>)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b13      	ldr	r3, [pc, #76]	; (8004794 <_tx_thread_time_slice+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	621a      	str	r2, [r3, #32]
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004758:	bf00      	nop
 800475a:	3738      	adds	r7, #56	; 0x38
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200019bc 	.word	0x200019bc
 8004764:	20001a64 	.word	0x20001a64
 8004768:	20001fc0 	.word	0x20001fc0
 800476c:	200019d4 	.word	0x200019d4
 8004770:	200019d0 	.word	0x200019d0
 8004774:	200019c0 	.word	0x200019c0
 8004778:	20000fac 	.word	0x20000fac
 800477c:	20001a54 	.word	0x20001a54
 8004780:	20001fd8 	.word	0x20001fd8
 8004784:	20001fdc 	.word	0x20001fdc
 8004788:	e0001004 	.word	0xe0001004
 800478c:	20001fd4 	.word	0x20001fd4
 8004790:	20001fd0 	.word	0x20001fd0
 8004794:	20001fc4 	.word	0x20001fc4
 8004798:	20001fe0 	.word	0x20001fe0

0800479c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047a8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ac:	617b      	str	r3, [r7, #20]
    return(posture);
 80047ae:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80047b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80047b2:	b672      	cpsid	i
    return(int_posture);
 80047b4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80047b6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d10e      	bne.n	80047de <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <_tx_thread_timeout+0x74>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <_tx_thread_timeout+0x74>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80047d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d8:	f7ff fb56 	bl	8003e88 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80047dc:	e013      	b.n	8004806 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004804:	4798      	blx	r3
}
 8004806:	bf00      	nop
 8004808:	3728      	adds	r7, #40	; 0x28
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20001a54 	.word	0x20001a54

08004814 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800481a:	f3ef 8310 	mrs	r3, PRIMASK
 800481e:	607b      	str	r3, [r7, #4]
    return(posture);
 8004820:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004822:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004824:	b672      	cpsid	i
    return(int_posture);
 8004826:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004828:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <_tx_timer_expiration_process+0x3c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <_tx_timer_expiration_process+0x3c>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f383 8810 	msr	PRIMASK, r3
}
 800483e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004840:	4804      	ldr	r0, [pc, #16]	; (8004854 <_tx_timer_expiration_process+0x40>)
 8004842:	f7ff fb21 	bl	8003e88 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20001a54 	.word	0x20001a54
 8004854:	20001b04 	.word	0x20001b04

08004858 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <_tx_timer_initialize+0xa8>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004864:	4b27      	ldr	r3, [pc, #156]	; (8004904 <_tx_timer_initialize+0xac>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800486a:	4b27      	ldr	r3, [pc, #156]	; (8004908 <_tx_timer_initialize+0xb0>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004870:	4b26      	ldr	r3, [pc, #152]	; (800490c <_tx_timer_initialize+0xb4>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <_tx_timer_initialize+0xb8>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	2100      	movs	r1, #0
 8004880:	4824      	ldr	r0, [pc, #144]	; (8004914 <_tx_timer_initialize+0xbc>)
 8004882:	f000 fff9 	bl	8005878 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <_tx_timer_initialize+0xc0>)
 8004888:	4a22      	ldr	r2, [pc, #136]	; (8004914 <_tx_timer_initialize+0xbc>)
 800488a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <_tx_timer_initialize+0xc4>)
 800488e:	4a21      	ldr	r2, [pc, #132]	; (8004914 <_tx_timer_initialize+0xbc>)
 8004890:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004892:	4b23      	ldr	r3, [pc, #140]	; (8004920 <_tx_timer_initialize+0xc8>)
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <_tx_timer_initialize+0xcc>)
 8004896:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <_tx_timer_initialize+0xc8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3304      	adds	r3, #4
 800489e:	4a20      	ldr	r2, [pc, #128]	; (8004920 <_tx_timer_initialize+0xc8>)
 80048a0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <_tx_timer_initialize+0xd0>)
 80048a4:	4a21      	ldr	r2, [pc, #132]	; (800492c <_tx_timer_initialize+0xd4>)
 80048a6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80048a8:	4b21      	ldr	r3, [pc, #132]	; (8004930 <_tx_timer_initialize+0xd8>)
 80048aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80048b0:	4b20      	ldr	r3, [pc, #128]	; (8004934 <_tx_timer_initialize+0xdc>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <_tx_timer_initialize+0xd0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <_tx_timer_initialize+0xd8>)
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	491d      	ldr	r1, [pc, #116]	; (8004934 <_tx_timer_initialize+0xdc>)
 80048c0:	6809      	ldr	r1, [r1, #0]
 80048c2:	481c      	ldr	r0, [pc, #112]	; (8004934 <_tx_timer_initialize+0xdc>)
 80048c4:	6800      	ldr	r0, [r0, #0]
 80048c6:	2400      	movs	r4, #0
 80048c8:	9405      	str	r4, [sp, #20]
 80048ca:	2400      	movs	r4, #0
 80048cc:	9404      	str	r4, [sp, #16]
 80048ce:	9003      	str	r0, [sp, #12]
 80048d0:	9102      	str	r1, [sp, #8]
 80048d2:	9201      	str	r2, [sp, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4b18      	ldr	r3, [pc, #96]	; (8004938 <_tx_timer_initialize+0xe0>)
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <_tx_timer_initialize+0xe4>)
 80048da:	4919      	ldr	r1, [pc, #100]	; (8004940 <_tx_timer_initialize+0xe8>)
 80048dc:	4819      	ldr	r0, [pc, #100]	; (8004944 <_tx_timer_initialize+0xec>)
 80048de:	f7fe ff8b 	bl	80037f8 <_tx_thread_create>
 80048e2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <_tx_timer_initialize+0xf0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80048f0:	4b16      	ldr	r3, [pc, #88]	; (800494c <_tx_timer_initialize+0xf4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}
 80048fe:	bf00      	nop
 8004900:	20001a60 	.word	0x20001a60
 8004904:	20001fc0 	.word	0x20001fc0
 8004908:	20001a64 	.word	0x20001a64
 800490c:	20001af4 	.word	0x20001af4
 8004910:	20001b00 	.word	0x20001b00
 8004914:	20001a68 	.word	0x20001a68
 8004918:	20001ae8 	.word	0x20001ae8
 800491c:	20001af0 	.word	0x20001af0
 8004920:	20001aec 	.word	0x20001aec
 8004924:	20001ae4 	.word	0x20001ae4
 8004928:	20001bb4 	.word	0x20001bb4
 800492c:	20001bc0 	.word	0x20001bc0
 8004930:	20001bb8 	.word	0x20001bb8
 8004934:	20001bbc 	.word	0x20001bbc
 8004938:	4154494d 	.word	0x4154494d
 800493c:	08004a85 	.word	0x08004a85
 8004940:	080058c0 	.word	0x080058c0
 8004944:	20001b04 	.word	0x20001b04
 8004948:	20001af8 	.word	0x20001af8
 800494c:	20001afc 	.word	0x20001afc

08004950 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d04a      	beq.n	80049fa <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d046      	beq.n	80049fa <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d142      	bne.n	80049fa <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b20      	cmp	r3, #32
 8004978:	d902      	bls.n	8004980 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800497a:	231f      	movs	r3, #31
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e002      	b.n	8004986 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	3b01      	subs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <_tx_timer_system_activate+0xb8>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <_tx_timer_system_activate+0xbc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d30b      	bcc.n	80049b4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <_tx_timer_system_activate+0xbc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	109b      	asrs	r3, r3, #2
 80049a6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <_tx_timer_system_activate+0xc0>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e011      	b.n	80049f4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80049fa:	bf00      	nop
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20001af0 	.word	0x20001af0
 8004a0c:	20001aec 	.word	0x20001aec
 8004a10:	20001ae8 	.word	0x20001ae8

08004a14 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d026      	beq.n	8004a76 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d108      	bne.n	8004a48 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d117      	bne.n	8004a70 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e013      	b.n	8004a70 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d105      	bne.n	8004a70 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	619a      	str	r2, [r3, #24]
    }
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b098      	sub	sp, #96	; 0x60
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a73      	ldr	r2, [pc, #460]	; (8004c60 <_tx_timer_thread_entry+0x1dc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 80de 	bne.w	8004c56 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004aa4:	b672      	cpsid	i
    return(int_posture);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8004aa8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8004aaa:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f107 020c 	add.w	r2, r7, #12
 8004abe:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8004ac0:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8004ac8:	4b66      	ldr	r3, [pc, #408]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4a65      	ldr	r2, [pc, #404]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004ad0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8004ad2:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b64      	ldr	r3, [pc, #400]	; (8004c68 <_tx_timer_thread_entry+0x1e4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d103      	bne.n	8004ae6 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <_tx_timer_thread_entry+0x1e8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a60      	ldr	r2, [pc, #384]	; (8004c64 <_tx_timer_thread_entry+0x1e0>)
 8004ae4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8004ae6:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <_tx_timer_thread_entry+0x1ec>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004af8:	f3ef 8310 	mrs	r3, PRIMASK
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b02:	b672      	cpsid	i
    return(int_posture);
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8004b06:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8004b08:	e07f      	b.n	8004c0a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8004b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d102      	bne.n	8004b26 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e00e      	b.n	8004b44 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b30:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b36:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	f107 020c 	add.w	r2, r7, #12
 8004b3e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8004b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b42:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d911      	bls.n	8004b70 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8004b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b56:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5e:	f107 0208 	add.w	r2, r7, #8
 8004b62:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8004b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b68:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	e01a      	b.n	8004ba6 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8004b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8004b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b82:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d009      	beq.n	8004ba0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8e:	f107 0208 	add.w	r2, r7, #8
 8004b92:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8004b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b98:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	e002      	b.n	8004ba6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8004ba6:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <_tx_timer_thread_entry+0x1f0>)
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	f383 8810 	msr	PRIMASK, r3
}
 8004bb6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8004bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004bc2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bce:	b672      	cpsid	i
    return(int_posture);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004bd2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8004bd4:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <_tx_timer_thread_entry+0x1f0>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d105      	bne.n	8004bee <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8004be8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004bea:	f7ff feb1 	bl	8004950 <_tx_timer_system_activate>
 8004bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	623b      	str	r3, [r7, #32]
    return(posture);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004c02:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c04:	b672      	cpsid	i
    return(int_posture);
 8004c06:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f47f af7c 	bne.w	8004b0a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <_tx_timer_thread_entry+0x1ec>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <_tx_timer_thread_entry+0x1f4>)
 8004c1c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c20:	2203      	movs	r2, #3
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c26:	2201      	movs	r2, #1
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <_tx_timer_thread_entry+0x1f8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <_tx_timer_thread_entry+0x1f8>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f383 8810 	msr	PRIMASK, r3
}
 8004c3e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8004c40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004c42:	f7ff fadb 	bl	80041fc <_tx_thread_system_suspend>
 8004c46:	e728      	b.n	8004a9a <_tx_timer_thread_entry+0x16>
 8004c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	bf00      	nop
            TX_DISABLE
 8004c54:	e721      	b.n	8004a9a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8004c56:	bf00      	nop
 8004c58:	3760      	adds	r7, #96	; 0x60
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	4154494d 	.word	0x4154494d
 8004c64:	20001af0 	.word	0x20001af0
 8004c68:	20001aec 	.word	0x20001aec
 8004c6c:	20001ae8 	.word	0x20001ae8
 8004c70:	20001af4 	.word	0x20001af4
 8004c74:	20001b00 	.word	0x20001b00
 8004c78:	20001b04 	.word	0x20001b04
 8004c7c:	20001a54 	.word	0x20001a54

08004c80 <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0a6      	sub	sp, #152	; 0x98
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in 
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	3320      	adds	r3, #32
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d202      	bcs.n	8004ca6 <_tx_trace_enable+0x26>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
 8004ca0:	2305      	movs	r3, #5
 8004ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ca4:	e309      	b.n	80052ba <_tx_trace_enable+0x63a>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
 8004ca6:	4b8f      	ldr	r3, [pc, #572]	; (8004ee4 <_tx_trace_enable+0x264>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <_tx_trace_enable+0x34>
    {
    
        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cb2:	e302      	b.n	80052ba <_tx_trace_enable+0x63a>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 8004cb4:	4b8c      	ldr	r3, [pc, #560]	; (8004ee8 <_tx_trace_enable+0x268>)
 8004cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cba:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 8004cc0:	4a8a      	ldr	r2, [pc, #552]	; (8004eec <_tx_trace_enable+0x26c>)
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc8:	3330      	adds	r3, #48	; 0x30
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004ccc:	4a88      	ldr	r2, [pc, #544]	; (8004ef0 <_tx_trace_enable+0x270>)
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce0:	4413      	add	r3, r2
 8004ce2:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004ce4:	4a83      	ldr	r2, [pc, #524]	; (8004ef4 <_tx_trace_enable+0x274>)
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cee:	e01f      	b.n	8004d30 <_tx_trace_enable+0xb0>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8004cf0:	4b7f      	ldr	r3, [pc, #508]	; (8004ef0 <_tx_trace_enable+0x270>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 8004cf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	461a      	mov	r2, r3
 8004d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d04:	4413      	add	r3, r2
 8004d06:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	2200      	movs	r2, #0
 8004d16:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2200      	movs	r2, #0
 8004d22:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d3db      	bcc.n	8004cf0 <_tx_trace_enable+0x70>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
 8004d38:	4a6f      	ldr	r2, [pc, #444]	; (8004ef8 <_tx_trace_enable+0x278>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
     
        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
 8004d3e:	4a6f      	ldr	r2, [pc, #444]	; (8004efc <_tx_trace_enable+0x27c>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]
    
        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
 8004d44:	4b6e      	ldr	r3, [pc, #440]	; (8004f00 <_tx_trace_enable+0x280>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 8004d4a:	4b6a      	ldr	r3, [pc, #424]	; (8004ef4 <_tx_trace_enable+0x274>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	3b30      	subs	r3, #48	; 0x30
 8004d62:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8004d64:	4a67      	ldr	r2, [pc, #412]	; (8004f04 <_tx_trace_enable+0x284>)
 8004d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d68:	6013      	str	r3, [r2, #0]
        
        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f023 031f 	bic.w	r3, r3, #31
 8004d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d76:	4413      	add	r3, r2
 8004d78:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8004d7a:	4a63      	ldr	r2, [pc, #396]	; (8004f08 <_tx_trace_enable+0x288>)
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7e:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8004d80:	2300      	movs	r3, #0
 8004d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d84:	e00c      	b.n	8004da0 <_tx_trace_enable+0x120>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	015b      	lsls	r3, r3, #5
 8004d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d8c:	4413      	add	r3, r2
 8004d8e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8004d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
          
            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3ed      	bcc.n	8004d86 <_tx_trace_enable+0x106>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 8004daa:	4b50      	ldr	r3, [pc, #320]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a57      	ldr	r2, [pc, #348]	; (8004f0c <_tx_trace_enable+0x28c>)
 8004db0:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
 8004db2:	4b4e      	ldr	r3, [pc, #312]	; (8004eec <_tx_trace_enable+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
 8004dc4:	4b4a      	ldr	r3, [pc, #296]	; (8004ef0 <_tx_trace_enable+0x270>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b48      	ldr	r3, [pc, #288]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 8004dce:	4b47      	ldr	r3, [pc, #284]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
 8004dd6:	4b45      	ldr	r3, [pc, #276]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
 8004dde:	4b45      	ldr	r3, [pc, #276]	; (8004ef4 <_tx_trace_enable+0x274>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b42      	ldr	r3, [pc, #264]	; (8004eec <_tx_trace_enable+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8004de8:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <_tx_trace_enable+0x284>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <_tx_trace_enable+0x26c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
 8004df2:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <_tx_trace_enable+0x288>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <_tx_trace_enable+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8004dfc:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <_tx_trace_enable+0x284>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <_tx_trace_enable+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <_tx_trace_enable+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <_tx_trace_enable+0x26c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <_tx_trace_enable+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e24:	f3ef 8310 	mrs	r3, PRIMASK
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e2e:	b672      	cpsid	i
    return(int_posture);
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <_tx_trace_enable+0x290>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <_tx_trace_enable+0x290>)
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
 8004e4a:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <_tx_trace_enable+0x294>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        i =           _tx_thread_created_count;
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <_tx_trace_enable+0x298>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
 8004e58:	e019      	b.n	8004e8e <_tx_trace_enable+0x20e>
        {

            /* Decrement the counter.  */
            i--;
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
          
            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 8004e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6a:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 8004e6c:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8004e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e72:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	460b      	mov	r3, r1
 8004e78:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f000 fa59 	bl	8005334 <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 8004e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (i != ((ULONG) 0))
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e2      	bne.n	8004e5a <_tx_trace_enable+0x1da>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
 8004e94:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <_tx_trace_enable+0x29c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        i =          _tx_timer_created_count;
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <_tx_trace_enable+0x2a0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
 8004ea2:	e014      	b.n	8004ece <_tx_trace_enable+0x24e>
        {

            /* Decrement the counter.  */
            i--;
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name, 
 8004eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f000 fa38 	bl	8005334 <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 8004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        while (i != ((ULONG) 0))
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e7      	bne.n	8004ea4 <_tx_trace_enable+0x224>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <_tx_trace_enable+0x2a4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        i =                _tx_event_flags_created_count;
 8004edc:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <_tx_trace_enable+0x2a8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
 8004ee2:	e036      	b.n	8004f52 <_tx_trace_enable+0x2d2>
 8004ee4:	20001fd8 	.word	0x20001fd8
 8004ee8:	20001fdc 	.word	0x20001fdc
 8004eec:	20001fc4 	.word	0x20001fc4
 8004ef0:	20001fc8 	.word	0x20001fc8
 8004ef4:	20001fcc 	.word	0x20001fcc
 8004ef8:	20001fe4 	.word	0x20001fe4
 8004efc:	20001fe8 	.word	0x20001fe8
 8004f00:	20001fec 	.word	0x20001fec
 8004f04:	20001fd0 	.word	0x20001fd0
 8004f08:	20001fd4 	.word	0x20001fd4
 8004f0c:	54585442 	.word	0x54585442
 8004f10:	20001a54 	.word	0x20001a54
 8004f14:	200019c4 	.word	0x200019c4
 8004f18:	200019c8 	.word	0x200019c8
 8004f1c:	20001af8 	.word	0x20001af8
 8004f20:	20001afc 	.word	0x20001afc
 8004f24:	20001994 	.word	0x20001994
 8004f28:	20001998 	.word	0x20001998
        {

            /* Decrement the counter.  */
            i--;
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
 8004f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004f42:	2006      	movs	r0, #6
 8004f44:	f000 f9f6 	bl	8005334 <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (i != ((ULONG) 0))
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e9      	bne.n	8004f2c <_tx_trace_enable+0x2ac>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
 8004f58:	4b82      	ldr	r3, [pc, #520]	; (8005164 <_tx_trace_enable+0x4e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        i =          _tx_queue_created_count;
 8004f60:	4b81      	ldr	r3, [pc, #516]	; (8005168 <_tx_trace_enable+0x4e8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
 8004f66:	e015      	b.n	8004f94 <_tx_trace_enable+0x314>
        {

            /* Decrement the counter.  */
            i--;
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
 8004f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f72:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
 8004f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	009b      	lsls	r3, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	9100      	str	r1, [sp, #0]
 8004f80:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004f84:	2003      	movs	r0, #3
 8004f86:	f000 f9d5 	bl	8005334 <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 8004f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (i != ((ULONG) 0))
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <_tx_trace_enable+0x2e8>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
 8004f9a:	4b74      	ldr	r3, [pc, #464]	; (800516c <_tx_trace_enable+0x4ec>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
        i =              _tx_semaphore_created_count;
 8004fa0:	4b73      	ldr	r3, [pc, #460]	; (8005170 <_tx_trace_enable+0x4f0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
 8004fa6:	e00e      	b.n	8004fc6 <_tx_trace_enable+0x346>
        {

            /* Decrement the counter.  */
            i--;
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	3b01      	subs	r3, #1
 8004fac:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
 8004fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fba:	2004      	movs	r0, #4
 8004fbc:	f000 f9ba 	bl	8005334 <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 8004fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i != ((ULONG) 0))
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ed      	bne.n	8004fa8 <_tx_trace_enable+0x328>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
 8004fcc:	4b69      	ldr	r3, [pc, #420]	; (8005174 <_tx_trace_enable+0x4f4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	67bb      	str	r3, [r7, #120]	; 0x78
        i =          _tx_mutex_created_count;
 8004fd2:	4b69      	ldr	r3, [pc, #420]	; (8005178 <_tx_trace_enable+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
 8004fd8:	e00f      	b.n	8004ffa <_tx_trace_enable+0x37a>
        {

            /* Decrement the counter.  */
            i--;
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
 8004fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe2:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
 8004fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe6:	691b      	ldr	r3, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
 8004fe8:	2100      	movs	r1, #0
 8004fea:	9100      	str	r1, [sp, #0]
 8004fec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004fee:	2005      	movs	r0, #5
 8004ff0:	f000 f9a0 	bl	8005334 <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	67bb      	str	r3, [r7, #120]	; 0x78
        while (i != ((ULONG) 0))
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ec      	bne.n	8004fda <_tx_trace_enable+0x35a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
 8005000:	4b5e      	ldr	r3, [pc, #376]	; (800517c <_tx_trace_enable+0x4fc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	677b      	str	r3, [r7, #116]	; 0x74
        i =               _tx_block_pool_created_count;
 8005006:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <_tx_trace_enable+0x500>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
 800500c:	e00f      	b.n	800502e <_tx_trace_enable+0x3ae>
        {

             /* Decrement the counter.  */
            i--;
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	3b01      	subs	r3, #1
 8005012:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name, 
 8005014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2100      	movs	r1, #0
 800501e:	9100      	str	r1, [sp, #0]
 8005020:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005022:	2007      	movs	r0, #7
 8005024:	f000 f986 	bl	8005334 <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8005028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	677b      	str	r3, [r7, #116]	; 0x74
        while (i != ((ULONG) 0))
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ec      	bne.n	800500e <_tx_trace_enable+0x38e>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <_tx_trace_enable+0x504>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	673b      	str	r3, [r7, #112]	; 0x70
        i =              _tx_byte_pool_created_count;
 800503a:	4b53      	ldr	r3, [pc, #332]	; (8005188 <_tx_trace_enable+0x508>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
 8005040:	e00f      	b.n	8005062 <_tx_trace_enable+0x3e2>
        {

            /* Decrement the counter.  */
            i--;
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	3b01      	subs	r3, #1
 8005046:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name, 
 8005048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2100      	movs	r1, #0
 8005052:	9100      	str	r1, [sp, #0]
 8005054:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005056:	2008      	movs	r0, #8
 8005058:	f000 f96c 	bl	8005334 <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 800505c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	673b      	str	r3, [r7, #112]	; 0x70
        while (i != ((ULONG) 0))
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ec      	bne.n	8005042 <_tx_trace_enable+0x3c2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8005070:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005072:	b672      	cpsid	i
    return(int_posture);
 8005074:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
 8005078:	4b44      	ldr	r3, [pc, #272]	; (800518c <_tx_trace_enable+0x50c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3b01      	subs	r3, #1
 800507e:	4a43      	ldr	r2, [pc, #268]	; (800518c <_tx_trace_enable+0x50c>)
 8005080:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 8005082:	4b43      	ldr	r3, [pc, #268]	; (8005190 <_tx_trace_enable+0x510>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a43      	ldr	r2, [pc, #268]	; (8005194 <_tx_trace_enable+0x514>)
 8005088:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 800508a:	4b42      	ldr	r3, [pc, #264]	; (8005194 <_tx_trace_enable+0x514>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8095 	beq.w	80051c2 <_tx_trace_enable+0x542>
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <_tx_trace_enable+0x518>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 808e 	beq.w	80051c2 <_tx_trace_enable+0x542>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80050a6:	f3ef 8305 	mrs	r3, IPSR
 80050aa:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <_tx_trace_enable+0x51c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <_tx_trace_enable+0x520>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	663b      	str	r3, [r7, #96]	; 0x60
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <_tx_trace_enable+0x45a>
 80050c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	667b      	str	r3, [r7, #100]	; 0x64
 80050c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	041a      	lsls	r2, r3, #16
 80050ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d6:	667b      	str	r3, [r7, #100]	; 0x64
 80050d8:	e00e      	b.n	80050f8 <_tx_trace_enable+0x478>
 80050da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050dc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80050e0:	d205      	bcs.n	80050ee <_tx_trace_enable+0x46e>
 80050e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	663b      	str	r3, [r7, #96]	; 0x60
 80050ec:	e004      	b.n	80050f8 <_tx_trace_enable+0x478>
 80050ee:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80050f2:	663b      	str	r3, [r7, #96]	; 0x60
 80050f4:	2300      	movs	r3, #0
 80050f6:	667b      	str	r3, [r7, #100]	; 0x64
 80050f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005106:	2206      	movs	r2, #6
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <_tx_trace_enable+0x524>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
 8005118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511a:	2200      	movs	r2, #0
 800511c:	615a      	str	r2, [r3, #20]
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
 8005124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005126:	2200      	movs	r2, #0
 8005128:	61da      	str	r2, [r3, #28]
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	3320      	adds	r3, #32
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <_tx_trace_enable+0x528>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005136:	429a      	cmp	r2, r3
 8005138:	d33c      	bcc.n	80051b4 <_tx_trace_enable+0x534>
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <_tx_trace_enable+0x510>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005140:	4a14      	ldr	r2, [pc, #80]	; (8005194 <_tx_trace_enable+0x514>)
 8005142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b19      	ldr	r3, [pc, #100]	; (80051ac <_tx_trace_enable+0x52c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800514c:	621a      	str	r2, [r3, #32]
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <_tx_trace_enable+0x530>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d035      	beq.n	80051c2 <_tx_trace_enable+0x542>
 8005156:	4b16      	ldr	r3, [pc, #88]	; (80051b0 <_tx_trace_enable+0x530>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <_tx_trace_enable+0x52c>)
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3
 8005162:	e02e      	b.n	80051c2 <_tx_trace_enable+0x542>
 8005164:	2000198c 	.word	0x2000198c
 8005168:	20001990 	.word	0x20001990
 800516c:	20001984 	.word	0x20001984
 8005170:	20001988 	.word	0x20001988
 8005174:	2000199c 	.word	0x2000199c
 8005178:	200019a0 	.word	0x200019a0
 800517c:	200019a4 	.word	0x200019a4
 8005180:	200019a8 	.word	0x200019a8
 8005184:	200019ac 	.word	0x200019ac
 8005188:	200019b0 	.word	0x200019b0
 800518c:	20001a54 	.word	0x20001a54
 8005190:	20001fd0 	.word	0x20001fd0
 8005194:	20001fd8 	.word	0x20001fd8
 8005198:	20001fdc 	.word	0x20001fdc
 800519c:	20000fac 	.word	0x20000fac
 80051a0:	200019bc 	.word	0x200019bc
 80051a4:	e0001004 	.word	0xe0001004
 80051a8:	20001fd4 	.word	0x20001fd4
 80051ac:	20001fc4 	.word	0x20001fc4
 80051b0:	20001fe0 	.word	0x20001fe0
 80051b4:	4a43      	ldr	r2, [pc, #268]	; (80052c4 <_tx_trace_enable+0x644>)
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <_tx_trace_enable+0x648>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051c0:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 80051c2:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <_tx_trace_enable+0x644>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
 80051c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d06b      	beq.n	80052a6 <_tx_trace_enable+0x626>
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <_tx_trace_enable+0x64c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d065      	beq.n	80052a6 <_tx_trace_enable+0x626>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80051da:	f3ef 8305 	mrs	r3, IPSR
 80051de:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <_tx_trace_enable+0x650>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ea:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <_tx_trace_enable+0x654>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <_tx_trace_enable+0x58e>
 80051f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005204:	4313      	orrs	r3, r2
 8005206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520c:	e00e      	b.n	800522c <_tx_trace_enable+0x5ac>
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005214:	d205      	bcs.n	8005222 <_tx_trace_enable+0x5a2>
 8005216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005220:	e004      	b.n	800522c <_tx_trace_enable+0x5ac>
 8005222:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8005226:	65bb      	str	r3, [r7, #88]	; 0x58
 8005228:	2300      	movs	r3, #0
 800522a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	2206      	movs	r2, #6
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <_tx_trace_enable+0x658>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	2200      	movs	r2, #0
 8005250:	615a      	str	r2, [r3, #20]
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	2200      	movs	r2, #0
 8005256:	619a      	str	r2, [r3, #24]
 8005258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525a:	2200      	movs	r2, #0
 800525c:	61da      	str	r2, [r3, #28]
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	3320      	adds	r3, #32
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <_tx_trace_enable+0x65c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800526a:	429a      	cmp	r2, r3
 800526c:	d314      	bcc.n	8005298 <_tx_trace_enable+0x618>
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <_tx_trace_enable+0x660>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <_tx_trace_enable+0x644>)
 8005276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <_tx_trace_enable+0x648>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005280:	621a      	str	r2, [r3, #32]
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <_tx_trace_enable+0x664>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <_tx_trace_enable+0x626>
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <_tx_trace_enable+0x664>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <_tx_trace_enable+0x648>)
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4610      	mov	r0, r2
 8005294:	4798      	blx	r3
 8005296:	e006      	b.n	80052a6 <_tx_trace_enable+0x626>
 8005298:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <_tx_trace_enable+0x644>)
 800529a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_tx_trace_enable+0x648>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052a4:	621a      	str	r2, [r3, #32]
 80052a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80052b2:	f7fe fdaf 	bl	8003e14 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
 80052b6:	2300      	movs	r3, #0
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    
    /* Return completion status.  */
    return(status);
 80052ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    }

    /* Return completion status.  */
    return(status);
#endif
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3790      	adds	r7, #144	; 0x90
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20001fd8 	.word	0x20001fd8
 80052c8:	20001fc4 	.word	0x20001fc4
 80052cc:	20001fdc 	.word	0x20001fdc
 80052d0:	20000fac 	.word	0x20000fac
 80052d4:	200019bc 	.word	0x200019bc
 80052d8:	e0001004 	.word	0xe0001004
 80052dc:	20001fd4 	.word	0x20001fd4
 80052e0:	20001fd0 	.word	0x20001fd0
 80052e4:	20001fe0 	.word	0x20001fe0

080052e8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <_tx_trace_initialize+0x34>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <_tx_trace_initialize+0x38>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <_tx_trace_initialize+0x3c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <_tx_trace_initialize+0x40>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <_tx_trace_initialize+0x44>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <_tx_trace_initialize+0x48>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20001fc4 	.word	0x20001fc4
 8005320:	20001fc8 	.word	0x20001fc8
 8005324:	20001fcc 	.word	0x20001fcc
 8005328:	20001fd0 	.word	0x20001fd0
 800532c:	20001fd4 	.word	0x20001fd4
 8005330:	20001fd8 	.word	0x20001fd8

08005334 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8005334:	b480      	push	{r7}
 8005336:	b08d      	sub	sp, #52	; 0x34
 8005338:	af00      	add	r7, sp, #0
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <_tx_trace_object_register+0x1c8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80d0 	beq.w	80054ee <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800534e:	4b6c      	ldr	r3, [pc, #432]	; (8005500 <_tx_trace_object_register+0x1cc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8005354:	4b6b      	ldr	r3, [pc, #428]	; (8005504 <_tx_trace_object_register+0x1d0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80c8 	beq.w	80054ee <_tx_trace_object_register+0x1ba>
        {
    
            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8005366:	4b68      	ldr	r3, [pc, #416]	; (8005508 <_tx_trace_object_register+0x1d4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800536c:	4b63      	ldr	r3, [pc, #396]	; (80054fc <_tx_trace_object_register+0x1c8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8005372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	461a      	mov	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the 
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d103      	bne.n	80053aa <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 80053a6:	2301      	movs	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
                }
                
                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d02d      	beq.n	800540c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d11a      	bne.n	80053ee <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 80053b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d102      	bne.n	80053c6 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c4:	e013      	b.n	80053ee <_tx_trace_object_register+0xba>
                    }
                    else
                    {
                    
                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80053c6:	4b4d      	ldr	r3, [pc, #308]	; (80054fc <_tx_trace_object_register+0x1c8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	4613      	mov	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	461a      	mov	r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	61bb      	str	r3, [r7, #24]
                
                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }
        
                /* Move to the next entry.  */
                i++;
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	3301      	adds	r3, #1
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        
                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 80053f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d301      	bcc.n	8005400 <_tx_trace_object_register+0xcc>
                {
        
                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 80053fc:	2300      	movs	r3, #0
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
        
            } while (i != _tx_trace_registry_search_start);
 8005400:	4b41      	ldr	r3, [pc, #260]	; (8005508 <_tx_trace_object_register+0x1d4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005406:	429a      	cmp	r2, r3
 8005408:	d1b0      	bne.n	800536c <_tx_trace_object_register+0x38>
 800540a:	e000      	b.n	800540e <_tx_trace_object_register+0xda>
                    break;
 800540c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	429a      	cmp	r2, r3
 8005414:	d26b      	bcs.n	80054ee <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8005416:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <_tx_trace_object_register+0x1d0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a39      	ldr	r2, [pc, #228]	; (8005504 <_tx_trace_object_register+0x1d0>)
 800541e:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	3301      	adds	r3, #1
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	429a      	cmp	r2, r3
 8005428:	d904      	bls.n	8005434 <_tx_trace_object_register+0x100>
                {
                    
                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	3301      	adds	r3, #1
 800542e:	4a36      	ldr	r2, [pc, #216]	; (8005508 <_tx_trace_object_register+0x1d4>)
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e002      	b.n	800543a <_tx_trace_object_register+0x106>
                }
                else
                {
                
                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8005434:	4b34      	ldr	r3, [pc, #208]	; (8005508 <_tx_trace_object_register+0x1d4>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
                }
        
                /* Yes, an entry has been found...  */
                
                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800543a:	4b30      	ldr	r3, [pc, #192]	; (80054fc <_tx_trace_object_register+0x1c8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	461a      	mov	r2, r3
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	61bb      	str	r3, [r7, #24]
                
                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005472:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	e014      	b.n	80054a4 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	4413      	add	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]
                  
                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	7819      	ldrb	r1, [r3, #0]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	4413      	add	r3, r2
 8005490:	3310      	adds	r3, #16
 8005492:	460a      	mov	r2, r1
 8005494:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d006      	beq.n	80054ac <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	3301      	adds	r3, #1
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b1e      	cmp	r3, #30
 80054a8:	d9e7      	bls.n	800547a <_tx_trace_object_register+0x146>
 80054aa:	e000      	b.n	80054ae <_tx_trace_object_register+0x17a>
                    {
                        break;
 80054ac:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	4413      	add	r3, r2
 80054b4:	3310      	adds	r3, #16
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d110      	bne.n	80054e2 <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */
            
                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	617b      	str	r3, [r7, #20]
            
                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 80054e0:	e005      	b.n	80054ee <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2200      	movs	r2, #0
 80054e6:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2200      	movs	r2, #0
 80054ec:	70da      	strb	r2, [r3, #3]
}
 80054ee:	bf00      	nop
 80054f0:	3734      	adds	r7, #52	; 0x34
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20001fc8 	.word	0x20001fc8
 8005500:	20001fe4 	.word	0x20001fe4
 8005504:	20001fe8 	.word	0x20001fe8
 8005508:	20001fec 	.word	0x20001fec

0800550c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b092      	sub	sp, #72	; 0x48
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800551a:	2300      	movs	r3, #0
 800551c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005524:	2302      	movs	r3, #2
 8005526:	647b      	str	r3, [r7, #68]	; 0x44
 8005528:	e075      	b.n	8005616 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800552a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552c:	2b34      	cmp	r3, #52	; 0x34
 800552e:	d002      	beq.n	8005536 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005530:	2302      	movs	r3, #2
 8005532:	647b      	str	r3, [r7, #68]	; 0x44
 8005534:	e06f      	b.n	8005616 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005536:	f3ef 8310 	mrs	r3, PRIMASK
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005540:	b672      	cpsid	i
    return(int_posture);
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005546:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <_txe_byte_pool_create+0x128>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	4a39      	ldr	r2, [pc, #228]	; (8005634 <_txe_byte_pool_create+0x128>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	f383 8810 	msr	PRIMASK, r3
}
 800555a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <_txe_byte_pool_create+0x12c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005562:	2300      	movs	r3, #0
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
 8005566:	e009      	b.n	800557c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556c:	429a      	cmp	r2, r3
 800556e:	d00b      	beq.n	8005588 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005578:	3301      	adds	r3, #1
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	4b2f      	ldr	r3, [pc, #188]	; (800563c <_txe_byte_pool_create+0x130>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005582:	429a      	cmp	r2, r3
 8005584:	d3f0      	bcc.n	8005568 <_txe_byte_pool_create+0x5c>
 8005586:	e000      	b.n	800558a <_txe_byte_pool_create+0x7e>
                break;
 8005588:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800558a:	f3ef 8310 	mrs	r3, PRIMASK
 800558e:	623b      	str	r3, [r7, #32]
    return(posture);
 8005590:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005592:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005594:	b672      	cpsid	i
    return(int_posture);
 8005596:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800559a:	4b26      	ldr	r3, [pc, #152]	; (8005634 <_txe_byte_pool_create+0x128>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3b01      	subs	r3, #1
 80055a0:	4a24      	ldr	r2, [pc, #144]	; (8005634 <_txe_byte_pool_create+0x128>)
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	f383 8810 	msr	PRIMASK, r3
}
 80055ae:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80055b0:	f7fe fc30 	bl	8003e14 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d102      	bne.n	80055c2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80055bc:	2302      	movs	r3, #2
 80055be:	647b      	str	r3, [r7, #68]	; 0x44
 80055c0:	e029      	b.n	8005616 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80055c8:	2303      	movs	r3, #3
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
 80055cc:	e023      	b.n	8005616 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b63      	cmp	r3, #99	; 0x63
 80055d2:	d802      	bhi.n	80055da <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80055d4:	2305      	movs	r3, #5
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
 80055d8:	e01d      	b.n	8005616 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80055da:	4b19      	ldr	r3, [pc, #100]	; (8005640 <_txe_byte_pool_create+0x134>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <_txe_byte_pool_create+0x138>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80055e8:	2313      	movs	r3, #19
 80055ea:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055ec:	f3ef 8305 	mrs	r3, IPSR
 80055f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80055f2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80055f4:	4b14      	ldr	r3, [pc, #80]	; (8005648 <_txe_byte_pool_create+0x13c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005604:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <_txe_byte_pool_create+0x13c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005610:	d201      	bcs.n	8005616 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005612:	2313      	movs	r3, #19
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7fd ff54 	bl	80034d0 <_tx_byte_pool_create>
 8005628:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800562c:	4618      	mov	r0, r3
 800562e:	3748      	adds	r7, #72	; 0x48
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20001a54 	.word	0x20001a54
 8005638:	200019ac 	.word	0x200019ac
 800563c:	200019b0 	.word	0x200019b0
 8005640:	200019bc 	.word	0x200019bc
 8005644:	20001b04 	.word	0x20001b04
 8005648:	20000fac 	.word	0x20000fac

0800564c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b09a      	sub	sp, #104	; 0x68
 8005650:	af06      	add	r7, sp, #24
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800565a:	2300      	movs	r3, #0
 800565c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005664:	230e      	movs	r3, #14
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	e0bb      	b.n	80057e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	2bb0      	cmp	r3, #176	; 0xb0
 800566e:	d002      	beq.n	8005676 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005670:	230e      	movs	r3, #14
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005674:	e0b5      	b.n	80057e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005676:	f3ef 8310 	mrs	r3, PRIMASK
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005680:	b672      	cpsid	i
    return(int_posture);
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005686:	4b64      	ldr	r3, [pc, #400]	; (8005818 <_txe_thread_create+0x1cc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3301      	adds	r3, #1
 800568c:	4a62      	ldr	r2, [pc, #392]	; (8005818 <_txe_thread_create+0x1cc>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <_txe_thread_create+0x1d0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80056a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80056aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ac:	3b01      	subs	r3, #1
 80056ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b0:	4413      	add	r3, r2
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	647b      	str	r3, [r7, #68]	; 0x44
 80056bc:	e02b      	b.n	8005716 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d101      	bne.n	80056ca <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d028      	beq.n	8005722 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d308      	bcc.n	80056ec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80056da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d203      	bcs.n	80056ec <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d308      	bcc.n	8005708 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80056f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d203      	bcs.n	8005708 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005712:	3301      	adds	r3, #1
 8005714:	647b      	str	r3, [r7, #68]	; 0x44
 8005716:	4b42      	ldr	r3, [pc, #264]	; (8005820 <_txe_thread_create+0x1d4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800571c:	429a      	cmp	r2, r3
 800571e:	d3ce      	bcc.n	80056be <_txe_thread_create+0x72>
 8005720:	e000      	b.n	8005724 <_txe_thread_create+0xd8>
                break;
 8005722:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005724:	f3ef 8310 	mrs	r3, PRIMASK
 8005728:	61fb      	str	r3, [r7, #28]
    return(posture);
 800572a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800572c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800572e:	b672      	cpsid	i
    return(int_posture);
 8005730:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005734:	4b38      	ldr	r3, [pc, #224]	; (8005818 <_txe_thread_create+0x1cc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	4a37      	ldr	r2, [pc, #220]	; (8005818 <_txe_thread_create+0x1cc>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800574a:	f7fe fb63 	bl	8003e14 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005752:	429a      	cmp	r2, r3
 8005754:	d102      	bne.n	800575c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8005756:	230e      	movs	r3, #14
 8005758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575a:	e042      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800575c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005762:	2303      	movs	r3, #3
 8005764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005766:	e03c      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800576e:	2303      	movs	r3, #3
 8005770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005772:	e036      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005776:	2bc7      	cmp	r3, #199	; 0xc7
 8005778:	d802      	bhi.n	8005780 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800577a:	2305      	movs	r3, #5
 800577c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577e:	e030      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8005780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005782:	2b1f      	cmp	r3, #31
 8005784:	d902      	bls.n	800578c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8005786:	230f      	movs	r3, #15
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578a:	e02a      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800578c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800578e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005790:	429a      	cmp	r2, r3
 8005792:	d902      	bls.n	800579a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8005794:	2318      	movs	r3, #24
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005798:	e023      	b.n	80057e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d902      	bls.n	80057a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80057a0:	2310      	movs	r3, #16
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	e01d      	b.n	80057e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <_txe_thread_create+0x1d8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <_txe_thread_create+0x1dc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80057b4:	2313      	movs	r3, #19
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80057b8:	f3ef 8305 	mrs	r3, IPSR
 80057bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80057be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <_txe_thread_create+0x1e0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80057ca:	f3ef 8305 	mrs	r3, IPSR
 80057ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80057d0:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <_txe_thread_create+0x1e0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80057dc:	d201      	bcs.n	80057e2 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80057de:	2313      	movs	r3, #19
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d112      	bne.n	800580e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fd fff6 	bl	80037f8 <_tx_thread_create>
 800580c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800580e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005810:	4618      	mov	r0, r3
 8005812:	3750      	adds	r7, #80	; 0x50
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20001a54 	.word	0x20001a54
 800581c:	200019c4 	.word	0x200019c4
 8005820:	200019c8 	.word	0x200019c8
 8005824:	200019bc 	.word	0x200019bc
 8005828:	20001b04 	.word	0x20001b04
 800582c:	20000fac 	.word	0x20000fac

08005830 <__libc_init_array>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4d0d      	ldr	r5, [pc, #52]	; (8005868 <__libc_init_array+0x38>)
 8005834:	4c0d      	ldr	r4, [pc, #52]	; (800586c <__libc_init_array+0x3c>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	2600      	movs	r6, #0
 800583c:	42a6      	cmp	r6, r4
 800583e:	d109      	bne.n	8005854 <__libc_init_array+0x24>
 8005840:	4d0b      	ldr	r5, [pc, #44]	; (8005870 <__libc_init_array+0x40>)
 8005842:	4c0c      	ldr	r4, [pc, #48]	; (8005874 <__libc_init_array+0x44>)
 8005844:	f000 f820 	bl	8005888 <_init>
 8005848:	1b64      	subs	r4, r4, r5
 800584a:	10a4      	asrs	r4, r4, #2
 800584c:	2600      	movs	r6, #0
 800584e:	42a6      	cmp	r6, r4
 8005850:	d105      	bne.n	800585e <__libc_init_array+0x2e>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	f855 3b04 	ldr.w	r3, [r5], #4
 8005858:	4798      	blx	r3
 800585a:	3601      	adds	r6, #1
 800585c:	e7ee      	b.n	800583c <__libc_init_array+0xc>
 800585e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005862:	4798      	blx	r3
 8005864:	3601      	adds	r6, #1
 8005866:	e7f2      	b.n	800584e <__libc_init_array+0x1e>
 8005868:	08005924 	.word	0x08005924
 800586c:	08005924 	.word	0x08005924
 8005870:	08005924 	.word	0x08005924
 8005874:	08005928 	.word	0x08005928

08005878 <memset>:
 8005878:	4402      	add	r2, r0
 800587a:	4603      	mov	r3, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	d100      	bne.n	8005882 <memset+0xa>
 8005880:	4770      	bx	lr
 8005882:	f803 1b01 	strb.w	r1, [r3], #1
 8005886:	e7f9      	b.n	800587c <memset+0x4>

08005888 <_init>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr

08005894 <_fini>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr
